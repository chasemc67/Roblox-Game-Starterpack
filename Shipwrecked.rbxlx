<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="RBX86db7c56fb3f43e2acbc678598e3bf3b">
		<Properties>
			<bool name="AllowThirdPartySales">false</bool>
			<token name="AnimationWeightedBlendFix">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<token name="ClientAnimatorThrottling">0</token>
			<string name="CollisionGroups">Default^0^-1</string>
			<Ref name="CurrentCamera">RBX3ba77074edf84ba2959751bc8f09f3b7</Ref>
			<double name="DistributedGameTime">0</double>
			<bool name="ExplicitAutoJoints">true</bool>
			<float name="FallenPartsDestroyHeight">-500</float>
			<Vector3 name="GlobalWind">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<float name="Gravity">196.199997</float>
			<token name="HumanoidOnlySetCollisionsOnStateChange">0</token>
			<token name="InterpolationThrottling">0</token>
			<token name="LevelOfDetail">0</token>
			<token name="MeshPartHeadsAndAccessories">0</token>
			<CoordinateFrame name="ModelMeshCFrame">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
			<Vector3 name="ModelMeshSize">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<string name="Name">Workspace</string>
			<bool name="NeedsPivotMigration">false</bool>
			<token name="PhysicsInertiaAndVolumeFix">0</token>
			<token name="PhysicsSteppingMethod">0</token>
			<Ref name="PrimaryPart">null</Ref>
			<token name="ReplicateInstanceDestroySetting">0</token>
			<token name="Retargeting">0</token>
			<token name="SignalBehavior">0</token>
			<int64 name="SourceAssetId">-1</int64>
			<token name="StreamOutBehavior">0</token>
			<bool name="StreamingEnabled">false</bool>
			<int name="StreamingMinRadius">64</int>
			<token name="StreamingPauseMode">0</token>
			<int name="StreamingTargetRadius">1024</int>
			<BinaryString name="Tags"></BinaryString>
			<bool name="TerrainWeldsFixed">true</bool>
			<bool name="TouchesUseCollisionGroups">false</bool>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001c763</UniqueId>
			<OptionalCoordinateFrame name="WorldPivotData">
				<CFrame>
					<X>0</X>
					<Y>-10</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CFrame>
			</OptionalCoordinateFrame>
		</Properties>
		<Item class="Terrain" referent="RBX5e84db53868548aaa2d9fd9288d67b47">
			<Properties>
				<token name="AcquisitionMethod">3</token>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="Decoration">false</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHta
gcLgc4RKxr21zq2UlJSM]]></BinaryString>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Terrain</string>
				<BinaryString name="PhysicsGrid"><![CDATA[AgMAAAz+////////////7/fvAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7f
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7f
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAE
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAMAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//
AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7f
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAF
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAAGAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAHAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHuAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3tAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAARAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAAEAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHtAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3rAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAD
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHsAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAP//AP//AP//Af3qAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHr
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAP//AP//AP//Af3qAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHqAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAP//AP//AP//Af3qAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAAFAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHqAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAP//AP//AP//Af3pAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHqAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAP//AP//AP//Af3pAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHpAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAP//AP//AP//Af3qAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAFAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHpAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3rAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAD
AAAAAAAAAAAAAAAJAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHpAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3r
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHpAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3rAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHqAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3qAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHqAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3qAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAANAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHrAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3qAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHrAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AP//AP//AP//Af3rAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHrAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af3w
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAE
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAD/AAD/AAD/AAHsAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAP//AP//AP//Af3wAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAD
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAD
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHf
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/
AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAD
AAAAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//
AP//Af7fAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAP//AP//AP//Af7fAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAD/AAD/AAD/AAHfAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAD/AAD/AAD/AAHfAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAAAAAAAAAAABAAAAAAAAATz////////////x+PIAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAQAAAAAAAAAAAAAAAsAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAQAAP8AAP8AAP8BAOQAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAP8AAP8AAP8B
AOMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAUAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOQAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAUAAAAA
AAAAAAAAAAQAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOUAAAAAAAAAAAAA
AAcAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAQAAAAA
AAAAAAAAAAMAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOQAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOUAAAAA
AAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAIAAP8A
AP8AAP8BAOUAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAA
AAQAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAP8A
AP8AAP8BAOYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAUAAP8AAP8AAP8BAOUAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAYAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOgAAAAA
AAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAYAAAAAAAAAAAAA
AAEAAP8AAP8AAP8BAO0AAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAYAAP8AAP8AAP8BAO4AAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAUAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAP8AAP8AAP8BAOUAAAAAAAAAAAAAAAMAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAIAAP8AAP8AAP8BAOgAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAQAAAAA
AAAAAAAAAAMAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAcAAP8AAP8AAP8BAOoAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAA
AAAAAAAAAAMAAP8AAP8AAP8BAOUAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAQAAP8AAP8AAP8BAOUAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOkAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAA
AAAAAAAAAAUAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAA
AAEAAP8AAP8AAP8BAOoAAAAAAAAAAAAAAAsAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAMAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOQAAAAAAAAAAAAAAAMAAAAAAAAAAAAA
AAUAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAIAAP8AAP8AAP8BAOMAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAQAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAO8AAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAP8AAP8AAP8B
APMAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAP8AAP8AAP8B
AOUAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAMAAP8AAP8AAP8BAOgAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAP8AAP8AAP8BAOkAAAAAAAAAAAAAAAQAAAAA
AAAAAAAAAAcAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAcAAP8AAP8AAP8BAPAAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAEAAP8AAP8AAP8B
APAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAIAAAAA
AAAAAAAAAAQAAAAAAAAAAAAAAAEAAP8AAP8AAP8BAOwAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
AAQAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAIAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAE=]]></BinaryString>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="SmoothGrid"><![CDATA[AQX////////////8/fyA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//
AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAA
AAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAA
AAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAA
AAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAA
AAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAA
AAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAAB
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAA/wAA/wAA/wAB+Ygj
gASIGoAFiBiABogYgAeIF4AHiBeAB4gXgAeIF4AHiBeAB4gXgAeIF4ABiPoAiB6AAYgdgAKI
HIABiP+IQYADiBuAA4gagAWIGYAGiBeAB4gXgAeIF4AHiBeAB4gXgAeIF4AHiP+IdQCI/4hi
gAKIG4AEiBqABIgZgAaIGIAGiBiAB4gXgAeIF4AHiBeAB4j/iP+I+YABiByAA4gagAWIGYAF
iBiAB4gXgAeIF4AHiP+I/4j/iDmAAogcgAKIG4AEiBmABogYgAaIGYAGiP+I/4j/iFoAiB2A
AogbgASIGoAEiP+I/4j/iJwAiB2AAoj/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4ja
gwFD9UPpQ91D0UPFQ7dDrUOjQ5lDkUOJQ4JDe0N1Q3FDbkNsw2oCQ2xDbkNxQ3RDd0N7Q39D
gkOGCIMBQ/dD60PeQ9JDxkO5Q65DpEOaQ5FDiUOCQ3tDdUNxQ21Da8NpAkNqQ2xDb0NyQ3VD
eEN8Q39DggiDAUP5Q+1D4EPUQ8hDukOvQ6VDm0OSQ4pDgkN8Q3VDcUNtQ2pDacNoAUNpQ2tD
bUNwQ3NDdkN5Q3xDfwiDAUP7Q+5D4kPWQ8pDvEOxQ6ZDnEOTQ4tDg0N9Q3ZDcUNtQ2tDaUNo
Q2dDaENqQ2xDbkNxQ3RDd0N6Q32IAQND/UPwQ+RD2EPLQ71DskOoQ55DlUOMQ4VDfkN3Q3JD
bkNrQ2lDaENnQ2hDaUNrQ21DcENzQ3VDeEN7iAGDAUPzQ+ZD2kPOQ8BDtEOqQ6BDl0OOQ4ZD
f0N4Q3NDb0NsQ2rDaAJDaUNrQ21Db0NyQ3RDd0N5iAGDAUP1Q+hD3EPQQ8JDt0OsQ6JDmUOQ
Q4hDgUN6Q3VDcUNuQ2tDasNpAUNqQ2tDbUNvQ3FDdEN2Q3iIAYMBQ/dD6kPeQ9JDxEO5Q65D
pEObQ5NDi0OEQ3xDd0NzQ29DbUNrw2oBQ2tDbENuQ3BDckN0Q3ZDeIgBgwFD+UPtQ+FD1UPH
Q7xDsUOnQ55DlUONQ4ZDf0N6Q3VDckNvQ23DbAJDbUNvQ3FDckN0Q3ZDeIgBgwFD+0PvQ+ND
10PKQ79DtEOqQ6FDmEORQ4pDgkN9Q3hDdUNyQ3BDb0Nuw28BQ3FDckN0Q3ZDd0N5iAIDQ/1D
8UPmQ9pDzEPCQ7dDrkOkQ5xDlEONQ4ZDgEN8Q3hDdUNzQ3LDcQFDckNzQ3RDdkN3Q3lDeogC
gwFD9EPoQ91Dz0PFQ7tDsUOoQ6BDmEORQ4lDhEOAQ3xDeUN3w3UDQ3ZDd0N4Q3pDe0N8iAKD
AUP2Q+tD4EPTQ8hDvkO1Q6xDpEOcQ5VDjkOIQ4RDgEN9Q3tDecN4AkN5Q3pDe0N8Q35Df4gC
gwFD+UPtQ+ND1kPMQ8JDuUOwQ6hDoEOZQ5JDjUOIQ4VDgkN/Q35DfcN8AUN9Q35Df0OAQ4FD
gogCgwFD+0PwQ+VD2UPPQ8ZDvUO0Q6xDpUOeQ5dDkkONQ4lDhkOEQ4LDgQNDgkODw4QBQ4WI
AoMBQ/1D80PoQ9xD00PJQ8FDuEOxQ6lDo0OcQ5dDkkOPQ4xDiUOHw4YEQ4fDiAFDiYgCgwJD
9UPrQ+BD1kPNQ8VDvUO1Q65DqEOhQ5xDmEOUQ5FDj0ONQ4zDiwPDjAHDjQGIA4MBQ/hD7kPj
Q9pD0UPJQ8FDukOzQ61DpkOhQ51DmkOXQ5RDkkORw5ADw5EBw5IBiAODAUP6Q/FD5kPeQ9VD
zUPGQ79DuEOyQ6xDp0OjQ59DnEOaQ5hDl8OWBMOXAogDgwFD/UP0Q+lD4UPZQ9FDykPDQ71D
t0OxQ61DqUOlQ6JDoEOeQ53DnAeIA4MCQ/ZD7UPlQ91D1kPPQ8hDwkO9Q7dDskOuQ6tDqEOm
Q6RDo8OiAUOhw6IEiAODAkP5Q/BD6EPhQ9pD00PNQ8dDwkO8Q7hDtEOxQ65DrEOqQ6nDqAeI
A4MCQ/tD80PrQ+VD3kPYQ9JDzEPHQ8JDvkO6Q7dDtEOyQ7FDr8OuB4gDgwJD/kP1Q+9D6EPi
Q9xD1kPRQ8xDx0PDQ8BDvUO7Q7hDt0O2Q7XDtAaIA4MDQ/hD8kPsQ+ZD4EPbQ9ZD0UPMQ8lD
xkPDQ8FDv0O9Q7zDuwHDugWIBIMCQ/tD9UPvQ+pD5EPfQ9tD1kPSQ85Dy0PJQ8ZDxUPDQ8LD
wQLDwASIBIMCQ/1D+EPyQ+1D6EPkQ99D20PXQ9RD0UPOQ8xDy0PJQ8jDxwZDxogEgwND+0P2
Q/FD7EPoQ+RD4EPcQ9lD1kPUQ9JD0UPPw84Bw80GiASDA0P+Q/lD9EPwQ+xD6EPlQ+FD3kPc
Q9pD2EPXQ9XD1AHD0waIBIMEQ/xD+EP0Q/BD7UPqQ+ZD5EPhQ+BD3kPcw9sBQ9rD2QaIBYME
Q/xD+EP1Q/JD70PrQ+lD50PlQ+RD4sPhAcPgAsPfBIgFgwVD/EP5Q/ZD80PxQ+5D7UPrQ+pD
6MPnAcPmBkPlQxdDCoEdQxlDDUMAgRxDHEMPQwOBHEMfQxJDBYEcQyFDFEMIgRxDJEMXQwqB
HEMmQxlDDUMAgRtDKEMcQw9DAoEbQytDHkMSQwWBG0MtQyBDFEMIgRtDL0MjQxZDCoEbQzBD
JUMZQwxDAIEaQzJDJkMbQw9DA4EaQzNDKEMdQxFDBYEaQzVDKkMeQxNDCIEaQzZDK0MgRhVG
CkYAgRlDNkMsQyJGF0YMRgKBGUM3Qy1DI0YZRg9DBIEZQzdDLkMkQxpDEUMHgRlDOEMuQyVD
HEMSQwlDAIEYQzhDL0MmQx1DFEMLQwKBGEM3Qy9DJ0MeQxZDDUMFgRhDN0MvQydDH0MXQw9D
B4EYQzdDL0MoQyBDGEMRQwlDAYEXQzZDL0MoQyFDGUMSQwtDBIEXQzVDL0MoQyFDGkMUQw1D
BoEXQzRDLkMoQyJDG0MVQw5DCEMBgRZDNEMuQyhDIkMcQxZDEEMKQwOBFkMzQy1DKEMiQx1D
F0MSQwxDBkMBgRVDMkMtQyhDI0MeQxlDE0MOQwhDBIEVQzFDLEMoQyNDH0MaQxVDEEMLQwZD
AoEUQzBDLEMoQyRDH0MbQxdDEkMNQwlDBUMCgf+B/4H/gf+B/4H/gf+B/4ETgP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/AAAAAAAAAAAAAAABiIOAB4gWgAmIFoAMiBOA
DIgTgAyIE4AMiBOADIgTSKqAC4gUgAuIFYAKiBaACogVgAuIFYAIiBiABogZgAWIG4AEiByA
A4gdgAKIHoABiB6AAYj/iKOACIgWgAqIFYAKiBWACogVgAqIFYAKiBaACogVgAqIFoAJiBaA
CogWgAqIFoANiBKADIgUgAqIFoAHiBmABYgbgASIHIACiB2AAYj/iMSABogYgAiIF4AJiBaA
CYgXgAiIF4AIiBeACYgXgAiIGIAIiBeACYgXgAqIFYAMiBOAC4gVgAmIF4AHiBqABIgcgAKI
HgCI/4j/iAaABYgagAaIGYAHiBiAB4gZgAaIGYAHiBmAB4gZgAeIGIAIiBeADIgSgAyIFYAJ
iBeAB4gZgAWIHIACiB2AAYj/iP+IJ4AEiBuABYgbgAWIGoAFiBuABYgagAaIGoAGiBmAB4gY
gAmIFYAMiBSACogXgAeIGYAFiBuAA4gdgAGI/4j/iGuAAYgegAKIHoACiB2AA4gcgASIG4AG
iBmACIgWgAyIE4ALiBaACIgZgAWIG4ADiB2AAYj/iP+IroABiB6AAogdgAOIHIAFiBqAB4gX
gAqIFIAMiBWACYgYgAaIG4ADiB2AAYgeAIj/iP+I0YABiB2ABIgbgAaIGIAJiBWADIgVgAmI
GIAGiBqABIgcgAKIHgCI/4j/iNEAiB+AAogcgAWIGYAIiBaADIgUgAqIF4AHiBqABIgcgAKI
HgCI/4j/iPKAAYgdgASIGoAIiBaAC4gUgAuIF4AHiBmABYgcgAKIHYABiOWDBkP9Q/tD+EP2
Q/RD8kPxQ+/D7gHD7QHD7AaIBoMHQ/1D+0P5Q/hD98P1AUP0w/MIiAaDCkP+w/wBQ/vD+gHD
+QTD+gFD+YgHgxeICIMWiAqDFIgPgwuI/4g2AIgegASIGoAHiAQDiBGACogBgwGID4ANgwOI
EoAIgwSIFIAFgwaIFIADgweIFYABgwiIFQCDCYgVQ/1D/oMIiBRD+UP6Q/tD/EP+gwaIE0P1
Q/ZD90P4Q/pD/IMFiBND8UPyQ/ND9EP2Q/hD+kP9gwSIEkPtQ+5D70PwQ/JD9EP2Q/lD/YME
iBFDL0MsQyhDJEMgQxxDGEMVQxBDDEMJQwVDAoESQy9DK0MoQyVDIUMeQxpDF0MTQw9DDEMJ
QwZDA0MBgRBDLkMrQyhDJUMiQx9DHEMZQxVDEkMPQw1DCkMIQwVDA0MBQwCBDUMtQytDKEMl
QyNDIEMdQxtDGEMVQxNDEEMOQwxDCkMIQwZDBUMDQwLDAQHDAAlDLEMqQyhDJkMkQyFDH0Md
QxpDGEMWQxRDEkMQQw9DDUMLQwpDCUMIwwcBwwYGwwcCQyxDKkMoQyZDJEMjQyFDH0MdQxtD
GUMXQxZDFEMTQxJDEUMQQw/DDgHDDQfDDgJDK0MqQyhDJ0MlQyRDIkMhQx9DHkMcQxtDGkMZ
wxcBQxZDFcMUAsMTA8MUAsMVA0MqQylDKEMnQyZDJUMkQyJDIUMgQx9DHkMdwxwBQxvDGgPD
GQHDGgPDGwHDHAJDHUMqQylDKEMnwyYBQyVDJEMjwyIBwyEBwyABwx8GwyABwyECQyLDIwHD
JAFDKcMoAcMnAcMmAcMlAsMkCcMlAcMmAUMnwygBQynDKgHDKwHDKAHDJwXDJgHDJwTDKALD
KQFDKsMrAUMsQy1DLsMvAUMwQzHDMgHDJwfDKALDKQFDKsMrAUMswy0BQy5DL0MwQzFDMkMz
QzRDNUM2QzdDOMM5AcMmA8MnAcMoAcMpAUMqQytDLMMtAUMuQzBDMUMyQzNDNEM1QzZDN0M5
QzpDO0M8Qz1DPkM/Q0BDJMMlAcMmAUMnQyhDKcMqAUMrQy1DLkMvQzBDMUMzQzRDNkM3QzhD
OkM7QzxDPkM/Q0FDQkNDQ0VDRkNHQyPDJAFDJUMmQydDKEMpQypDK0MsQy5DL0MxQzJDNEM2
QzdDOUM7QzxDPkNAQ0FDQ0NFQ0ZDSENJQ0tDTENNQyFDIkMjQyRDJUMmQydDKEMqQyxDLUMv
QzBDMkM0QzZDOEM6QzxDPkNAQ0JDRENGQ0hDSUNLQ01DT0NQQ1JDU8MgAUMhQyJDJEMlQyZD
KEMqQytDLUMvQzFDM0M1QzhDOkM8Qz9DQUNDQ0VDR0NJQ0xDTkNQQ1JDVENWQ1dDWcMeAUMg
QyFDIkMkQyVDJ0MpQytDLUMvQzJDNEM2QzlDPEM+Q0FDQ0NGQ0hDS0NNQ1BDUkNUQ1ZDWENb
Q1xDXkMbQxxDHUMfQyBDIkMkQyZDKEMqQy1DL0MyQzRDN0M6Qz1DQENDQ0VDSENLQ01DUENT
Q1ZDWENaQ11DX0NhQ2NDGUMaQxtDHUMeQyBDIkMkQydDKUMsQy5DMUM0QzdDOkM+Q0FDRENH
Q0pDTUNQQ1NDVkNZQ1tDXkNgQ2NDZUNoQxZDF0MZQxpDHEMeQyBDIkMlQyhDKkMtQzBDNEM3
QzpDPkNBQ0VDSENLQ09DUkNVQ1hDW0NeQ2FDZENnQ2lDbEMTQxRDFkMXQxlDG0MdQyBDI0Mm
QylDLEMvQzNDNkM6Qz5DQUNFQ0lDTENQQ1NDVkNaQ15DYUNkQ2dDakNtQ29DEEMRQxNDFEMW
QxhDG0MdQyBDI0MnQypDLUMxQzVDOUM9Q0FDRUNJQ01DUENUQ1hDXENfQ2NDZkNpQ2xDb0Ny
Qw1DDkMPQxFDE0MVQxhDGkMeQyFDJEMoQyxDL0MzQzdDPENAQ0RDSUNNQ1FDVUNYQ11DYUNk
Q2hDa0NvQ3JDdUMJQwtDDEMOQxBDEkMUQxdDG0MeQyJDJUMpQy1DMUM2QztDP0NEQ0hDTENQ
Q1VDWUNeQ2FDZUNpQ21DcEN0Q3dDBkMHQwhDCkMMQw5DEUMUQxdDG0MfQyJDJ0MrQy9DNEM5
Qz5DQkNHQ0tDUENUQ1lDXkNiQ2ZDakNuQ3JDdUN5QwJDA0MEQwZDCEMKQw1DEEMUQxdDG0Mf
QyRDKEMtQzFDN0M8Q0FDRUNKQ09DVENYQ15DYkNmQ2pDbkNyQ3ZDeoEBQwBDAkMEQwZDCUMM
QxBDFEMYQxxDIEMlQypDL0M1QzpDP0NEQ0lDTkNTQ1dDXUNiQ2ZDakNvQ3NDd0N7gQNDAEMC
QwVDCEMMQxBDFEMZQx1DIkMnQyxDMkM3Qz1DQkNHQ0xDUUNWQ1xDYUNmQ2pDb0NzQ3hDfIEF
QwFDBEMIQwxDEEMVQxpDH0MkQylDL0M1QzpDQENFQ0tDUENVQ1tDYENlQ2pDbkNzQ3hDfIEG
QwBDBEMIQwxDEUMWQxtDIEMmQyxDMkM4Qz1DQ0NJQ05DU0NaQ19DZENpQ25Dc0N3Q3yBB0MA
QwRDCUMNQxJDGEMdQyNDKUMvQzVDO0NBQ0ZDTENSQ1hDXkNjQ2hDbUNyQ3dDfIH/gf+B/4H/
gf+B/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAAAAAAAAAA
AAGIRYAEiBmABYgYgAaIGIAGiBeAB4gWgAeIF4AHiBaAB4gXgAOIGwCI/4j/iEWAA4gagASI
GoAEiHiABIgZgAWIGIAGiBiABogXgAeIF4AHiBaAB4gXgAeIF4ADiBsAiP+I/4gFgAKIHIAC
iBuAA4gbgAOIBwCIj4AEiBmABYgZgAWIGIAGiBiABogXgAeIF4AHiBeAB4gXgAKI/4j/iAOA
AogcgAGIHYABiAiAAYgRgAKICIACiMyABIgZgAWIGYAFiBiABogYgAaIGIAHiBeAB4gXgAKI
/4izAIgPgAGIDACIDwCIBwCIBACIDoABiAiAAogRAIgJgASIDoABiAmABIjpgAOIG4ADSBaI
GoAEiBmABYgZgAWIGYAGiBmABogYgAGI/4hRAIgegAGIEIABiAqAAYgQAIgGAIgCgAKIEACI
B4AEiBuAA4gQAIgJgAOIEACICYADiP+ICoACiByAAogcgAOIGoAEiBuAA4gbgASIGoAFiBqA
BYjJAIgfAIgegAGIHYACiByAAogSAIgEgAeIGIAFiBqAA4gbgAKIHYABiBIAiAmAAYj/iCyA
AYgdgAGIHYACiByAAogcgAOIG4ADiByABIgbgAWIZQCIHwCIH4ABiB2AAogdgAKIG4ADiBOA
AUgiiAOABYgYgAaIGYADiByAAYgdgAGIHYABiB4AiP+ITQCIHgCIHoABiB2AAYgegAGIHYAC
iB2AA4gcgAaIGYAHiB6AAogegAKIHYACiByAA4gbgASIGoAFiBWACogXgASIG4ACiB0AiP+I
/4gwSEOIP4ABiB6ABYgagAeIGIAIiBeACYgWgAmIGYAGiBaACYgWgAmIFoAGiP+I/4jxgAGI
HoAFiBqAB4gYgAeIGIAIiBiAB4gYgAeIGoABiO3D6QFD6kPsQ+1D70PyQ/VD+UP9gwSIEEPk
Q+VD5kPnQ+lD60PuQ/FD9UP5Q/2DA4gQQ+BD4UPiQ+ND5UPnQ+pD7UPxQ/VD+UP+gwOID8Pc
AUPdQ99D4UPjQ+ZD6UPtQ/FD9kP6gwOID0PXQ9hD2UPaQ9xD30PiQ+VD6UPtQ/JD90P8gwOI
DkPTQ9RD1UPWQ9hD20PeQ+FD5kPqQ+9D9EP5gwOIDkPPQ9BD0UPSQ9RD10PaQ91D4kPnQ+tD
8UP2Q/yDAogOw8sBQ81DzkPRQ9ND1kPaQ99D5EPoQ+5D80P5gwOIDcPHAUPJQ8tDzUPQQ9ND
10PcQ+FD5kPrQ/FD90P9gwKIDUPCQ8RDxUPHQ8pDzUPQQ9RD2UPeQ+ND6UPvQ/VD+4MCiA1D
vkPAQ8FDxEPGQ8lDzUPRQ9dD3EPhQ+dD7UPzQ/qDAogNQ7tDvEO+Q8BDw0PHQ8pDz0PUQ9pD
30PlQ+tD8kP4gwKIDUO3Q7hDukO9Q8BDxEPIQ8xD0kPYQ91D40PqQ/BD90P+gwGIDUOzQ7VD
t0O6Q71DwUPFQ8pD0EPWQ9xD4kPpQ+9D9kP+gwKIDEOvQ7FDtEO3Q7pDvkPDQ8hDzkPUQ9pD
4UPnQ+5D9kP9gwKIDEOrQ65DsEO0Q7dDvEPAQ8ZDzEPSQ9lD30PmQ+1D9UP8gwKIDEOoQ6pD
rUOxQ7VDuUO+Q8NDykPQQ9dD3kPlQ+xD9EP7gwKIDEOkQ6dDqkOuQ7JDtkO8Q8FDyEPPQ9VD
3EPkQ+tD80P6gwKIDEOhQ6NDp0OrQ69DtEO5Q79DxkPNQ9RD20PiQ+pD8UP5gwKIDEOdQ6BD
pEOoQ6xDsUO3Q71DxEPLQ9JD2UPgQ+hD8EP4gwKIDEOaQ51DoUOlQ6pDr0O0Q7pDwkPJQ9BD
10PfQ+ZD7kP2gwKIDEOXQ5pDnkOiQ6dDrEOyQ7hDwEPHQ85D1UPdQ+VD7EP0Q/6DAYgMQ5VD
mEOcQ6BDpUOqQ7BDtkO9Q8RDzEPTQ9tD4kPqQ/JD/IMCiAtDkkOWQ5lDnkOiQ6hDrUOzQ7tD
wkPJQ9FD2EPgQ+hD8EP6gwKIC0OQQ5RDl0OcQ6BDpkOrQ7FDuUPAQ8dDzkPWQ95D5kPuQ/eD
AogLQ49DkkOWQ5pDn0OkQ6lDr0O3Q75DxUPMQ9RD20PjQ+tD9EP8gwKICkONQ5BDlEOYQ51D
okOoQ61DtUO8Q8NDykPRQ9lD4EPoQ/FD+YMCiApDjEOQQ5NDl0OcQ6FDpkOsQ7NDukPBQ8hD
z0PWQ95D5UPuQ/ZD/YMCiAlDjEOPQ5JDlkObQ59DpUOqQ7FDuEO+Q8VDzEPUQ9tD4kPrQ/ND
+oMDiAhDjEOPQ5JDlkOaQ55Do0OpQ7BDtkO9Q8NDykPRQ9hD30PoQ+9D9kP9gwKICEOMQ49D
kkOVQ5lDnkOjQ6hDrkO0Q7tDwUPIQ89D1kPdQ+VD7EPzQ/mDA4gHQ41Dj0OSQ5VDmUOdQ6JD
p0OtQ7NDuUO/Q8ZDzEPTQ9pD4kPpQ+9D9kP8gwOIBoEIQwBDBUMJQw9DFEMaQx9DJkMsQzJD
OEM+Q0RDSkNQQ1dDXENhQ2dDbENxQ3ZDe4EJQwFDBkMLQxBDFkMcQyNDKUMwQzZDPENCQ0hD
TkNVQ1pDYENlQ2tDcEN1Q3qBCkMCQwdDDUMTQxlDIEMnQy1DM0M6Q0BDRkNMQ1NDWUNeQ2RD
aUNvQ3RDeYELQwRDCkMQQxZDHkMkQypDMUM3Qz5DRENKQ1FDV0NdQ2NDaENuQ3NDeYELQwFD
BkMNQxNDG0MhQyhDL0M1QzxDQkNIQ1BDVkNcQ2FDZ0NtQ3JDeIEMQwNDCkMQQxhDH0MmQyxD
M0M6Q0BDR0NOQ1RDWkNgQ2ZDa0NxQ3eBDEMBQwdDDkMWQx1DJEMrQzFDOEM/Q0VDTUNTQ1lD
X0NlQ2pDcEN2gQ1DBUMMQxRDG0MiQylDMEM3Qz1DRENLQ1JDWENeQ2RDakNvQ3WBDUMDQwpD
EkMZQyBDJ0MuQzVDPENDQ0pDUUNXQ11DY0NpQ29DdIENQwFDCEMQQxhDH0MmQy1DNEM7Q0JD
SkNQQ1ZDXENiQ2hDbkN0gQ1DAEMGQw9DF0MeQyVDLEMzQzpDQUNJQ09DVUNcQ2JDaENtQ3OB
DkMFQw5DFkMdQyRDLEMzQzpDQUNIQ09DVUNbQ2FDZ0NtQ3OBDkMEQw1DFUMcQyRDK0MyQzlD
QENIQ09DVUNbQ2FDZ0NtQ3OBDkMDQw1DFEMcQyNDK0MyQzlDQENIQ09DVUNbQ2FDZ0NtQ3OB
DkMDQwxDFEMcQyNDK0MyQzlDQENIQ05DVUNbQ2FDZ0NtQ3OBDkMCQwtDE0MbQyNDKkMyQzlD
QENIQ05DVUNbQ2FDZ0NtQ3OBDkMBQwtDE0MbQyNDKkMyQzlDQENIQ05DVUNbQ2FDZ0NtQ3OB
DkMAQwpDEkMaQyJDKkMxQzhDP0NHQ05DVENaQ2BDZkNsQ3KBDkMAQwlDEUMZQyFDKUMwQzhD
P0NHQ01DU0NaQ2BDZkNrQ3GBD0MIQxBDGEMgQyhDL0M3Qz5DRkNMQ1JDWENeQ2RDakNwgQ9D
BkMOQxdDH0MmQy5DNUM8Q0RDS0NRQ1dDXUNjQ2lDboEPQwRDDUMVQx1DJEMsQzNDOkNCQ0lD
T0NVQ1tDYENmQ2yBD0MCQwtDE0MbQyJDKkMxQzhDQENGQ0xDUkNYQ15DZENpgQ9DAEMIQxBD
GEMgQydDLkM1Qz1DQ0NJQ09DVUNbQ2BDZoEQQwZDDkMVQx1DJEMrQzJDOkNAQ0ZDTENRQ1dD
XENigRBDA0MLQxJDGkMhQyhDLkM2QzxDQkNIQ01DU0NYQ16BEEMAQwdDD0MWQx1DJEMrQzJD
OEM+Q0NDSUNOQ1NDWYERQwRDC0MTQxpDIEMnQy5DNEM5Qz5DRENJQ05DVIERQwBDCEMPQxVD
HEMiQylDL0M0QzlDP0NEQ0lDToESQwRDC0MRQxhDHkMkQypDL0M0QzlDPkNDQ0iBEkMAQwdD
DUMTQxlDIEMlQypDL0MzQzhDPUNCgRNDA0MJQw9DFEMbQyBDJEMpQy5DMkM3QzuB/4H/gf+B
/4H/gf+B/4H/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/AAAAAAAAAAAA
AAABiAWABYgGAIgQgAaIBoABiA6AB4gGgAKIDYAHiAaAA4gLgAiIBoAEiAmAA4gMgAWICIAB
iA+ABYgZgAeIF4AHiBeABogYgAaIGYAFiBmABIgbgAOIHIABiHKAAYgbgAOIGoAEiBmABYgd
gAGI14AFiBmABYgZgASIGoAEiAeAAogOgAWIB4ADiAyABogHgASIC4AGiAeABogIgANIQkjY
gAGIB4AHiAaAAYgOgAeIF4AHiBeAB4gYgAaIGIAGiBiABYgagASIGoADiByAAogdAIhUAIgc
gAKIGoAEiBmABYgdgAGI/4g4gAKIG4ADiAiABIgMgASICIAFiAqABYgIgAaICYAFiAiABogI
AIgOgAaIBwCID4AGiBiABogYgAaIGYAFiBmABYgZgAWIGoADiBuAA4gcgAGIHgCIVACIHIAC
iBqABYgbgAOI/4h2gAKICYAEiA2AAogJgASIDIADiAmABIgLgAGIDIAFiAkAiA6ABYgZgAWI
GYAFiBqABIgagASIGoAEiBqABIgagAOIHIACiB0AiHSAAYgagAWIGoAEiP+Il4ABiAmAA4gO
gAKICYADiA2AA4gJgASICwCIDYAEiBqABIgagASIGoAEiBqABIgagASIG4ADiBuAA4gbgAOI
HIABiB2AAYhVAIgcgAOIGYAFiP+It4ABiAmAAogPgAKICYACiA6AA4gJgAOIG4ADiBuAA4gb
gAOIG4AEiBqABIgagASIGoADiBtIGYACiByAAogcgAGIHgCIVIADiBmABogbgAKI/4i4AIgJ
gAGIEYABiAmAAYgQgAKICYABiB2AAogcgAKIHIADiBuAA4gbgAOIG4ADiBuAA4gbgAKIHIAC
iByAAogdAIg2gAKIGYAGiBqABIj/iOEAiBQAiAiAAYgSgAGICIABiB2AAogcgAKIHIACiByA
AogcgAOIG0hwgAKIHIABiB2AAYgdgAGIHYABiB0AiBiAAYgagAWIGoAFiP+I/4gXAIgdgAGI
BwCIE4ACiAcAiB6AAYgdgAGIHYABiB2AAYgdgAGIHYABiB2AAYgdgAGIHQCIGIABiAKAAYgW
gAeIF4AFiP+I/4hYAIgcgAKIBgCIFYABiAYAiB6AAYgdgAGIHYABiB2AAYgdgAGIHYABiBgA
iAMAiBiABogWgAeIGYADiP+I/4gwQ45DkEOTQ5ZDmUOdQ6JDpkOtQ7JDuEO+Q8RDykPRQ9dD
30PlQ+xD8kP4Q/6DA4gFQ5BDkkOUQ5dDmkOeQ6JDpkOsQ7FDt0O8Q8JDyEPOQ9VD3EPiQ+hD
7kP0Q/qDBIgEQ5JDk0OVQ5hDm0OeQ6JDpkOsQ7FDtkO7Q8FDx0PMQ9JD2kPfQ+VD60PwQ/ZD
+4MEiANDlEOVQ5dDmUOcQ59Do0OnQ6xDsEO1Q7pDwEPFQ8tD0EPXQ91D4kPoQ+1D8kP3Q/uD
BYgBQ5dDmEOZQ5tDnkOgQ6RDp0OsQ7BDtUO6Q79DxEPJQ89D1UPaQ+BD5UPqQ+5D80P3Q/yD
BQhDmkObQ5xDnUOgQ6JDpUOoQ61DsUO1Q7pDvkPDQ8hDzUPTQ9hD3UPiQ+dD60PwQ/RD+EP8
gwVDncOeAUOgQ6JDpEOnQ6pDrkOxQ7VDukO+Q8NDx0PMQ9JD10PbQ+BD5EPoQ+1D8EP1Q/hD
+0P+gwNDoMOhAUOjQ6RDpkOoQ6tDr0OyQ7ZDukO+Q8NDx0PLQ9FD1UPaQ95D4kPmQ+pD7UPx
Q/RD90P6Q/2DAsOkAUOlQ6ZDp0OpQ6tDrUOxQ7RDt0O7Q79Dw0PHQ8tD0EPUQ9hD3EPgQ+RD
6EPrQ+9D8UP0Q/dD+UP8Q/4Dw6gCQ6lDqkOrQ61Dr0OyQ7VDuUO8Q8BDw0PHQ8tD0EPUQ9hD
20PfQ+JD5kPpQ+xD70PxQ/RD9kP4Q/pD/cOsA0OtQ65DsEOyQ7VDt0O6Q71DwUPEQ8hDzEPQ
Q9RD10PbQ95D4UPkQ+dD6kPtQ+9D8UPzQ/VD90P5w7AEQ7FDs0O1Q7dDukO8Q79DwkPGQ8lD
zEPRQ9RD10PbQ95D4UPjQ+ZD6UPrQ+1D70PxQ/JD9EP2Q7VDtMOzAUO0Q7VDtkO4Q7pDvEO/
Q8FDxEPHQ8tDzkPSQ9VD2EPbQ95D4UPjQ+VD6EPqQ+xD7UPvQ/BD8kP0Q7lDuMO3AcO4AUO5
Q7tDvUO/Q8FDxEPHQ8lDzEPPQ9ND1kPZQ9xD3kPhQ+ND5UPoQ+lD60PsQ+1D70PwQ/JDvUO8
w7sCQ7xDvUO+Q8BDwkPEQ8dDyUPMQ89D0UPVQ9hD2kPdQ99D4kPkQ+ZD6EPpQ+pD7EPtQ+5D
70PxQ8FDwMO/A0PAQ8JDw0PFQ8dDykPMQ89D0UPUQ9dD2kPcQ99D4UPjQ+VD50PoQ+pD60Ps
Q+1D7kPvQ/BDxUPEw8MDQ8RDxUPHQ8lDy0PNQ89D0kPUQ9dD2kPcQ99D4UPjQ+VD50PoQ+pD
68PsAUPtQ+5D70PwQ8nDxwHDxgFDx0PIQ8lDykPMQ85D0EPSQ9VD10PaQ91D30PhQ+ND5UPn
Q+lD6kPrQ+xD7cPuAcPvAUPwQ8xDy8PKA0PLQ8xDzkPQQ9JD1EPWQ9hD20PdQ+BD4kPkQ+ZD
6EPqQ+tD7cPuAcPvAcPwAcPxAUPPw84Bw80BQ85Dz0PQQ9JD00PVQ9dD2kPcQ95D4UPjQ+ZD
6EPqQ+tD7UPuQ+9D8MPxAcPyAsPzAUPSw9EEQ9JD1EPVQ9dD2UPbQ95D4EPiQ+VD50PpQ+xD
7UPvQ/FD8kPzw/QCw/UEQ9XD1AND1UPWQ9dD2UPbQ91D30PhQ+RD5kPpQ+tD7kPwQ/FD80P0
w/YBQ/fD+AZD18PWAkPXQ9hD2UPaQ91D30PhQ+ND5UPoQ+pD7UPwQ/JD9EP2Q/dD+UP6w/sI
Q9nD2AFD2UPaQ9tD3EPeQ+BD4kPlQ+dD6kPsQ+9D8UP0Q/ZD+EP6Q/xD/UP+gwjD2gJD20Pc
Q91D30PhQ+ND5kPoQ+tD7kPwQ/ND9kP5Q/tD/YMMQ9vD3AFD3UPeQ+BD4kPkQ+dD6UPsQ+9D
8kP0Q/dD+kP9gw5D3MPdAUPeQ+BD4kPkQ+ZD6kPsQ+9D8kP2Q/lD/IMQQ9xD3UPeQ+BD4kPk
Q+ZD6UPsQ/BD80P2Q/pD/YMRQ9xD3UPfQ+FD40PlQ+hD60PvQ/ND9kP6Q/2DB4gKQ9xD3UPf
Q+FD5EPnQ+pD7UPyQ/VD+UP9gwWIDUPcQ91D30PiQ+VD6EPsQ+9D9EP4Q/yDBYgOQ9tD3UPf
Q+JD5kPpQ+1D8UP2Q/uDBIgQgRRDBEMKQw9DFkMaQx9DI0MoQyxDMUM1gRRDAEMGQwtDEUMV
QxpDHkMiQyZDKkMugRVDAUMGQwxDEEMUQxhDHEMgQyRDKIEWQwJDB0MLQw9DE0MWQxpDHkMi
gRdDAkMGQwpDDkMRQxRDGEMbgRhDAkMFQwlDDEMPQxJDFYEZQwFDBEMHQwpDDUMQgRpDAEMC
QwVDCEMLgRxDAEMDQwaBHkMBgf+BtcMABoEVQwBDAkMDwwQFwwMBwwIBgQ9DAEMBQwNDBUMG
QwdDCMMJA8MIAcMHAoEOQwFDBEMGQwhDCkMLQwxDDcMOAsMNAcMMAcMLAYEMQwBDAkMFQwhD
C0MNQw9DEEMRQxLDEwLDEgHDEQHDEAGBC0MAQwNDBkMJQw1DD0MSQxRDFUMWQxfDGANDF8MW
AcMVAYEKQwBDBEMHQwtDDkMRQxRDFkMZQxpDHMMdBMMcAUMbwxoBgQlDAEMDQwdDC0MPQxJD
FkMZQxtDHkMfQyHDIgHDIwHDIgFDIcMgAUMfgQlDAkMHQwtDD0MTQxZDGkMdQyBDI0MkQyZD
J8MoA0MnwyYBwyUBgf+B/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/wAAAAAAAAAAAAAAAYgFgASIGoAEiBqABYgZgAWIGYAGiBiAB4j/iP+IVgCI
H4ABiB2AAogcgAOIG4AEiBqABYgZgAaIGIAGiBmAAogcgAKIHIACiByAAogcgAOIG4ADiBqA
Boj/iP+IWACIHoACiB2AAogcgAOIG4AEiBqABYgZgAWIGgCIHgCIHgCIHgCIHgCIHoABiB2A
Aoj/iP+IewCIHoACiByAA4gbgASIGoAEiBqABYj7AIj/iP+IfQCIHoABiB2AAogcgAOIG4AE
iP+I/4j/iHoAiB6AAYgdgAKIHIADiBuABIj/iP+I/4iaAIgegAGIHYACiByAA4j/iP+I/4ib
AIgegAGIHYACiByAA4j/iP+I/4i7AIgegAGIHYACiP+I/4j/iLsAiB8AiB8AiP+I/4j/iP+I
FUPaQ9xD30PjQ+ZD6kPvQ/ND+UP+gwOIEUPZQ9xD30PjQ+dD60PwQ/VD+4MEiBFD2EPcQ99D
40PoQ+1D8kP3Q/2DA4gSQ9hD3EPgQ+RD6UPuQ/RD+YMDiBND2EPcQ+FD5UPrQ/BD9kP8gwKI
FEPZQ91D4kPnQ+1D80P5gwOIFEPaQ99D5EPpQ+9D9kP8gwKICwCICEPcQ+FD5kPsQ/ND+YMC
iBZD3kPkQ+pD8EP3Q/2DAogWQ+FD50PtQ/RD+4MCiBdD5UPrQ/JD+YMCiBhD6kPwQ/dD/oMB
iBlD70P2Q/2DAogZQ/VD+4MCiBpD+4MCiBuDAogcgwGIHQOI/4jegQhDAUMFQwpDDkMTQxdD
G0MfQyJDJUMoQypDK0MsQy3DLgHDLQFDLMMrAUMqgQhDA0MIQw1DEkMWQxtDH0MkQydDKkMt
Qy9DMEMywzMDQzLDMQHDMAGBB0MBQwZDC0MQQxZDGkMfQyNDKEMsQy9DMkM0QzZDN0M4wzkB
wzgBQzfDNgFDNYEHQwRDCUMPQxRDGUMfQyRDKEMtQzFDNEM3QzpDPEM9wz4EQz3DPAFDO4EG
QwBDB0MNQxJDGEMeQyNDKEMtQzJDNkM6Qz1DP0NBQ0NDRMNFAcNEAUNDw0IBQ0GBBkMDQwpD
EUMXQx1DI0MoQy5DM0M4QzxDQENDQ0ZDSENJQ0rDSwLDSgFDScNIAYEFQwBDB0MOQxVDG0Mi
QyhDLkMzQzlDPkNDQ0ZDSkNMQ05DUENRw1ICQ1HDUAHDTwGBBUMEQwtDE0MaQyFDJ0MtQzRD
OUM/Q0VDSUNNQ1FDU0NWQ1dDWMNZAsNYAUNXw1YBgQRDAkMJQxBDGEMfQyZDLUM0QzpDQENG
Q0xDUENUQ1hDW0NdQ19DYMNhAcNgAcNfAUNeQ12BA0MAQwdDDkMVQx5DJUMsQzNDOkNBQ0dD
TUNTQ1hDXENfQ2JDZUNmw2gBQ2nDaAFDZ8NmAUNlgQNDBUMMQxNDG0MkQytDM0M6Q0FDSENO
Q1RDWkNfQ2RDZ0NqQ21DbsNwAUNxw3ABQ2/DbgFDbYECQwNDC0MSQxpDIUMrQzJDOkNBQ0hD
T0NWQ1xDYkNnQ2tDb0NyQ3VDd0N4w3kCQ3jDdwHDdgGBAUMCQwlDEUMYQyBDKEMxQzlDQUNJ
Q1BDV0NdQ2RDakNvQ3RDd0N6Q31Df0OAw4ECw4ABQ3/DfgEBQwFDCEMQQxdDH0MnQy9DOUNB
Q0lDUENYQ19DZUNsQ3JDd0N8Q4BDg0OFQ4dDiMOJA0OIw4cBQ4ZDAUMIQw9DFkMeQyZDLkM2
Q0BDSENQQ1hDYENnQ21DdEN6Q39DhEOIQ4tDjUOPw5EEQ5DDjwFDjkMIQw5DFkMdQyVDLUM2
Qz5DSENQQ1hDYENnQ29DdUN8Q4JDh0OMQ5BDk0OVQ5dDmMOZA0OYw5cBQ5ZDD0MWQx1DJUMt
QzVDPUNGQ1BDWENgQ2hDb0N2Q31Dg0OKQ49DlEOXQ5tDnUOfQ6DDoQLDoAFDn8OeAUMWQx1D
JUMsQzRDPUNFQ01DV0NgQ2hDb0N3Q35DhUOLQ5JDl0ObQ59DokOkQ6ZDp8OoA0Onw6YBQ6VD
HUMlQyxDNEM8Q0RDTUNVQ19DZ0NvQ3dDfkOFQ4xDkkOZQ55DokOmQ6lDq0OtQ67DrwLDrgFD
rcOsAUMlQyxDNEM8Q0RDTENUQ11DZ0NvQ3dDfkOGQ41Dk0OZQ6BDpEOpQ6xDr0OyQ7PDtQRD
tMOzAUOyQy1DNEM8Q0NDS0NUQ1xDZENuQ3ZDfkOFQ4xDk0OaQ6BDpkOrQ69DskO1Q7hDuUO6
w7sCw7oBQ7nDuAFDNUM8Q0NDS0NTQ1tDY0NrQ3VDfUOEQ4xDk0OZQ6BDpUOsQ7BDtEO4Q7pD
vUO+Q7/DwALDvwFDvsO9AUM8Q0NDS0NSQ1pDYkNqQ3JDe0ODQ4pDkkOYQ59DpUOrQ7FDtUO5
Q7xDv0PBQ8PDxAPDwwFDwsPBAUNEQ0tDUkNZQ2FDaUNwQ3hDgUOJQ5BDl0OeQ6RDqkOvQ7VD
uUO9Q8BDw0PFQ8ZDx8PIAcPHAcPGAUPFQ8RDS0NSQ1lDYENoQ29Dd0N+Q4dDjkOVQ5xDokOo
Q65Ds0O5Q71DwEPDQ8ZDyEPJw8oEQ8lDyMPHAUNSQ1lDX0NmQ25DdUN8Q4NDjEOTQ5pDoEOm
Q6xDsUO2Q7xDv0PDQ8ZDyEPKQ8vDzAPDywFDysPJAUNYQ19DZkNsQ3NDekOBQ4hDkEOXQ51D
pEOpQ69DtEO5Q75DwUPEQ8dDyUPLQ8zDzQNDzMPLAUPKQ8lDX0NlQ2tDckN4Q39DhkOMQ5RD
mkOgQ6ZDrEOxQ7ZDukO/Q8JDxUPIQ8pDy0PMw80DQ8zDywFDykPJQ2RDakNwQ3dDfUODQ4pD
kEOXQ51Do0OoQ61DskO3Q7tDv0PCQ8VDx0PJQ8vDzATDywFDysPJAUNpQ29DdUN7Q4FDh0ON
Q5NDmUOfQ6RDqkOuQ7NDt0O7Q79DwkPEQ8ZDyEPJQ8rDywLDygFDyUPIw8cBQ25Dc0N5Q35D
hEOKQ49DlUObQ6BDpUOqQ69Ds0O3Q7pDvkPAQ8NDxUPGQ8fDyARDx8PGAUPFQ8RDckN3Q3xD
gUOGQ4xDkUOWQ5xDoUOlQ6pDrkOyQ7VDuEO8Q75DwEPCQ8NDxMPFA8PEAUPDw8IBQ8GB/4H/
gf+B/4H/gf+B/4H/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/AAAAAAAA
AAAAAAABiAWAB4gYgAeIGIAHiBiAB4gZgAaIGYAHiBiABogagAGI/4j/iDqAAYgXgAeIF4AH
iBeABogYgAWIGYAEiBqAA4gbgAeIGIAHiBiAB4gYgAeIGYAGiBmAB4gYgAaIGoABiP+I/4g7
gAGIGoAEiBeABogYgAWIGYAEiBqAA4gbgAKIHIAGiBiAB4gYgAeIGIAHiBmABogZgAeIGIAF
iBuAAYj/iP+IPACIHIACiBiABYgZgASIGoADSCiIGoADiBuAAogcgAWIGYAGiBiAB4gYgAeI
GIAHiBmABogZgASI/4j/iFwAiByAAYgbgAOIGYAEiBqAA4gbgAKIHQCIHIAFiBmABogZgAWI
GoAGiBmABogZgAaIGYADSKqI/4j/iD0AiB2AAYgbgAKIGoADiBuAAogcgAGIHYABiDqABIgb
gASIG4AEiBuABIgagAaIGoAEiP+I/4g9gAGIHIACiByAAogagAOIGoADiBuAAogcgAGIHQCI
OoAEiBuABIgbgASIG4AEiByAA4gcgAKI/4j/AIgeAIgdgAGIHIACiBuAA4gagASIGoADiBuA
AogcgAGIHQCIOoACiB2AAogdgAKIHoACiB5ISoj/iP8IAIgegAGIHIACiBuAA4gbgAOIGoAE
iBqABIgagASIGoADiBuAAogcAIg6gAGIHkh9AIgfAIj/iP+IAwCIHYABiB2AAYgcgAKIHIAC
iBuABIgagASIGoAEiBqABIgagASIGoAEiBqAA4gbgAGIHQCI/4j/iIEAiB6AAYgcgAKIG4AD
iBqABIgbgAOIG4ADiBuAA4gbgAOIGoAEiBqAA4gbgAOIG4ACiP+I/4igAIgdgAGIHIADiBqA
BIgagASIGoAEiAqDBYgJgASICoMLiAOAA4gLgx9D9kP4Q/pD/EP+gxpD7kPwQ/JD9EP2Q/hD
+kP8gxdD5UPoQ+pD7EPvQ/FD80P2Q/hD+0P9gxRDdUN6Q39Dg0OIQ41DkkOXQ5xDoUOlQ6lD
rUOwQ7NDtkO5Q7tDvUO+w8ABw8EDw8ABQ7/DvgFDvUN3Q3xDgEOFQ4lDjkOSQ5dDnEOgQ6RD
p0OrQ65DsUOzQ7ZDuEO5Q7pDu8O8BMO7AUO6w7kBQ7hDeUN9Q4JDhkOKQ45DkkOWQ5tDnkOi
Q6VDqEOrQ61Dr0OyQ7NDtcO2AcO3BEO2w7UBQ7TDswFDekN+Q4JDhkOKQ41DkUOVQ5lDnEOf
Q6JDpUOnQ6lDq0OtQ67DsAHDsQFDssOxAkOww68BQ67DrQFDe0N+Q4JDhUOJQ4xDj0OTQ5ZD
mUOcQ55DoUOjQ6VDpkOoQ6lDqsOrBcOqAUOpw6gBQ6dDpkN7Q35DgUOEQ4dDikONQ5BDk0OW
Q5hDmkOcQ55DoEOhQ6JDo8OkAcOlA8OkAUOjw6IBQ6HDoAFDekN9Q4BDgkOFQ4hDikONQ5BD
kkOUQ5ZDl0OZQ5pDm0OcQ53DngVDncOcAUObw5oBw5kBQ3hDe0N9Q4BDgkOFQ4dDiUOMQ45D
j0ORQ5JDk0OUQ5VDlsOXBcOWAcOVAUOUQ5PDkgFDkUN2Q3hDe0N9Q39DgUODQ4VDh0OJQ4pD
i0ONw44BQ4/DkAXDjwHDjgFDjcOMAUOLw4oBQ3NDdUN3Q3lDe0N9Q39DgUOCQ4RDhUOGw4cB
Q4jDiQXDiAJDh8OGAUOFw4QBQ4NDgkNwQ3JDdEN1Q3dDeUN6Q3xDfUN+Q39DgMOBAcOCBsOB
AUOAw38BQ37DfQFDfMN7AUNsQ25Db0NxQ3NDdEN1Q3ZDeMN5AUN6w3sHw3oBw3kBQ3jDdwFD
dsN1AcN0AUNoQ2lDa0NsQ25Db0NwQ3FDcsNzAcN0AcN1A8N0AsNzAcNyAUNxQ3DDbwFDbsNt
AUNsQ2NDZUNmQ2dDaENqw2sBQ2zDbQHDbgbDbQHDbAFDa8NqAUNpw2gBQ2fDZgFDZUNeQ19D
YUNiQ2NDZENlw2YBw2cBw2gEw2cCw2YBQ2XDZAFDY0Niw2EBQ2DDXwFDXkNZQ1pDW0NcQ11D
XkNfQ2DDYQLDYgLDYQLDYAJDX8NeAUNdQ1zDWwFDWsNZAcNYAUNTQ1RDVkNXQ1jDWQFDWsNb
CMNaAcNZAUNYw1cBQ1ZDVcNUAUNTw1IBQ1FDTkNPQ1BDUUNSw1MBQ1TDVQfDVAHDUwHDUgFD
UUNQw08BQ07DTQFDTMNLAUNIQ0lDSkNLQ0xDTcNOAcNPB8NOAcNNAUNMw0sBQ0rDSQFDSENH
w0YBw0UBQ0JDQ0NEQ0VDRkNHw0gBw0kHw0gBw0cBQ0bDRQFDRENDw0IBQ0HDQAHDPwFDPEM9
Qz5DP0NAQ0HDQgHDQwfDQgHDQQFDQMM/AUM+Qz3DPAFDO8M6AcM5AUM2QzdDOEM5QzpDO8M8
AcM9B8M8AcM7AUM6wzkBQzhDN8M2AUM1wzQBwzMBQzBDMUMyQzNDNMM1AUM2wzcHwzYBwzUB
wzQBQzNDMsMxAUMwwy8Bwy4BQy1DKUMqQyxDLcMuAUMvwzABwzEHwzABwy8Bwy4BQy1DLMMr
AcMqAUMpwygBQyJDJEMlQyZDJ0MowykBQyrDKwPDLAHDKwLDKgJDKcMoAcMnAUMmwyUBwyQB
QyNDG0McQx5DH0MgQyFDIkMjQyTDJQLDJgXDJQLDJAHDIwFDIsMhAcMgAcMfAUMUQxVDFkMY
QxlDGkMbQxzDHgFDH8MgAsMhBcMgAsMfAUMewx0BwxwCQxtDDEMNQw9DEEMSQxNDFUMWQxdD
GEMZQxrDGwHDHAjDGwHDGgLDGQHDGAFDBEMFQwdDCUMLQwxDDkMPQxFDEkMTQxRDFUMWwxcB
wxgIwxcCwxYDgQFDAEMBQwNDBUMHQwlDC0MMQw5DD0MQQxFDEkMTwxQBwxUIwxQEgQVDAEMC
QwRDBkMIQwpDC0MMQw5DD0MQwxEBwxIBwxMGwxIDgQhDAEMCQwRDBkMIQwlDC0MMww4BQw9D
EMMRCoH/gf+B/4H/gf+B/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP8AAAAAAAAAAAAAAAGIBYACiB0AiP+I/4gPgAGIBACIF4ABiAQAiBaAAogDgAGIFYADiAOA
AYgUgASIA4ABiBKABogDgAGID4AIiASAGYgGgBeIB4AWiAiAFYgJgBSICoATiAyAEIgPgA2I
F0gsAIj/iPUAiBiAAgiAAogYgAaIF4AHiBeAB4gWgAiIFYAJiBSACogTgAuIEIBHiAKAGogF
gBiIBoABCIAUiAqAEogMgBCI/4jNAIgdgAGIGYAFiBmABYgYgAaIGIAGiBiABogXgAeIF4AH
iBaACIgVgAmIFIAKiBKASEhXiAKAGYgFgBeIB4AViAmAE4j/iKoAiByAAogagASIGoAEiBmA
BYgZgAWIGYAFiBmABYgYgAaIGIAGiBiABogYgAaIGYAFiByAAogfgARI+YgFgAWIDYAViAmA
FogIgBaICIAXiP+IxYABiByAAogagASIGoAEiBqABIgZgAWIGYAFiBmABYgagASIGoAEiBuA
A4h/gAFIfogcgBJIgIgLgBSICoAViP+IyACIHYABiBuAA4gagASIGoAEiBqABIgagASIG4AD
iByAAogeAIi/AEiziB2AEYgNgBOI/4jKAIgdgAGIHIACiByAAogbgAOIG4ADiBuAA4gcgAKI
/4gfgAKIHIADiAeABIj/iM0AiB4AiB2AAYgdgAGIHIACiByAAYj/iICAAYj/iLwAiB4AiB4A
iB4AiB0AiP+I7wCI/4hOAIgeAIgeAIgeAIgeAIj/iP+IH0PdQ99D4kPkQ+dD6kPtQ+9D8kP1
Q/dD+kP8Q/6DEUPUQ9dD2kPdQ+BD40PmQ+lD7EPvQ/JD9UP4Q/pD/YMQQ8tDz0PSQ9VD2EPc
Q99D40PnQ+pD7UPxQ/RD90P6Q/yDD0PDQ8ZDykPOQ9FD1UPZQ91D4UPlQ+lD7EPwQ/ND90P6
Q/2DDkO7Q79DwkPGQ8pDzkPTQ9dD3EPgQ+RD6EPsQ/BD9EP4Q/yDDkOzQ7dDu0O/Q8RDyEPN
Q9FD10PcQ+BD5UPpQ+5D8kP2Q/pD/oMLiAFDrEOwQ7RDuEO9Q8JDx0PMQ9JD10PcQ+FD5kPr
Q/BD9EP5Q/2DCYgDQ6RDqUOtQ7JDt0O8Q8JDx0POQ9ND2UPeQ+ND6UPuQ/ND+EP8gweIBUOe
Q6JDp0OsQ7FDt0O9Q8JDyUPPQ9VD20PhQ+dD7EPxQ/dD/IMGiAZDl0OcQ6FDpkOsQ7JDuEO+
Q8ZDzEPSQ9lD30PlQ+tD8EP3Q/yDBYgFAAhDkkOWQ5xDoUOnQ61DtEO6Q8JDyUPPQ9ZD3UPj
Q+pD8EP3Q/yDBIgGgAFDjEORQ5dDnUOjQ6lDsEO2Q79DxkPNQ9RD20PiQ+lD70P3Q/yDBIgG
gAFDiEONQ5JDmEOfQ6VDrEOzQ7xDw0PLQ9JD2UPhQ+hD70P3Q/2DA4gHgAFDhEOJQ45DlEOb
Q6JDqUOwQ7lDwUPJQ9BD2EPgQ+dD7kP3Q/2DA4gHgAFDgEOFQ4tDkUOYQ59DpkOtQ7dDv0PH
Q89D10PfQ+dD7kP3Q/6DAogKQ31DgkOIQ45DlUOcQ6NDq0O1Q71DxUPNQ9ZD3kPmQ+5D90P+
gwKICkN7Q4BDhkOMQ5NDmkOhQ6lDs0O7Q8RDzEPVQ91D5kPuQ/eDA4gKQ3lDfkOEQ4pDkUOY
Q59Dp0OxQ7pDwkPLQ9RD3UPlQ+1D94MDiApDeEN9Q4JDiEOPQ5ZDnkOmQ7BDuEPBQ8pD00Pc
Q+VD7UP3gwOICkN3Q3xDgUOHQ45DlUOdQ6VDr0O3Q8BDyUPSQ9tD5EPtQ/eDAogLQ3ZDe0OB
Q4ZDjUOUQ5xDpEOuQ7ZDv0PIQ9FD2kPjQ+xD94MCiAtDd0N7Q4BDhkOMQ5NDm0OjQ61DtUO+
Q8dD0EPaQ+ND7EP2gwKIC0N3Q3tDgEOGQ4xDk0OaQ6JDrEO0Q71DxkPPQ9lD4kPrQ/VD/oMB
iAtDeEN8Q4FDhkOMQ5NDmkOhQ6tDs0O8Q8VDzkPXQ+FD6kP0Q/2DAogKQ3lDfUOBQ4ZDjEOS
Q5lDoUOqQ7NDu0PEQ81D1kPfQ+hD80P8gwKICkN7Q35DgkOHQ4xDkkOZQ6BDqUOyQ7pDw0PM
Q9VD3kPnQ/FD+oMCiApDfEN/Q4NDh0ONQ5JDmUOgQ6lDsUO5Q8FDykPTQ9xD5UPvQ/iDAogK
Q35DgUOEQ4hDjUOSQ5hDn0OoQ69Dt0PAQ8hD0UPaQ+ND7UP2Q/6DAogJQ4BDgkOFQ4lDjUOS
Q5hDnkOnQ65DtkO+Q8ZDz0PYQ+BD60PzQ/uDAogJQ4JDhEOGQ4pDjkOSQ5hDnkOmQ61DtEO8
Q8RDzUPVQ95D6EPwQ/iDAogJQ4RDhUOHQ4pDjkOSQ5dDnUOkQ6tDskO6Q8JDykPSQ9tD5EPt
Q/VD/IMCiAhDhUOGQ4hDi0OOQ5JDl0OcQ6NDqUOwQ7hDv0PHQ89D10PhQ+lD8UP4gwOIB4EK
QwBDAkMEQwZDB0MJQwtDDEMNQw7DDwHDEALDEQWBDEMAQwJDBEMHQwhDCkMLQwzDDgFDD8MQ
AsMRA0MSgQ5DAUMEQwZDCEMKQwtDDUMOQw/DEAHDEQLDEgFDE4EPQwJDBUMHQwlDC0MMQw5D
D0MQwxEBwxIBwxMBQxSBD0MAQwNDBkMIQwpDDEMOQw9DEcMSAUMTwxQBQxVDFoEQQwJDBUMI
QwpDDEMOQxBDEkMTQxRDFcMWAUMXQxiBEEMBQwVDCEMLQw1DD0MRQxNDFUMWQxdDGEMZQxpD
G4EQQwFDBUMIQwtDDkMQQxNDFUMXQxhDGUMaQxxDHUMegRBDAUMFQwhDDEMPQxJDFEMXQxlD
GkMcQx1DH0MgQyKBEEMAQwVDCUMNQxBDFEMWQxlDG0MdQx9DIEMiQyRDJYEQQwFDBkMKQw5D
EkMVQxhDHEMeQyBDIkMkQyVDJ0MpgRBDAUMGQwtDEEMUQxdDG0MeQyFDI0MlQydDKUMrQy2B
EEMBQwdDDEMRQxVDGUMdQyFDI0MmQyhDKkMtQy9DMYEQQwJDCEMNQxJDF0MbQx9DI0MmQylD
K0MuQzBDM0M1gRBDAkMJQw5DFEMZQx1DIUMmQylDLEMvQzFDNEM2QzmBEEMDQwlDD0MVQxpD
H0MkQyhDLEMvQzJDNEM3QzpDPYEQQwNDCkMQQxZDHEMhQyZDKkMuQzFDNEM3QzpDPUNAgRBD
BEMLQxFDGEMdQyNDJ0MsQzBDNEM3QzpDPUNAQ0SBEEMEQwtDEkMYQx5DJEMpQy5DMkM2QzlD
PUNAQ0NDR4EQQwRDDEMTQxlDH0MlQypDMEM0QzhDO0M/Q0JDRkNJgRBDBEMMQxNDGkMgQyZD
K0MxQzVDOUM9Q0FDRENIQ0yBEEMEQwtDE0MaQyBDJkMsQzJDNkM6Qz5DQkNGQ0pDTYEQQwND
C0MSQxpDIEMmQyxDMkM3QztDP0NDQ0dDS0NPgRBDAkMKQxJDGUMgQyZDLEMyQzdDO0M/Q0ND
R0NLQ0+BEEMBQwlDEUMYQx9DJUMrQzFDNkM7Qz9DQ0NHQ0tDT4EQQwBDCEMPQxdDHUMkQypD
MEM1QzpDPkNCQ0dDS0NPgRFDBkMNQxVDHEMiQyhDL0M0QzhDPUNBQ0ZDSkNOgRFDBEMLQxJD
GUMgQyZDLEMyQzZDO0M/Q0RDSENMgRFDAUMJQxBDF0MdQyNDKkMvQzRDOEM9Q0FDRkNKgRJD
BUMNQxNDGkMgQydDLEMxQzVDOkM/Q0NDR4ESQwJDCUMQQxZDHEMjQyhDLUMyQzdDO0NAQ0SB
E0MFQwxDEkMYQx9DJEMpQy5DM0M3QzxDQIH/gf+B/4H/gf+B/4H/gf+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAAAAAAAAAAAAGI/4j/iGgAiB2AAogbgAOIGoAE
iBmABYgYgAaIGIAGiBeAB4gXgAaIGIAFiBqABIgagAOIG4ACiBiADoj/iP+IeIABiByAAogb
gAOIGoAEiBmABYgZgAWIGIAGiBeAB4gXgAeIGIAFiBmABIgbgAKIGIAQiBKACYj/iP+IeIAB
iByAAogbgAOIG4ADiBqABIgZgAWIGIAGiBiABogYgAaIGIAFiBqABIgXgBSICoARiBWABYj/
iP+IeACIHYABiByAAogbgAOIGoAEiBqABIgZgAWIGIAGiBmABYgZgAWIF4AWiAiAFYgJgBFI
AIgYSPSI/4j/iJcAiB2AAYgdgAGIHIACiBuAA4gbgASIGYAFiBmABYgYgBWICYAWiAiAF4gL
gA6I/4j/iNAAiB4AiB2AAYgcgAKIHIADiBqABIgZgBOIC4AViAmAFogIgBeIDoALiP+I/4jv
AIgeAIgdgAKIHIACiBqAAogKgAKIDoATiAuAFYgJgBaIC4AUiBGACYj/iP+I/4gOAIgdgAGI
GwCIHoABiAyAAogNgAOIA4AMiAqAFogIgBeIDoARiBKABogEgAGI/4j/iP+IZQCIDYADiAyA
AYgGgAyICYAWiAyAFIgPgBCIE4ACiASABIgegAGIH4ABiB8AiB8AiP+I/4h/Q4dDiEOJQ4tD
jkOSQ5ZDm0OiQ6hDrkO1Q7xDxEPMQ9RD3UPlQ+1D9EP7gwKIB8OJAUOKQ4xDjkOSQ5VDmkOg
Q6ZDrEOyQ7lDwUPIQ9BD2UPhQ+hD70P3Q/2DAogGQ4tDikOLQ4xDjkORQ5RDmUOeQ6RDqUOw
Q7ZDvUPEQ8xD1UPcQ+ND60PyQ/iDA4gFw4wCQ41DjkORQ5RDl0OcQ6FDp0OtQ7NDukPBQ8hD
0EPXQ99D5kPtQ/ND+oMDiARDjsONAkOOQ5BDk0OWQ5pDn0OkQ6pDsEO2Q71Dw0PMQ9ND2kPh
Q+dD7kP0Q/qDA4gDQ49DjsONAUOOQ49DkkOUQ5lDnUOhQ6dDrEOyQ7lDv0PHQ85D1UPbQ+JD
6UPvQ/VD/IMDiAJDkUOPw44CQ49DkUOTQ5dDm0OfQ6RDqUOvQ7VDu0PDQ8lD0EPWQ91D40Pp
Q+9D9kP8gwQIQ5NDkUOPw44BQ49DkEOSQ5VDmUOdQ6FDpkOrQ7FDt0O/Q8VDy0PSQ9hD3kPk
Q+pD8UP2Q/uDBEOVQ5NDkcOPAkOQQ5FDlEOXQ5tDn0OjQ6hDrkO0Q7tDwUPHQ81D00PZQ99D
5UPsQ/FD9kP7gwNDmEOVQ5NDkcOQAkORQ5NDlkOZQ51DoUOmQ6tDsEO3Q71Dw0PJQ89D1UPb
Q+BD50PsQ/FD9kP7gwJDm0OYQ5VDk0OSw5EBQ5JDk0OVQ5hDnEOfQ6RDqUOuQ7RDukO/Q8VD
y0PRQ9ZD3EPiQ+dD7EPxQ/ZD+4MBQ59Dm0OYQ5VDlMOSAkOUQ5VDmEObQ55DokOnQ6tDsUO3
Q7xDwkPHQ81D0kPYQ95D40PoQ+1D8UP2Q/sDQ6NDn0ObQ5hDlkOVw5QBQ5VDlkOYQ5tDnkOh
Q6VDqkOvQ7VDukO/Q8RDykPPQ9RD2kPfQ+RD6UPtQ/JD90P7Q6hDo0OfQ5xDmUOYw5YCQ5dD
mUObQ55DoUOlQ6lDrkOzQ7hDvUPCQ8dDzEPRQ9dD3EPgQ+VD6UPuQ/JD90OtQ6hDpEOgQ51D
m8OZAUOYQ5lDmkOcQ55DoUOlQ6lDrUOyQ7dDu0PAQ8VDykPPQ9RD2UPdQ+JD5kPrQ+9D80Oz
Q65DqUOlQ6JDn0OdQ5xDm8OcAUOeQ6BDokOmQ6lDrUOyQ7ZDukO/Q8RDyEPNQ9JD10PbQ99D
40PoQ+xD8EO5Q7NDrkOqQ6dDpEOhQ6DDnwJDoEOiQ6RDp0OqQ65DskO2Q7pDv0PDQ8dDzEPR
Q9VD2UPdQ+FD5UPpQ+1Dv0O6Q7RDsEOsQ6lDpkOkw6MCQ6RDpUOnQ6lDrEOwQ7NDt0O7Q79D
w0PHQ8tD0EPUQ9hD3EPfQ+ND50PrQ8ZDwEO7Q7ZDskOvQ6xDqkOow6cBQ6hDqUOqQ6xDr0Oy
Q7VDuUO8Q8BDxEPHQ8tD0EPTQ9dD20PeQ+JD5UPpQ81Dx0PBQ71DuEO1Q7JDr0Otw6wCQ61D
rkOwQ7JDtUO4Q7tDvkPCQ8VDyUPMQ9BD1EPXQ9pD3kPhQ+RD50PUQ85DyUPEQ79Du0O4Q7ZD
s8OyAUOxQ7JDs0O0Q7ZDuUO7Q75DwUPEQ8dDykPOQ9FD1UPYQ9tD3kPhQ+RD50PbQ9VD0EPL
Q8ZDwkO/Q7xDusO4AUO3w7gBQ7lDu0O9Q79DwkPFQ8dDykPNQ9BD00PWQ9lD3EPeQ+FD5EPm
Q+ND3UPXQ9JDzkPKQ8ZDw0PBQ7/DvgNDv0PAQ8JDxEPHQ8lDy0POQ9BD00PWQ9hD20PdQ+BD
4kPkQ+dD6kPkQ99D2kPVQ9FDzkPLQ8hDx8PFA0PGQ8dDyEPKQ8xDzkPQQ9JD1EPXQ9lD20Pd
Q99D4UPjQ+VD50PyQ+xD5kPhQ91D2UPWQ9ND0EPOQ83DzALDzQFDz0PQQ9JD00PVQ9dD2UPb
Q91D30PhQ+JD5EPlQ+dD6UP5Q/ND7kPpQ+VD4UPeQ9tD2EPWQ9XD1AND1UPWQ9dD2EPaQ9tD
3UPeQ+BD4kPjQ+RD5kPnQ+hD6UPrA0P6Q/VD8UPtQ+lD5kPjQ+BD38PdAcPcAsPdAUPeQ99D
4EPiQ+ND5EPlQ+dD6EPpQ+rD6wFD7EPtgwFD/UP4Q/RD8UPuQ+tD6UPnQ+bD5QHD5AHD5QFD
5kPnQ+hD6cPqAUPrQ+xD7cPuAcPvAcPwAYMDQ/xD+UP2Q/RD8UPwQ+9D7sPtA8PuAUPvw/AB
w/EBw/IBw/MFQ/SDBUP+Q/xD+kP5Q/hD98P2A8P3AsP4AsP5BMP4A0P3CIMZw/4BQ/3D/AGI
AoMcgRNDAUMIQw5DFEMbQyBDJUMqQy5DM0M3QzyBFEMDQwlDD0MWQxtDIEMlQylDLkMzQzeB
FUMEQwpDEUMWQxtDIEMkQylDLkMygRVDAEMFQwtDEUMWQxpDH0MkQyhDLYEWQwBDBkMLQxBD
FUMaQx5DI0MngRdDAUMGQwtDD0MUQxlDHUMigRhDAEMFQwpDD0MTQxhDHYEZQwBDBUMJQw5D
E0MXgRpDAEMEQwlDDUMSgRtDAEMEQwhDDYEcQwBDBEMIgR1DAEMEgR5DAIH/gX9DAIEeQwZD
AYEdQw1DCEMEQwCBG0MTQw9DC0MHQwRDAYEZQxlDFUMRQw5DC0MJQwZDBUMDQwJDAcMABMMB
AsMCAcMDBcMCAsMBAUMeQxtDF0MVQxJDEEMOQw1DC8MKAcMJBMMKA8MLAsMKAcMJAcMIAUMH
QwZDBUMjQyBDHUMbQxlDF0MWQxXDEwHDEgTDEwbDEgFDEUMQQw9DDkMNQwxDC0MKgf+B/4H/
gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wD//wD//wD/
/wH/+YD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAA
AAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAAB
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAD/AAD/AAD/AAH5iGSABIgZgASIGoAE
iBqABIgagASIGoAEiBqABIgagASIlQCI/4hHAIgdgAGIHIACiBqABIgagASIGoAEiBqABIhc
gAKIG4ADiBuAA4gbgAOIG4ADiBuAA4gbgAOIG4ACiNYAiP+IRYABiByAAogcgAKIHIACiByA
AogcgAKIPoABiB0AiB2AAYgdgAGIHIACiByAAogcgAKIHIACiPYAiP+IRQCIHgCIHgCIHgCI
HgCIHgCIXwCIHgCIHYABiB0AiB4AiB4AiP+INwCI/4j/iCYAiB4AiB0AiB4AiB4AiB4AiP+I
NoABiP+I/4gmAIgeAIg9AIgeAIj/iDcAiB2AAYj/iP+IBwCIHQCIHgCIHgCIHQCI/4hWgAGI
HYABiP+I54ABiB2AAYgcgAGIHYABiByAAYgdgAGI/4g2AIgcgAKIHgCI/4jngAOIGoADiBuA
AogbgAOIG4ACiByAAoj/iDKAA4gdgAGI/4j/iAaACYgUgAqIFIAFiAQAiBOABIgZgAWIG4AC
iPQAiBuAA4gcgAKIHgCI/4j/Q4lDjUORQ5RDl0OZQ5xDnkOgQ6JDo0OkQ6XDpgTDpQFDpEOj
Q6JDoUOgQ59DnUOcQ5tDmsOZAUOGQ4pDjUOPQ5JDlEOXQ5lDm0OdQ55Dn0Ogw6ECQ6LDoQLD
oAHDnwFDnkOdw5wBw5sDQ4NDhkOJQ4tDjkOQQ5JDlEOWQ5hDmUOaQ5vDnAHDnQjDnAZDnUOA
Q4NDhkOIQ4pDjEOOQ5BDkkOTQ5VDlkOXw5gBw5kBw5oDw5sDw5wCQ51DnsOfAUN9Q4BDg0OF
Q4dDiUOLQ4xDjkOQQ5FDkkOTw5QBQ5XDlgFDl8OYAcOZAUOaw5sBQ5xDnUOeQ6BDoUOjQ3xD
fkOBQ4NDhEOGQ4hDiUOLQ4xDjUOOQ49DkEORQ5JDk0OUw5UBQ5ZDl0OYQ5lDmkOcQ51Dn0Og
Q6JDpEOmQ3pDfUN/Q4FDgkOEQ4VDh0OIQ4lDi0OMQ43DjgFDj0OQQ5JDk0OUQ5VDlkOXQ5lD
mkOcQ55DoEOjQ6VDp0OqQ3pDfEN+Q39DgUOCQ4RDhUOGQ4dDiEOJQ4pDi0OMQ41DjkOQQ5FD
kkOUQ5VDl0OZQ5tDnUOgQ6JDpUOoQ6tDrkN6Q3xDfUN/Q4BDgUOCQ4RDhUOGQ4dDiEOJQ4pD
i0OMQ41Dj0OQQ5JDk0OVQ5dDmkOcQ59DokOlQ6hDq0OvQ7JDekN8Q31Df0OAQ4FDgkODQ4RD
hUOGw4cBQ4lDikOLQ4xDjkOQQ5FDk0OWQ5hDm0OdQ6BDpEOnQ6tDr0OzQ7dDfEN9Q35Df0OA
Q4FDgsODAUOEQ4VDhkOHQ4hDiUOKQ4xDjkOQQ5JDlEOWQ5lDnEOfQ6JDp0OqQ65Ds0O3Q7tD
fUN+Q39DgEOBw4IBQ4NDhMOFAUOGQ4dDiEOJQ4tDjEOOQ5BDkkOVQ5dDmkOeQ6FDpUOpQ65D
skO2Q7tDwEOAw4EBQ4LDgwHDhAHDhQFDhkOHQ4hDiUOKQ4tDjUOPQ5FDk0OWQ5lDnEOgQ6ND
p0OsQ7FDtkO7Q8BDxUOCQ4PDhAHDhQHDhgLDhwFDiEOJQ4pDi0OMQ45DkEOTQ5VDmEObQ55D
okOmQ6pDsEO0Q7lDv0PEQ8rDhgHDhwLDiAPDiQFDikOLQ4xDjUOOQ5BDkkOUQ5dDmkOdQ6FD
pEOpQ61Ds0O4Q71Dw0PIQ85DicOKAsOLBcOMAUONQ45Dj0OQQ5JDlEOXQ5lDnEOgQ6NDp0Os
Q7BDtkO8Q8FDx0PNQ9PDjgrDjwFDkEORQ5NDlEOXQ5lDnEOfQ6JDpkOqQ69Ds0O6Q79DxUPL
Q9FD18OSC8OTAUOUQ5ZDl0OaQ5xDn0OiQ6VDqUOtQ7JDt0O9Q8NDyUPPQ9VD28OXBMOWA0OV
w5YCQ5dDmEOZQ5pDnUOfQ6JDpUOoQ6xDsEO1Q7pDwEPGQ8xD0kPZQ99DncOcA8ObAcOaBkOb
Q5xDnkOgQ6JDpUOoQ6tDr0O0Q7hDvUPEQ8lDz0PWQ9xD48OiAsOhAcOgAcOfAcOeBEOfQ6BD
okOkQ6ZDqEOrQ69Ds0O3Q7tDwEPHQ81D00PZQ+BD5kOow6cCQ6bDpQHDpAHDowHDogHDowFD
pEOlQ6dDqUOsQ69DskO2Q7pDv0PDQ8pD0EPWQ9xD40PpQ67DrQHDrAFDq0Oqw6kBQ6jDpwPD
qAFDqUOrQ61Dr0OyQ7VDuUO9Q8JDxkPNQ9JD2EPfQ+VD7EO0w7MBQ7LDsQFDsEOvQ65DrcOs
BEOtQ65Dr0OxQ7NDtkO5Q7xDwEPEQ8lDz0PVQ9tD4UPnQ+5DusO5AUO4Q7dDtkO1Q7RDs8Oy
AcOxAUOww7EBQ7JDs0O1Q7dDuUO8Q79Dw0PHQ8xD0kPXQ91D40PpQ/BDwMO/AUO+Q71DvEO7
Q7pDuUO4Q7fDtgHDtQJDtkO3Q7hDukO9Q79DwkPGQ8pDzkPUQ9lD30PlQ+tD8kPGw8UBQ8RD
w0PCQ8FDwEO/Q71DvEO7w7oEQ7tDvEO+Q8BDwkPFQ8lDzUPRQ9ZD20PhQ+dD7UPzw8wBQ8tD
ykPJQ8hDx0PFQ8RDw0PBQ8DDvwHDvgJDv0PAQ8FDw0PGQ8hDy0PPQ9ND2EPdQ+JD6EPuQ/TD
0gFD0UPQQ89DzkPMQ8tDykPIQ8dDxsPEAcPDA0PEQ8VDx0PJQ8tDzkPRQ9VD2kPfQ+RD6UPv
Q/VD2UPYQ9dD1kPVQ9RD0kPRQ89DzkPMQ8tDycPIAcPHAkPIQ8lDykPMQ85D0UPUQ9dD3EPh
Q+ZD60PwQ/ZD30PeQ91D3EPbQ9pD2EPXQ9VD00PRQ9BDz0PNw8wBw8sCQ8xDzUPPQ9FD00PW
Q9pD3kPiQ+dD7EPxQ/dD5cPkAUPiQ+FD4EPeQ91D20PZQ9dD1UPUQ9JD0UPQw88CQ9BD0UPS
Q9RD1kPZQ9xD4EPkQ+hD7UPyQ/iB/4H/gf+B/4H/gf+B/4H/gf+B/4H/gf+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAAAAAAAAAAAAGIA4AEiBqABIgagASIGoAE
iBqABIgVAIgDgASIE4ACiAOABIgSgAOIA4AEiBCABYgDgASIEIAFiAOABIgRgASIA4AEiBOA
AogCgAWIFQCIAoAEiBqABIgZgASIGIAGiBqAA4gcgAGICwCIHoABiB2AA4gagAWIGYAFiBmA
BYgagASIG4ACiB2AAYhtgAGIHYACiB2AAYgegAKIHIACiByAAogcgAKIHIACiByAAogWAIgE
gAKIFIACiASAAogSgASIBIACiBGABYgEgAKIEYAFiASAAogSgASIBIACiBSAAogDgAKIFwCI
A4ACiBuAAogbgAOIGYAEiBqAA4gbgAOIDIABiB2AA4gbgASIGYAGiBiABYgJAIgPgASICQCI
EIACiAsAiBCAAYhNAIgfAIgegAGIHYABiB8AiB4AiB4AiB4AiB4AiB4AiB4AiBcAiAUAiBWA
AogFAIgTgASIBQCIEoAFiAUAiBKABYgFAIgTgASIBQCIFYACiAQAiBgAiAQAiB0AiByAAoga
gAOIG4ADiAyAAYgMgAKIDYADiAqAAYgOgASICQCIDoAGiAgAiA2ABogJAIgPgASICYABiA+A
AogLAIgQgAGIDACIYACIPwCI/4gYAIgbgAOIGYAFiBiABogZgAWIGoAEiBuAA4gdgAGIQYAB
iBuAA4gNAIgMgAKIDYADiAqAAogMgAaICIACiAyABogIgAKIC4AGiAmAAYgNgAWICYABiA+A
AogLgAGIDwCIDQCIoQCI/4g4AIgbgAOIGIAGiBiABogZgAWIGoAEiBuAA4gdgAGIP4ADiA0A
iAyAA4gMgAOICoADiAuABogIgAOICoAIiAeAA4gJgAeICYADiAqABogJgAKIDoACiAuAAYgP
AIgNAIj/iPsAiBqABIgXgAeIGIAGiBiABogZgAWIGoAEiBuAA4g/gAOIC0hygASICYAEiAmA
CIgHgASICIAJiAeABogEgAqICIAFiAeAB4gJgAOIDIADiAuAAYgPSMGIDQCI/4j/iDaAA4gZ
gAeIF4AHiBiABogYgAaIGYAFiBqABIgegAWICoAGiAiABYgHgAqIBoAHiAOADIgGgBaICIAU
iAqABIgKgAOIDIABiB4AiP+I/4h1gAOIGoAHiBeAB4gXgAeIF4AHiBeACIgMgC1IzIgCgBmI
BYAWiAiAFIgKgAWICIAEiAuAA4gdAIj/iP+IlYACiBqAB4gXgAiIFoAIiBWACYgMgBaICIAx
CIAXiAeAFIgKgBKIDIADiByAAYj/iP+Is4ADiBqACIgWgAmIFYAJiBKADogMgBaIB4AaiAOA
EQiAE4gLgBCIDoAFiBqAAYi8Q+xD60PqQ+lD6EPmQ+RD40PhQ99D3UPbQ9lD10PWQ9VD1MPT
AkPUQ9VD1kPYQ9tD3kPiQ+VD6kPuQ/ND+EPyw/EBQ+9D7kPtQ+tD6UPnQ+VD4kPgQ99D3UPb
Q9rD2AHD1wJD2EPZQ9tD3UPgQ+ND50PqQ+9D80P4Q/lD+EP3Q/ZD9UPzQ/FD70PtQ+tD6UPm
Q+RD4kPgQ99D3UPcw9sDQ9xD3UPfQ+FD5EPoQ+tD70P0Q/iDAUP+Q/1D/EP6Q/hD9kP0Q/FD
70PsQ+pD6EPmQ+RD4kPgw98Bw94BQ99D4EPhQ+ND5kPoQ+xD70PzQ/iDBkP9Q/tD+EP1Q/ND
8EPuQ+tD6UPnQ+VD48PiAcPhAUPiQ+ND5EPnQ+lD7EPvQ/ND94MIQ/5D/EP5Q/ZD80PxQ+5D
7EPpQ+hD5kPlw+QCQ+VD5kPoQ+lD7EPvQ/JD9giDCkP9Q/pD90P0Q/FD7kPsQ+pD6UPoQ+fD
5gFD50PoQ+pD7EPuQ/FD9IgGgwZD/UP5Q/ZD80PwQ+5D7EPrw+kBw+gBQ+lD6kPrQ+1D70Py
iAiDBkP8Q/hD9UPyQ/BD7kPsQ+tD6sPpAUPqQ+tD7EPuQ/CICoMFQ/1D+UP2Q/ND8UPvQ+1D
60Pqw+kBQ+pD60PsQ+6IDIMEQ/5D+kP3Q/RD8UPvQ+1D60Pqw+kCQ+pD64gNgwRD/kP7Q/dD
9EPxQ+5D7EPqQ+lD6EPnw+gBiA+DA0P+Q/pD9kPzQ+9D7UPqQ+hD50Pmw+UBiBCDA0P9Q/lD
9UPxQ+1D6kPnQ+VD5EPjQ+KIEYMDQ/tD90PyQ+5D6kPnQ+RD4kPgQ9+IEYMDQ/5D+UP0Q+9D
6kPmQ+ND4EPeQ9yIEoMDQ/tD9UPwQ+pD5kPiQ95D3EPZiBODAkP9Q/dD8UPqQ+VD4UPdQ9lD
1ogTgwND+EPyQ+tD5UPgQ9tD10PUiBMAgwJD+kPzQ+tD5UPfQ9pD1UPRAIgOgASDAkP7Q/RD
7EPlQ99D2UPUQ8+AA4gLgAWDAUP9Q/VD7EPlQ95D2EPSQ82ABogHgAaDAkP3Q+1D5kPeQ9dD
0UPLgAiIBYACiAODAkP4Q+5D5kPeQ9dD0EPKgA2ICIMBQ/pD8EPnQ99D10PQQ8mACYgMgwFD
/EPxQ+hD30PXQ9BDyIgBAIgTgwFD/kPzQ+lD4EPYQ9BDyIgWgwJD9UPrQ+JD2UPQQ8iIF4MB
Q/dD7UPjQ9pD0UPJiBeDAUP5Q+9D5UPcQ9NDyogXgwFD/EPxQ+dD3kPUQ8yIGAND/kP0Q+pD
4EPXQ86BPkMAgR9DAIEewwYBQwVDBEMCQwFDAIEYQw5DDUMMQwtDCkMIQwZDBEMCgRZDFcMU
AUMTQxFDEEMOQwtDCUMGQwNDAIETwxwBQxtDGkMZQxdDFUMTQxBDDUMKQwdDBEMBgRFDJMMj
AUMiQyBDH0MdQxpDGEMUQxFDDkMLQwhDBEMBgQ/DKwFDKkMpQyhDJkMkQyJDH0McQxlDFUMS
Qw5DCkMHQwNDAIENQzPDMgFDMUMwQy5DLEMqQydDI0MgQxxDGEMVQxFDDUMJQwRDAYEMwzoB
wzkBQzdDNkM0QzFDLkMqQydDI0MfQxtDF0MTQw9DCkMGQwKBC8NBAkNAQz9DPUM7QzlDNkMy
Qy5DKkMmQyJDHUMZQxRDD0MKQwZDAoEKw0gCQ0dDRkNEQ0JDQEM9QzlDNUMxQy1DKEMjQx9D
GkMUQw9DCkMFQwGBCUNOw08BQ05DTUNMQ0pDR0NEQ0BDPEM4QzNDL0MqQyRDH0MZQxNDDkMJ
QwRDAIEIQ1TDVQJDVENSQ1FDTkNLQ0dDQ0M/QzpDNUMwQypDJUMeQxhDEkMNQwdDAoEIQ1rD
WwJDWkNZQ1dDVUNSQ05DSkNFQ0BDO0M2QzBDKkMjQxxDFkMQQwpDBIEIQ2DDYQNDX0NeQ1tD
WENUQ1BDTENHQ0FDPEM1Qy9DJ0MhQxpDFEMNQwdDAYEHQ2VDZsNnAUNmQ2VDZENhQ19DWkNW
Q1JDTUNHQ0FDO0M0QyxDJUMeQxdDEEMJQwOBB0NpQ2vDbAJDa0NpQ2dDZUNgQ1xDWENSQ01D
R0NAQzlDMUMqQyJDG0MTQwxDBYEHQ25DcMNxAkNwQ29DbUNqQ2ZDYkNdQ1hDUkNMQ0VDPkM2
Qy5DJkMeQxZDD0MHQwCBBkNxQ3RDdcN2AUN1Q3RDckNvQ2tDZ0NiQ11DV0NRQ0pDQ0M6QzJD
KkMiQxpDEUMJQwGBBkN1Q3dDecN6AUN5Q3hDd0N0Q3BDbENnQ2JDXENWQ09DSEM+QzZDLkMl
Qx1DFEMLQwOBBkN4Q3pDfEN9Q35DfUN8Q3tDeEN1Q3FDbENnQ2FDWkNTQ0xDQkM6QzFDKUMg
QxdDDkMFgQZDekN9Q39DgMOBAUOAQ39DfEN5Q3VDcENrQ2VDX0NYQ1BDRkM+QzVDLEMjQxlD
EEMHgQZDfEN/Q4FDg8OEAUODQ4JDgEN9Q3lDdENvQ2lDY0NcQ1RDSkNCQzlDL0MmQxxDE0MJ
QwCBBUN+Q4FDg0OFQ4ZDh0OGQ4VDg0OAQ3xDeENzQ21DZ0NgQ1hDTkNFQzxDM0MpQx9DFUML
QwGBBUN/Q4JDhUOHQ4jDiQFDiEOGQ4NDgEN7Q3ZDcUNqQ2NDXENSQ0lDP0M2QyxDIkMYQw5D
A4EFQ39DhEOGQ4hDisOLAUOKQ4lDhkODQ35DekN0Q25DZ0NfQ1VDTENDQzlDL0MlQxtDEEMG
gQVDgEOEQ4dDikOLQ4xDjUOMQ4tDiEOFQ4FDfEN3Q3FDakNiQ1hDT0NGQzxDMkMoQx1DE0MI
gQVDgEOFQ4hDikOMw44CQ41DikOHQ4RDf0N6Q3RDbUNlQ1tDU0NJQz9DNUMrQyBDFkMLgQVD
gEOFQ4hDi0ONQ47DjwFDjkOMQ4lDhkOBQ3xDdkNwQ2hDXkNWQ0xDQ0M4Qy5DI0MZQw5DAYH/
gf+B/4H/gf+B/4H/gf+BBID/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAA
AAAAAAAAAAAAAYgDgAKIHIADiBuABIgagAWIGYAGiBiAB4gSAIgDgAaIEwCI9QCIHYADiBuA
BYgYgAWIGYAEiBmABYgbgAKIawCIHoABiB2AAogcgAKIHIADiBuABIgagASIGoAEiBqAAogd
gAKIHIADiBuABIgagAWIGYAFiBMAiP+IFQCIHYACiByABIgZgAWIGYAEiBqABIgbgAKIzACI
HoABiB2AAYgdgAKIHIACiByAAYgdgAKIHIADiBuABIgagASI/4hrgAGIHIAEiBqABIgZgASI
GoAEiBqAA4geAIj/iA0AiB4AiB4AiB6AAYgdgAKI/4isgAGIHIAEiBqABIgagAOIGoAEiBqA
BIgdAIj/iG0AiP+IzgCIHoACiBuABIgagAOIGoAEiBqABIgcgAGI/4j/iP+IPQCIHoACiBuA
BIgagAOIG4ADiBqAA4gbgAOI/4j/iP+IPQCIHoACiBuABIgagAOIG4ADiBqAA4gbgAOI/4jG
AIgeAIj/iFUAiB6AAogbgASIGoADiBuAA4gagAOIG4ADiP+IxgCIHYABiP+IVQCIHoACiBuA
A4gbgAOIG4ACiBuAA4gbgAOIG4ADiP+IpYABiByAAogeAIj/iDUAiB6AA4gagAOIG4ADiBqA
A4gbgAOIG4ADiBqAA4gbgAGI/4gjgwFD90PtQ+ND2UPQiBiDAUP6Q/BD5UPcQ9OIGIMBQ/1D
80PpQ99D1ogZgwFD9kPsQ+JD2YgZgwFD+kPwQ+ZD3YgZgwFD/kP0Q+pD4YgagwFD+EPuQ+WI
GoMBQ/xD80PpiBqDAkP3Q+6IG4MBQ/xD84gbgwJD+IgcgwFD/YgcgwKIHYMBiB2DAYgVgAGI
BgOIFIAEiBqAA4gbgAOIGoADiBuAA4gbgAKIG4ADiBuAAogcAIgdAIgeAIgeAIgeAIgdgAGI
HYABiB2AAYgMQ4BDhEOIQ4tDjUOPw5ABQ49DjkOLQ4hDg0N+Q3lDckNrQ2FDWUNPQ0ZDO0Mx
QyZDHEMRQwSBBEN/Q4RDiEOLQ45Dj8ORAUOQQ49DjUOJQ4VDgUN7Q3VDbUNkQ1tDUkNJQz9D
NEMqQx9DFEMHgQRDfkOEQ4hDi0OOQ5BDkUOSQ5FDkEOOQ4tDh0OCQ31Dd0NwQ2dDXkNVQ0xD
QkM3Qy1DIkMXQwpDAIEDQ35Dg0OHQ4tDjUOQQ5HDkgFDkUOPQ4xDiUOEQ39DeUNyQ2lDYUNY
Q09DRUM7QzBDJUMaQw1DA4EDQ31DgkOHQ4pDjUOQQ5HDkgJDkEONQ4pDhkOBQ3tDdENsQ2ND
W0NSQ0hDPkMzQylDHkMRQwaBA0N8Q4JDhkOKQ41DkEORw5MBQ5JDkUOPQ4tDh0ODQ31Dd0Nu
Q2ZDXkNUQ0tDQUM3QyxDIkMVQwpDAIECQ3tDgUOFQ4lDjUOPQ5HDkwJDkkOQQ41DiUOEQ39D
eUNwQ2lDYENXQ05DREM6QzBDJUMYQw5DA4ECQ3pDgEOFQ4lDjEOPQ5FDk0OUQ5NDkkOQQ45D
ikOGQ4FDe0NzQ2tDY0NaQ1FDR0M+QzNDKUMcQxJDCIECQ3pDgEOEQ4lDjEOPQ5FDk8OUAUOT
Q5FDj0OLQ4dDgkN9Q3VDbkNmQ11DVENLQ0FDN0MtQyBDFkMMQwKBAUN5Q39DhEOIQ4xDj0OS
Q5NDlEOVQ5RDkkOQQ41DiUOEQ39Dd0NwQ2hDYENXQ05DRUM7QzFDJUMaQxBDBoEBQ3lDf0OE
Q4hDjEOPQ5JDlMOVAkOTQ5FDjkOKQ4ZDgUN5Q3JDa0NjQ1pDUUNIQz5DNUMpQx9DFUMLQwIB
Q3lDf0OEQ4hDjEOPQ5JDlEOVQ5ZDlUOUQ5JDj0OMQ4hDgkN7Q3VDbkNmQ11DVUNMQ0JDOUMt
QyNDGUMQQwcBQ3hDf0OEQ4hDjEOPQ5JDlMOWAkOVQ5NDkUONQ4lDhEN+Q3dDcENpQ2FDWENP
Q0ZDPEMxQydDHkMVQwtDA0N4Q39DhEOIQ4xDkEOSQ5VDlsOXAUOWQ5RDkkOPQ4tDhkOAQ3pD
c0NrQ2RDW0NTQ0pDQEM1QyxDI0MZQxBDCEN4Q39DhEOIQ4xDkEOTQ5VDl8OYAUOXQ5ZDk0OQ
Q41DiEOCQ3xDdUNuQ2dDX0NWQ01DREM6QzBDJ0MeQxVDDUN4Q39DhEOIQ4xDkEOTQ5VDl0OY
Q5lDmEOXQ5VDkkOOQ4pDhEN+Q3hDcUNqQ2JDWkNRQ0hDPkM1QyxDI0MaQxJDeEN/Q4RDiEOM
Q5BDk0OWQ5jDmQJDmEOWQ5NDkEOMQ4ZDgUN7Q3RDbUNlQ11DVUNMQ0JDOUMwQyhDH0MXQ3hD
fkODQ4hDjEOQQ5NDlkOYQ5nDmgFDmUOXQ5VDkUOOQ4hDg0N9Q3dDcENoQ2FDWUNQQ0ZDPkM1
Qy1DJEMdQ3dDfUODQ4dDjEOPQ5NDlUOXQ5nDmgFDmUOYQ5VDk0OPQ4pDhUN/Q3lDckNrQ2RD
XENUQ0pDQkM6QzFDKUMiQ3ZDfEOBQ4ZDikOOQ5JDlEOXw5kBQ5pDmUOYQ5ZDk0OQQ4tDhkOB
Q3tDdUNuQ2dDX0NYQ05DRkM+QzZDLkMnQ3RDekOAQ4RDiUONQ5BDk0OWQ5jDmQJDmEOWQ5RD
kUOMQ4hDg0N9Q3dDcUNqQ2NDW0NSQ0pDQ0M7QzNDLENyQ3hDfUOCQ4ZDi0OOQ5FDlEOWQ5fD
mAFDl0OWQ5NDkUONQ4lDhEN/Q3lDc0NsQ2ZDX0NWQ05DR0NAQzhDMUNvQ3VDekN/Q4RDiEOL
Q49DkUOUQ5XDlgJDlUOTQ5FDjUOJQ4VDgEN7Q3VDb0NoQ2JDWUNSQ0tDREM9QzZDa0NyQ3dD
fEOAQ4RDiEOMQ45DkUOTw5QCQ5NDkkOQQ41DiUOFQ4FDfEN3Q3FDa0NlQ11DVkNPQ0lDQkM8
Q2dDbkNzQ3hDfEOBQ4RDiEOLQ45DkEORw5IBQ5FDkEOPQ4xDiUOFQ4FDfUN4Q3NDbUNnQ2BD
WkNTQ01DR0NBQ2NDaUNuQ3NDeEN8Q4BDhEOHQ4pDjEOOw48CQ45DjUOLQ4hDhUOCQ35DeUN0
Q29DakNjQ11DV0NRQ0tDRUNeQ2RDaUNuQ3NDd0N7Q39DgkOGQ4hDikOLw4wCQ4tDiUOHQ4RD
gUN+Q3pDdkNxQ2xDZkNgQ1tDVUNQQ0pDWUNfQ2RDaUNtQ3JDdkN6Q31DgUODQ4VDh0OIw4kB
Q4hDh0OFQ4NDgUN+Q3pDdkNyQ25DaENjQ15DWUNUQ05DU0NZQ15DY0NnQ2xDcEN0Q3dDe0N+
Q4BDgkOEw4UDQ4RDgkOAQ31DekN3Q3NDb0NqQ2ZDYUNcQ1hDU0NNQ1NDWENcQ2FDZUNqQ25D
ckN2Q3lDe0N+Q39DgcOCAkOBQ4BDf0N8Q3pDd0N0Q3FDbENoQ2RDYENbQ1dDR0NMQ1FDVkNa
Q19DY0NnQ2tDcENzQ3ZDeEN6Q3xDfUN+w38BQ35DfUN7Q3lDd0N1Q3JDbkNqQ2ZDYkNeQ1pD
QENGQ0pDT0NUQ1hDXENhQ2VDaUNtQ3BDc0N1Q3dDeUN6Q3tDfMN7AUN6Q3lDd0N1Q3JDb0Ns
Q2lDZUNiQ16B/4H/gf+B/4H/gf+B/4H/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/AAAAAAAAAAAAAAABiAOABIgagARI54gZgARIVYgZgASIGoAFiBmABYgZgAWIGoAE
iBqABIgbgAOIG4AEiBuAA4gcgASIG4ADiByAA4gcgAKIHYACiByAA4gcgAOIG4AEiBuABIga
gAWIGYAGiBiABogYgAaIGIAGiBeAB4gWgAiIFYAJiBOABYgDAIgPgAqIFIAJiBaAAogcgAKI
HIACiByAAogcgAKIHIACiB2AAYgdgAKIHIACiB2AAYgeAIg/AIgfAIgfgAGIHoACiBxIuYAB
iB2AAogdgAKIHIACiByABIgbgASIGoAFiBmABYgZgAWIGIAGiBiABogXgAeIFoAIiBWACIgR
SOOADIgQgA2IEgCIHgCIHgCIHgCIHgCIHgCI/4hlgAGIHoABiB2AAYgdgAKIHYACiByAA4gb
gASIGoAFiBmABYgZgAWIGIAGiBiABogXgAeIFoAHiBWACYgRgAyI/4j/iDqAAYgdgAGIHoAB
iB2AAYgdgAKIHIAEiBqABYgZgAWIGYAFiBhIoYAFiBiABogXgAeIFoAHSIKIFYAIiBSACoj/
iP+IOQCIHwCIHgCIHoABiB2AAogcgAOIG4AEiBqABYgZgAWIGYAFiBiABogXgAeIF4AHiBaA
B4gVgAmI/4j/iHoAiB4AiB6AAYgdgAGIHYADiBuABIgagAWIGYAFiBiABogXgAeIF4AHiBaA
B4gWgAiI/4j/iNoAiB4AiB6AAogcgASIGYAGiBiABogXgAeIF4AHiBeABogYgAaI/4j/iP+I
fYACiBuAA4gagASIGoAEiBqAA4j/iP+I/4i/AIgdgAGIHQCIHEjEiP+IvACI/4j/iECAAYgd
gAGIHYABiB2AAYgdAIgNA4gPAIgNgwGIDgCIDYMDiAwAiA2DBIgLAIgNgwWICQCIDkP8gwWI
CACIDkP5Q/yDBYgGgAGIDkP2Q/lD/IMFiAWAAYgOQ/RD90P5Q/yDBIgFAIgPQ/JD9UP3Q/pD
/YMEiAQAiA9D8UP0Q/ZD+UP8gwSIFUPxQ/ND9UP4Q/tD/oMDiBVD8UPzQ/VD+EP7Q/6DA4gV
Q/JD9EP2Q/hD+0P+gwOIFUP0Q/VD90P5Q/yDBIgVQ/ZD90P5Q/tD/YMEiBVD+UP6Q/tD/YMF
iBVD/EP9Q/6DBogVgwiIFoMHiBeDBogYgwWIGYMDiJtDOUM/Q0NDSENNQ1FDVUNaQ15DY0Nm
Q2pDbUNwQ3JDdEN2w3gBw3kBQ3hDd0N2Q3VDc0NwQ21DakNnQ2RDYUMzQzhDPENBQ0VDSkNO
Q1NDV0NcQ2BDZENnQ2pDbUNvQ3JDdEN1w3YDQ3VDdENzQ3FDbkNsQ2pDZ0NkQyxDMUM1QzpD
PkNDQ0dDTENQQ1VDWUNdQ2FDZENoQ2pDbUNwQ3FDc8N0BENzQ3FDb0NtQ2tDaUNmQyZDKkMv
QzNDN0M8Q0BDRUNJQ05DU0NXQ1tDX0NiQ2VDaENrQ25Db0Nxw3IBw3MBQ3JDcUNwQ25DbUNr
Q2hDH0MkQyhDLEMwQzVDOUM+Q0JDSENMQ1FDVUNZQ11DYENjQ2dDakNsQ25Db0Nww3EDQ3BD
b0NuQ2xDakMZQx1DIUMlQypDLkMyQzdDPENBQ0ZDSkNPQ1NDV0NbQ19DY0NmQ2hDa0NtQ25D
b0Nww3EBw3ABQ25DbUNsQxNDF0MbQx9DI0MnQyxDMEM1QztDP0NEQ0lDTUNSQ1ZDWkNeQ2JD
ZUNnQ2pDbENtw28Bw3ACQ29DbkNtQw5DEkMVQxlDHUMhQyZDKkMvQzVDOUM+Q0NDSENMQ1FD
VUNaQ15DYUNkQ2dDaUNrQ21DbsNvA0NuQ21DCEMMQxBDE0MXQxtDIEMkQylDL0M0QzlDPkND
Q0dDTENRQ1ZDWkNeQ2FDZENnQ2lDa0NtQ27DbwNDbkMEQwdDCkMOQxJDFkMaQx9DI0MpQy5D
M0M4Qz5DQ0NHQ0xDUkNWQ1pDXkNhQ2RDZ0NpQ2tDbcNuAcNvAUNuQwBDA0MGQwlDDUMRQxVD
GkMeQyRDKUMuQzRDOUM+Q0NDSENOQ1JDV0NbQ15DYkNlQ2dDaUNsQ23DbgMBQwBDAkMFQwlD
DEMRQxVDGkMfQyVDKkMvQzRDOkM/Q0RDSkNPQ1NDWENcQ19DYkNlQ2hDakNsw20Bw24BgQJD
AUMFQwhDDUMRQxVDG0MgQyZDK0MxQzZDO0NBQ0dDTENQQ1VDWUNdQ2BDY0NmQ2lDasNsAcNt
AYEDQwJDBUMJQw1DEkMYQx1DIkMoQy1DM0M4Qz1DRENJQ05DUkNXQ1tDXkNhQ2RDZ0NpQ2pD
a8NsAYEEQwJDBkMKQw9DFUMaQx9DJEMqQzBDNUM7Q0FDRkNLQ1BDVENYQ1xDYENjQ2ZDaENp
Q2rDawGBBEMAQwRDCEMNQxJDF0MdQyJDJ0MtQzNDOEM/Q0RDSUNOQ1JDVkNaQ15DYUNkQ2ZD
aENpw2oBgQVDA0MGQwtDEEMVQxtDIEMlQytDMUM2Qz1DQkNHQ0xDUENVQ1lDXENfQ2NDZUNm
w2gBQ2mBBUMCQwVDCkMPQxRDGUMeQyRDKUMvQzRDO0NAQ0VDSkNPQ1NDV0NbQ15DYUNjQ2VD
ZkNnQ2iBBUMBQwVDCUMOQxNDGEMeQyNDKEMuQzNDOkM/Q0RDSUNOQ1JDVkNaQ11DYENiQ2RD
ZcNmAYEFQwJDBUMJQw5DE0MYQx1DIkMoQy1DM0M5Qz5DQ0NIQ01DUUNVQ1lDXENfQ2FDY0Nk
w2UBgQRDAEMDQwZDCkMPQxRDGEMdQyNDKEMtQzNDOUM+Q0NDSENMQ1BDVENYQ1tDXkNgQ2JD
Y8NkAYEEQwFDBEMHQwtDEEMVQxlDHkMjQyhDLkMzQzlDPkNDQ0hDTENQQ1RDV0NaQ11DX0Nh
Q2LDYwGBA0MBQwNDBkMJQw1DEkMWQxtDH0MkQylDLkM0QzpDP0NDQ0hDTENQQ1RDV0NaQ11D
X0NgQ2HDYgEBwwABQwJDBEMGQwlDDEMPQxRDGEMdQyFDJkMrQzBDNUM7Qz9DRENIQ01DUENU
Q1dDWkNdQ19DYMNhAkMCQwNDBEMFQwdDCUMMQw9DEkMXQxtDH0MjQyhDLUMyQzZDPENBQ0VD
SUNNQ1FDVUNYQ1pDXUNew2ABw2EBwwcBQwhDCUMLQw1DD0MSQxVDGkMeQyJDJkMrQy9DNEM4
Qz5DQkNHQ0tDT0NSQ1VDWENbQ11DX8NgAUZhQ2DDCwFDDEMNQw9DEUMTQxZDGUMdQyFDJUMp
Qy5DMkM2QztDQENEQ0lDTENQQ1NDV0NZQ1tDXkNfw2ABRmFDYMMQAUMRQxJDE0MVQxhDGkMd
QyFDJUMpQy1DMUM1QzlDPkNDQ0dDS0NOQ1JDVUNYQ1pDXUNfQ2DDYQJDYMMVAUMWQxdDGEMa
QxxDH0MhQyVDKUMtQzBDNEM5Qz1DQUNGQ0lDTUNRQ1RDV0NaQ1xDXkNgw2EDQ2DDGgFDG0Mc
Qx1DH0MhQyNDJkMqQy1DMUM0QzhDPENAQ0RDSUNMQ1BDU0NWQ1lDXENeQ19DYcNiA0Nhwx8B
QyBDIUMiQyRDJkMoQytDLkMyQzVDOUM8Q0BDRENIQ0xDT0NTQ1ZDWUNbQ15DYENhQ2LDYwND
YsMlAkMmQydDKUMrQy1DMEMzQzZDOkM9Q0FDRENIQ0tDT0NTQ1ZDWUNbQ15DYENiQ2NDZMNl
AcNkAUNigf+B/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/wAAAAAAAAAAAAAAAYgDgAmIFYAJiBWACYgVgAmIFYAJiBWAB4hSAIj/iP+IJoABiByA
AogbgAOIGoAEiBUAiAKABYgTgAKIAoAFiBGABIgCgAWIEIAFiASAC4gTgAqIFIAKiBSACogU
gAmIFYAIiBaABYhTAIj/iP+IBgCIHYABiByAAogbgAOIG4ADiBYAiAOAA4gUgAKIA4ADiBKA
BIgFgAyIEoALiBOAC4gTgAqIFIAJiBWACIgWgAaIcQCI/4j/iAUAiB2AAYgdgAGIHYABiB2A
AYgWgAGIBIABiBSAA4gHgAqIFIAKiBNIrIAJiBSACYgVgAmIFYAIiBaABogXgAWIUgCIHYAB
iP+I/4h+AIgbgAOICIAJiBWACYgVgAiIFoAIiBaAB4gWgAeIF4AGiBeABYhwgAGIHgCI/4j/
iHyAAYgLgAeIF4AHiBeAB4gXgAaIF4AGiBiABogYgAWIGIAFiBiAA4hRgAGIHIACiP+I/4iM
gAaIGIAFiBmABYgZgASIGYAFiBmABIgZgASIGYAEiBmABIgwAIgdgAGIHIACiBqABIj/iP+I
b4ADiBqABIgagAOIG4ADiBqAA4gbgAOIGoADiBqAA4gagAOIGYACiBIAiB2AAYgbgAOIGYAE
iBeABYgXgAKIGoABiByAAYj/iP2AAYgdgAGIHYABiByAAYgdgAGIHIABiByAAogbgAKIG4AC
iA4AiAqAAkgviA6AAYgbgAOIGYAFiBeABIgXgAaIFoAHiBWABogYgAOIHIABiP+I/4heAIg9
AIgLAIgQgAGICoABiA6AAogKgAKIDIADiAqAA4gKgAOICYAGiBWABogVgAeIFoAHiBaACIgV
gAiIF4AHiBiAA4gcAIj/iKQAiMOAAYgTSAWIB4ACiBKAAYgFgASIEYACiAOABogOgBCICoAT
iA2ADYgTgAqIFIAJiBWACYgVgAmIFoAHiBiABogZgAOIHACI/4iCgAGIBsMqAUMrQyxDLUMu
QzBDMkM1QzhDO0M+Q0FDRUNIQ0xDT0NTQ1ZDWUNcQ15DYENiQ2RDZcNmA0NlQ2PDMAJDMUMy
QzNDNUM3QzpDPUNAQ0NDRkNJQ0xDUENTQ1ZDWUNcQ19DYUNjQ2VDZkNnw2gBw2cBQ2ZDZMM1
AcM2AUM3QzlDO0M9Qz9DQkNEQ0dDSkNNQ1FDVENXQ1pDXUNfQ2JDZENmQ2dDaMNpA0NoQ2dD
ZcM7AkM8Qz1DPkNAQ0JDRENHQ0pDTENPQ1JDVUNYQ1tDXkNgQ2NDZUNnQ2hDaUNqw2sCQ2pD
aUNoQ2bDQQJDQkNDQ0RDRkNIQ0pDTENPQ1FDVENXQ1pDXENfQ2JDZENmQ2hDakNrQ2zDbQND
bENrQ2lDZ8NIAsNJAUNLQ0xDTkNQQ1JDVENXQ1lDXENeQ2FDY0NmQ2hDakNsQ21DbsNvA0Nu
Q21DbENqQ2jDTgHDTwFDUENRQ1NDVENWQ1hDWkNdQ19DYUNkQ2ZDaENqQ2xDbkNvQ3BDccNy
AkNxQ3BDb0NtQ2tDacNWA0NXQ1hDWUNbQ1xDX0NhQ2NDZUNnQ2lDa0NtQ29DcUNyQ3NDdMN1
AkN0Q3NDckNxQ29DbUNqw10Cw14BQ19DYENiQ2NDZUNnQ2lDa0NtQ29DcENyQ3RDdUN2Q3fD
eANDd0N2Q3RDckNwQ25Da8NlA0NmQ2dDaENpQ2pDbENuQ3BDcUNzQ3VDdkN3Q3lDesN7AcN8
AcN7AUN6Q3hDdkN0Q3JDb0Nsw20DQ27DbwFDcUNyQ3NDdUN2Q3hDeUN7Q3xDfUN+w38Bw4AB
w38BQ35DfEN6Q3hDdkN0Q3FDbsN1A8N2AUN3Q3hDeUN7Q3xDfUN+Q4BDgUOCw4MBw4QDQ4ND
gkOBQ39DfUN7Q3hDdUNyQ2/DfQPDfgFDf0OAQ4FDgkODQ4RDhUOGQ4fDiAHDiQLDiAFDh0OF
Q4RDgkN/Q31DekN3Q3NDcEOGw4UCw4YBw4cBQ4hDiUOKQ4vDjAFDjcOOA8ONAUOMQ4pDiUOH
Q4VDgkN/Q3xDeEN1Q3FDjsONAsOOAkOPw5ABQ5HDkgHDkwVDkkORQ5BDjkOMQ4pDiEOEQ4FD
fkN6Q3ZDckOWw5UDw5YCw5cBw5gBw5kEw5gBQ5dDlUOUQ5JDkEONQ4pDh0ODQ4BDfEN4Q3PD
nQbDngLDnwVDnkOdQ5xDm0OZQ5dDlUOTQ5BDjUOJQ4VDgUN9Q3lDdEOlw6QHw6UEw6QBQ6ND
okOhQ59DnUObQ5lDlkOTQ49Di0OHQ4NDf0N6Q3XDqwLDqgLDqwXDqgJDqUOoQ6ZDpUOjQ6FD
nkOcQ5lDlUOSQ41DiUOFQ4BDe0N2Q7LDsQPDsAdDr0OuQ61DrEOqQ6lDp0OkQ6JDn0ObQ5hD
lEOPQ4tDhkOBQ3xDd8O3AcO2BsO1AsO0AUOzQ7FDsEOuQ6xDqkOnQ6RDoUOeQ5pDlkORQ4xD
h0OCQ31DeMO8AcO7A8O6A8O5AUO4Q7dDtkO1Q7RDsUOvQ61DqkOnQ6RDoEOcQ5hDkkOOQ4lD
g0N+Q3jDwAHDvwPDvgPDvQFDvEO7Q7pDuEO3Q7RDskOvQ6xDqUOmQ6JDnkOZQ5RDj0OKQ4RD
f0N5Q8TDwwLDwgLDwQJDwMO/AUO+Q7xDu0O5Q7dDtEOxQ65Dq0OnQ6NDn0ObQ5VDkEOLQ4VD
f0N6w8YBw8UDw8QCQ8PDwgFDwUPAQ75DvUO7Q7hDtkOzQ7BDrEOpQ6VDoEOcQ5ZDkUOLQ4ZD
gEN6w8gBw8cBw8YDw8UBQ8RDw0PCQ8FDwEO+Q7xDukO3Q7RDsUOuQ6pDpkOhQ5xDl0ORQ4xD
hkOAQ3pDycPIAsPHAsPGAkPFQ8RDw0PCQ8FDv0O9Q7pDuEO1Q7JDrkOqQ6ZDokOdQ5dDkkOM
Q4ZDgUN7Q8nDyALDxwPDxgFDxUPEQ8NDwkPBQ79DvUO7Q7hDtUOyQ65Dq0OmQ6JDnUOXQ5JD
jEOHQ4FDe8PIAcPHAsPGAsPFAcPEAUPDQ8JDwEO/Q71DukO4Q7VDskOuQ6pDpkOiQ51Dl0OS
Q4xDh0OBQ3vDxgHDxQPDxALDwwFDwkPBQ8BDv0O+Q7xDuUO3Q7RDsUOuQ6pDpkOhQ51Dl0OS
Q4xDh0OBQ3tDxMPDAsPCBMPBAcPAAUO/Q71DvEO6Q7hDtkOzQ7BDrUOpQ6VDoUOcQ5ZDkUOM
Q4ZDgUN7w8ACw78Fw74CQ71DvEO7Q7pDuEO2Q7RDsUOuQ6tDqEOkQ6BDm0OWQ5FDi0OGQ4BD
eoH/gf+B/4H/gf+B/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8A
AAAAAAAAAAAAAAGIAoAFiBCABYgCgASIEoAEiAKAA4gUgAOIA4ABiBaAAYgEgAGIFgCIBQCI
/gCIHgCIHoABiB2AAogcgAOIG4AEiBqABIgagASIGoAEiBOAAYgEgASIFIABiAOABIgUgAGI
A4AEiBSAAYgDgASIFIABiAOABIgVAIgDgASIGoAEiBqABIgagASIGoAEiBqAA4gRgAWIA4AD
iBGABYgDgAKIE4ADiAWAAYgUgAGIBgCIFQCI/4gnAIgegAGIHYABiB2AAogcgAKIHIACiByA
AogUAIgGgAKIFIACiASAAogUgAKIBIACiBWAAYgEgAKIFYABiASAAogWAIgEgAKIFgCIBIAC
iByAAogcgAKIHIACiByAAogcgAGIEoAFiASAAYgRgAWIBYABiBKAA4gGgAGIE4ABiAcAiBSA
AYj/iEgAiB4AiB4AiB4AiB4AiBUAiAcAiBWAAogFAIgVgAKIBQCIFoABiAUAiBaAAYgFAIgW
gAGIBQCIFwCIBQCIFwCIBQCIHgCIHgCIHgCIHgCIM4ADiBmABIgagAOIHIACiByAAYgeAIge
AIgeAIj/iGCAAYgdgAKIHIACiByAAogdgAGIHYABiB2AAYgeAIjagAKIGoADiBqABIgbgAKI
HIACiB2AAYgdgAGIHgCIHgCIHgCIvwCIHwCIHgCIHoABiB2AAYgdgAKIHYABiB2AAYgdgAGI
HgCIHgCI2oACiBqAA4gagASIGoADiByAAogcgAKIHIACiB0AiB4AiD8AiB4AiH8AiF8AiD8A
iB4AiB6AAYgeAIj/iBqAAYgbgAOIGYAEiBuAA4gbgAOIG4ADiByAAogcgAGIHgCIHgCIHgCI
PwCI/4j/iH2AAYgbgAOIGYAGiBmABIgagASIG4ADiBuAA4gbgAOIHIABiB2AAYgeAIgeAIj/
iP+InYABiBqABIgagAWIGYAFiBmABYgagASIGoAEiBuAA4gbgAOIHIABiB2AAYgeAIgeAIj/
iP+Ie4ACiByAAogcgAOIG4ADiBuABIgagASIGoAEiBqABIgagASIG4ADiByAAYgdgAGIHgCI
/4j/iHuAAYgdgAKIHIACiByAAogcgAOIG4AEiBqABIgagASIGoAEiBqABIgbgAOIHIACiB0A
iP+I5IMBiB2DAogcgwOIG4MDiBvDvALDuwfDugFDuUO4Q7dDtkO0Q7JDr0OtQ6pDpkOjQ59D
mkOVQ5BDi0OFQ4BDekO4w7cKw7YBQ7VDtEOzQ7FDr0OtQ6pDqEOkQ6FDnUOZQ5RDj0OKQ4VD
f0N6w7INQ7FDsEOvQ65DrEOqQ6hDpUOiQ59Dm0OYQ5JDjkOJQ4RDf0N5w6wGw60Hw6wBQ6pD
qUOnQ6VDo0OgQ51DmkOWQ5FDjUOIQ4NDfkN5w6YGw6cBw6gGQ6dDpkOlQ6RDokOgQ51Dm0OX
Q5RDkEOLQ4dDgkN9Q3jDnwTDoAJDocOiAcOjBUOiQ6FDoEOfQ51Dm0OYQ5VDkkOOQ4pDhkOB
Q31DeMOYBMOZAUOaQ5vDnAFDncOeAkOfw54BQ51DnEObQ5pDmEOWQ5NDkEOMQ4lDhUOAQ3xD
d8ORBMOSAUOTQ5RDlUOWQ5dDmMOZAcOaAsOZAUOYQ5ZDlUOTQ5FDjkOKQ4dDg0N/Q3tDd0OK
w4kBw4oBQ4vDjAFDjUOPQ5BDkUOSQ5PDlAHDlQNDlEOTQ5JDkEOOQ4xDiUOFQ4JDfkN6Q3bD
ggNDg8OEAUOGQ4dDiEOJQ4tDjEONQ45Dj0OQw5ECw5ABQ49DjUOMQ4pDh0OEQ4FDfUN5Q3VD
e0N6w3sBw3wBQ31Df0OAQ4JDg0OFQ4ZDiEOJQ4pDi0OMw40Cw4wBQ4tDiUOIQ4VDgkN/Q3xD
eUN1w3MCw3QBQ3VDd0N4Q3lDe0N9Q39DgEOCQ4RDhUOGw4gBw4kDQ4hDh0OFQ4NDgUN+Q3tD
eEN0w2wCw20BQ25DcENxQ3NDdUN3Q3lDe0N9Q35DgEOCQ4NDhEOFw4YCw4UBQ4NDgUN/Q31D
ekN3Q3TDZQJDZkNnQ2hDaUNrQ2xDb0NxQ3NDdUN3Q3lDe0N9Q39DgEOBQ4LDgwJDgkOBQ4BD
fkN8Q3lDdkNzw14CQ19DYENhQ2NDZENmQ2lDa0NtQ3BDckN0Q3ZDeUN7Q3xDfkN/w4ADQ39D
fkN8Q3tDeEN2Q3NDV8NYAUNZQ1pDW0NcQ15DYENjQ2VDaENqQ21Db0NyQ3RDd0N5Q3pDfEN9
w34CQ31DfEN7Q3lDd0N1Q3LDUQHDUgFDU0NVQ1ZDWENaQ11DYENjQ2VDaENrQ21DcENzQ3VD
d0N5Q3pDe8N8AkN7Q3pDeEN3Q3RDcsNLAkNMQ01DT0NQQ1NDVUNYQ1tDXUNgQ2NDZkNpQ2xD
b0NyQ3RDdkN3Q3hDecN6AcN5AUN3Q3ZDdENxw0UCQ0ZDR0NJQ0tDTUNPQ1JDVUNYQ1tDX0Ni
Q2VDaENrQ25DcENzQ3RDdkN3w3gCQ3dDdkN1Q3NDcUM+wz8BQ0BDQUNDQ0VDR0NKQ01DUENT
Q1dDWkNdQ2FDZENoQ2tDbUNwQ3JDc0N1w3YBQ3dDdkN1Q3RDckNwQzjDOQFDOkM8Qz1DP0NC
Q0RDSENLQ05DUkNVQ1lDXUNgQ2RDZ0NqQ21Db0NxQ3NDdMN1AkN0Q3NDckNwwzMBQzRDNUM2
QzhDOkM8Qz9DQ0NGQ0pDTUNRQ1VDWENcQ2BDZENnQ2pDbENuQ3BDcsNzA0NyQ3FDb8MtAUMu
Qy9DMUMyQzVDN0M6Qz5DQUNFQ0lDTUNRQ1VDWENdQ2BDZENnQ2pDbENuQ3BDccNyAkNxQ3BD
bsMoAUMpQypDLEMuQzBDM0M2QzlDPUNBQ0VDSUNNQ1FDVUNaQ11DYUNkQ2dDaUNsQ21Db8Nw
A0NvQ21DI8MkAUMmQydDKUMsQy5DMUM1QzlDPUNBQ0VDSUNNQ1JDVkNaQ15DYUNkQ2dDaUNr
Q23DbgNDbUNsQx/DIAFDIkMjQyVDKEMqQy5DMkM1QzlDPkNCQ0ZDSkNOQ1NDV0NbQ15DYkNk
Q2dDaUNqw2wDQ2tDakMbQxxDHUMeQyBDIkMkQydDKkMvQzJDNkM6Qz9DQ0NHQ0xDUUNVQ1hD
XENfQ2JDZENmQ2jDagNDaUNoQxhDGUMaQxtDHUMfQyJDJEMoQyxDMEM0QzhDPENBQ0VDSUNO
Q1JDVkNZQ11DX0NiQ2RDZkNnw2gCQ2dDZsMWAUMXQxlDG0MdQx9DIkMlQypDLkMyQzZDOkM+
Q0NDR0NMQ1BDVENXQ1pDXUNgQ2JDY8NlA0NkQ2NDFEMVQxZDF0MZQxtDHkMhQyRDKEMsQzBD
NEM4Qz1DQUNFQ0pDTkNSQ1VDWENbQ11DX0NhQ2LDYwHDYgFDYMMTAUMVQxZDGEMaQx1DIEMj
QydDK0MvQzNDN0M7Qz9DRENIQ0xDUENTQ1ZDWUNbQ11DXkNfw2ABw18BQ11DEkMTQxRDFkMX
QxpDHEMfQyJDJ0MqQy5DMkM2QzpDPkNCQ0dDS0NOQ1FDVENWQ1lDWkNcw10CQ1xDW0Nagf+B
/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAA
AAAAAAAAAYgDgASIGoADiBuAA4gbgAOIGoADiBuAAogcgAKIHIABiB0AiB2AAYgdAIg9AIge
AIgdAIgeAIgeAIgegAGIHYACiByABogYgAiIFoAIiAyAB4gBgAiIDYAHCIAIiA2AEYgNgBGI
DoAQiA+AD4gQgA6IEIAGiBuAAohEgAKIHIABiB2AAYgcgAKIHIABiB0AiB4AiB0AiB4AiB0A
iB4AiD0AiB2AAYgdgAGIHYABiB2AAogcgAOIG4AHiBeACIgWgAeIDYAFiAOAB4gNgAaIAoAH
iA2AB4gBgAeIDoAHCIAHiA6AEIgPgA+ID4APiBCABoj/iKEAiB4AiB0AiB2AAYgdgAGIHYAB
iB2AAogcgAOIG4AHiBeAB4gXgAaIGIAGiA6ABYgDgAaIDoAFiAOABogOgAaIAoAGiA+ABogB
gAaID4AHCIAGiA+AD4gQgAeI/4j/CACIHYABiB2AAogcgAKIHIAEiBqABogYgAaIGIAGiBiA
BYgPgASIBIAFiA+ABIgEgAWID4AFiAOABYgPgAaIAoAEiBCABogCgASIEYAGiAGABIgRgAeI
/4j/iCEAiB2AAYgdgAKIHIADiBuABogYgAWIGYAFiBmABIgQgAOIBYAEiBCAA4gFgASIEIAE
iASAA4gRgASIBIADiBGABYgDgAOIEYAFiByAA4j/iP+IYoACiByAA4gbgAWIGYAFiBmABIga
gAOIG4ADiBGAA4gFgAKIEoADiAWAAogSgAOIBYABiBOABIgEgAGIE4AEiB6AAYj/iP+IZACI
HYACiByAA4gbgAWIGYAEiBqAA4gbgAKIEoACiAaAAYgTgAKIBgCIFIADiAUAiBSAA4gbgAOI
HoABiP+I/4iFAIgdgAKIHIAEiBqABIgagAKIHIABiBQAiB2AAogcgAKIHIACiByAA4geAIj/
iP+IhQCIHgCIHoACiByABIgagAKIHACINQCIHYABiB2AAogcgAKIHgCI/4j/iMYAiB6AAYgd
gAKIHACIVQCIHgCIHYABiB4AiP+Ih4MDiBuDAogcgwKIHAOI/4gegAGIHQCIdQCIHgCIHYAB
iP+Ip0MSQxNDFEMWQxhDGkMdQx9DI0MnQypDLkMyQzZDOkM+Q0JDRkNJQ01DUENSQ1RDVkNY
Q1nDWgJDWUNYQ1ZDEkMUQxVDFkMYQxtDHUMgQyNDJ0MrQy9DMkM2QzpDPkNBQ0VDSUNLQ05D
UUNTQ1TDVgHDVwJDVkNUQ1NDE0MVQxZDGEMaQxxDH0MiQyVDKUMsQy9DM0M3QzpDPkNBQ0VD
SENLQ01DT0NRQ1JDU8NUAkNTQ1JDUUNPQxVDFkMYQxpDHEMeQyFDI0MmQypDLUMxQzRDOEM7
Qz5DQUNFQ0hDSkNMQ05DT0NQQ1FDUsNRAUNQQ09DTUNLQxdDGUMaQxxDHkMgQyNDJkMpQyxD
L0MzQzZDOUM8Qz9DQkNFQ0dDSkNLQ01DTsNPA0NOQ01DS0NKQ0dDGkMbQx1DH0MhQyNDJkMo
QytDL0MyQzVDOEM7Qz5DQENDQ0ZDSENJQ0tDTMNNA0NMQ0tDSkNIQ0ZDREMcQx5DIEMiQyRD
J0MpQyxDLkMyQzVDN0M6Qz1DQENCQ0RDR0NIQ0rDSwHDTAJDS0NKQ0hDR0NFQ0JDQEMgQyJD
JEMmQyhDKkMtQy9DMkM1QzhDOkM9Qz9DQkNEQ0ZDSENJQ0rDSwNDSkNJQ0hDRkNEQ0FDP0M8
QyNDJUMnQypDLEMuQzFDM0M2QzlDO0M+Q0BDQkNEQ0ZDR0NJQ0rDSwNDSkNJQ0dDRUNDQ0FD
PkM8QzhDJ0MpQytDLkMwQzJDNUM3QzpDPEM/Q0FDQ0NFQ0dDSENJw0sEQ0pDSUNIQ0ZDQ0NB
Qz5DPEM4QzVDK0MuQzBDMkM0QzdDOUM7Qz5DQUNDQ0VDR0NIQ0pDS8NMAUNNw0wBQ0tDSkNJ
Q0dDRUNCQz9DPEM5QzVDMkMvQzJDNEM2QzlDO0M+Q0BDQkNFQ0dDSENKQ0vDTQHDTgNDTUNM
Q0pDSENGQ0RDQEM9QzpDNkMzQy9DM0M2QzlDO0M9Q0BDQkNEQ0dDSUNLQ0xDTkNPw1AEQ09D
TkNMQ0pDSENFQ0NDP0M8QzhDNEMwQyxDN0M6Qz1DP0NCQ0RDR0NJQ0tDTUNPQ1BDUUNSw1MD
Q1JDUENPQ01DS0NIQ0VDQkM+QzpDNkMyQy5DKkM8Qz9DQUNEQ0ZDSUNLQ01DT0NRQ1NDVENV
w1YDQ1VDVENSQ1BDTkNLQ0hDRUNCQz1DOUM1QzFDLEMoQz9DQ0NFQ0hDS0NNQ1BDUkNUQ1ZD
V0NYw1kDQ1hDV0NWQ1RDUUNPQ0xDSUNFQ0FDPEM4QzRDL0MrQyZDQ0NHQ0lDTENPQ1FDVENW
Q1hDWkNbw1wBw10BQ1xDW0NZQ1hDVUNTQ1BDTUNJQ0VDQUM8QzdDM0MuQylDJENHQ0pDTUNQ
Q1NDVUNYQ1pDXENdw18Bw2ACQ19DXkNcQ1pDV0NUQ1FDTkNKQ0ZDQUM8QzdDMkMtQyhDI0NK
Q05DUUNUQ1ZDWUNbQ11DX0NhQ2LDYwJDYkNhQ2BDXkNcQ1lDVkNTQ09DS0NGQ0JDPEM3QzJD
LUMoQyNDTUNRQ1RDV0NaQ1xDX0NhQ2JDZENlw2YCQ2VDZENjQ2BDXkNbQ1dDVENQQ0xDR0NC
QzxDN0MyQy1DJ0MiQ09DU0NWQ1lDXENfQ2FDZENlQ2fDaAFDacNoAUNmQ2VDYkNfQ1xDWUNV
Q1FDTUNIQ0NDPUM4QzJDLUMnQyJDUUNVQ1hDXENfQ2FDZENmQ2hDaUNqw2sCQ2pDaENnQ2RD
YUNeQ1pDV0NSQ05DSUNEQz5DOEMzQy1DKEMjQ1JDV0NaQ11DYENjQ2ZDaENqQ2tDbMNtAcNs
AUNqQ2hDZkNjQ2BDXENYQ1RDT0NKQ0VDPkM5QzNDLkMpQyNDU0NYQ1tDX0NiQ2VDZ0NpQ2tD
bcNuA0NtQ2xDakNnQ2RDYUNdQ1lDVUNQQ0tDRkM/QzpDNEMvQylDJENTQ1hDXENfQ2JDZUNo
Q2pDbENuw28BQ3BDb0NuQ21Da0NoQ2VDYkNeQ1pDVkNRQ0xDR0NBQztDNkMwQytDJUNTQ1hD
XENfQ2JDZUNoQ2tDbUNuQ2/DcAJDb0NuQ2xDaUNmQ2NDX0NbQ1dDUkNNQ0hDQkM9QzdDMkMs
QydDUkNXQ1tDXkNiQ2VDaENqQ2xDbkNvw3ACQ29DbkNsQ2pDZ0NkQ2BDXENYQ1NDT0NKQ0ND
PkM5QzNDLkMpQ1FDVkNaQ11DYUNkQ2dDaUNsQ25Db8NwAkNvQ25DbUNqQ2dDZENhQ11DWUNV
Q1BDS0NFQ0BDOkM1QzBDK0NPQ1RDWENbQ19DYkNlQ2hDakNsQ27DbwNDbkNsQ2pDaENlQ2FD
XkNaQ1ZDUUNMQ0ZDQUM8QzdDMkMtQ0xDUUNVQ1lDXUNgQ2NDZkNoQ2tDbENtw24CQ21DbENq
Q2dDZUNiQ15DW0NWQ1JDTkNIQ0NDPkM5QzRDMENJQ05DUkNWQ1pDXUNgQ2NDZkNoQ2pDa0Ns
Q23DbAFDa0NpQ2dDZUNiQ19DW0NXQ1NDT0NKQ0VDQEM8QzdDMkNFQ0pDTkNSQ1ZDWkNdQ2BD
Y0NmQ2dDaUNqw2sBw2oBQ2hDZkNkQ2JDX0NcQ1hDVENQQ0tDR0NCQz5DOUM1gf+B/4H/gf+B
/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAAAAAA
AYj/iP+IRgCIHYACiByAAogbgAOIGoAFiBmABYgYSHmABYgYSMGABYgZgASIGoADiBuAAogc
gAGI/4j/iL+AAYgdgAGIHIACiByAA4gbgAOIG4ADiBuAA4gbgAOIG4ACiByAAYj/iP+I3gCI
HgCIHoABiB2AAYgdgAGIHYABiB2AAYgdgAGIHYABiB0AiP+I/4jeAIgeAIgeAIj/iP+I/4j/
iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4iXAIj/iP+I/4j/iB2AAYgfgAGIHYACiB6A
AYgfgAGIHwCIHwCI/4j/iNcDiB6DAYgdgwKIGIADgwOIGYABgwSIGQBD/IMDiBpD+EP9gwOI
GUP0Q/pD/oMDiBhD8UP2Q/uDBACIFkPvQ/ND+EP8gwQAiBVD7EPxQ/VD+UP9gwSABIgQQ+tD
70PzQ/ZD+kP+gwSAA4gQQ+pD7kPxQ/RD+EP7gwWAAogQQ+lD7UPwQ/ND9kP5Q/yDBgCIEEPp
Q+xD70PxQ/RD90P6Q/2DB4gPQ+pD7EPuQ/FD80P1Q/hD+kP9gwiIDUPrQ+1D70PwQ/JD9EP2
Q/lD+0P9gwuICUPsQ+5D70PxQ/JD9EP1Q/dD+UP7Q/xD/oMTQ+5D70PwQ/FD8kPzQ/VD9kP3
Q/hD+UP7Q/xD/UP+gxDD8QHD8gFD88P0AUP1w/YBQ/fD+AFD+cP6AUP7w/wBw/0BQ/6DCcP0
B8P1BsP2BMP3A8P4AsP5A0P6w/cBw/YCw/UBw/QBw/MCw/IBw/EDw/ALw/EBQ/tD+kP5Q/hD
98P2AUP1Q/TD8gFD8UPwQ+9D7kPtQ+zD6wFD6sPpAsPoCAND/UP8Q/tD+kP4Q/dD9UP0Q/JD
8EPvQ+1D7EPqQ+lD6EPmQ+VD5EPjw+IBQ+HD4ALD3wRDQENGQ0pDTkNSQ1ZDWUNcQ19DYkNk
Q2ZDZ0Now2kBQ2hDZ0NmQ2RDYkNfQ1xDWUNVQ1FDTUNJQ0VDQEM8QzhDPENBQ0VDSkNOQ1JD
VUNYQ1xDX0NhQ2NDZMNmAUNnw2YBQ2RDY0NhQ19DXENZQ1ZDU0NOQ0tDR0NDQz9DO0M3QzxD
QENFQ0lDTUNRQ1RDV0NbQ11DYENhQ2PDZANDY0NiQ2FDX0NcQ1pDV0NUQ1BDTENJQ0VDQkM+
QzFDN0M7Q0BDRENIQ0xDUENTQ1dDWUNcQ15DYENhw2IDQ2FDYENeQ1xDWkNYQ1VDUUNOQ0tD
SENEQ0FDLEMyQzZDOkM/Q0NDR0NLQ05DUkNVQ1hDWkNcQ15DX8NgA0NfQ15DXENbQ1hDVkNT
Q1BDTUNKQ0dDREMnQyxDMUM1QzpDPkNCQ0ZDSkNOQ1FDVENXQ1lDW0NdQ17DXwLDXgFDXENb
Q1lDV0NUQ1JDT0NNQ0pDR0MhQydDK0MwQzVDOUM9Q0FDRUNKQ01DUENTQ1ZDWENaQ1vDXQHD
XgFDXUNcQ1tDWkNYQ1ZDVENRQ09DTUNKQxxDIkMmQytDL0M0QzhDPUNBQ0ZDSUNNQ1BDUkNV
Q1dDWUNbw1wEQ1tDWkNZQ1dDVUNTQ1FDT0NNQxdDHEMhQyZDKkMvQzRDOEM8Q0FDRUNJQ0xD
T0NSQ1RDVkNYQ1rDWwRDWkNZQ1hDVkNVQ1NDUUNPQxJDF0McQyFDJUMqQy9DM0M4Qz1DQUNE
Q0hDS0NOQ1FDU0NWQ1fDWQHDWgNDWUNYQ1dDVUNUQ1JDUEMNQxJDF0McQyFDJUMqQy9DM0M4
QzxDQENEQ0dDS0NOQ1BDU0NVQ1ZDV0NYw1kDQ1hDV0NWQ1VDU0NSQwhDDkMSQxdDHEMhQyVD
KkMuQzRDOEM8Q0BDQ0NHQ0pDTUNQQ1JDVENVQ1bDVwFDWMNXAcNWAUNVQ1NDUkMEQwlDDkMT
QxdDHEMhQyVDKkMvQzRDOEM8Qz9DQ0NGQ0lDTENOQ1BDUkNTQ1RDVcNWAsNVAUNUQ1NDUkMA
QwVDCkMOQxNDGEMcQyFDJUMrQy9DM0M3QztDP0NCQ0VDSENLQ01DT0NQw1IBw1MBQ1TDUwHD
UgFDUQFDAkMGQwpDD0MTQxhDHEMhQyZDK0MvQzNDN0M6Qz5DQUNEQ0dDSUNLQ01DTkNPQ1DD
UQPDUAFDT4EBQwJDB0MLQw9DFEMYQx1DIkMmQypDLkMyQzZDOUM8Q0BDQkNFQ0dDSUNKQ0tD
TENNw04Dw00BgQFDAEMDQwhDDEMQQxRDGUMeQyJDJkMqQy1DMUM0QzhDO0M+Q0BDQkNEQ0ZD
R0NIQ0nDSgWBAkMAQwRDCEMMQxFDFUMZQx1DIUMlQylDLEMvQzNDNkM5QztDPUM/Q0FDQkND
Q0RDRcNGBIEDQwJDBUMJQw1DEUMVQxlDHUMhQyRDJ0MrQy5DMUMzQzZDOEM6QztDPUM+Qz9D
QMNBBIEDQwBDA0MGQwpDDUMSQxVDGUMcQx9DIkMlQyhDK0MuQzBDMkM0QzZDN0M4QzlDOsM7
AcM8AoEEQwBDBEMHQwpDDkMRQxRDGEMbQx5DIEMjQyZDKEMqQyxDLkMwQzFDMkMzQzTDNQLD
NgGBBUMBQwRDB0MLQw5DEEMTQxZDGUMbQx5DIEMiQyRDJkMoQylDKsMsAUMtwy4Bwy8CgQVD
AEMCQwVDCEMKQw1DD0MRQxRDFkMYQxtDHEMeQyBDIUMiQyTDJQFDJsMnAcMoAoEGQwBDAkMF
QwdDCUMLQw1DD0MRQxNDFUMWQxhDGUMaQxtDHEMdQx7DHwHDIAJDIYEHQwBDAkMEQwZDB0MJ
QwpDDEMNQw9DEEMRQxJDE0MUQxVDFsMXAcMYAsMZAYEIQwBDAUMDQwRDBUMGQwdDCEMJQwpD
C8MMAUMNww4Bww8BwxADQxGBCsMAAUMBwwIBQwPDBAHDBQHDBgLDBwPDCAOBGsMABIEfwwAC
gRxDBEMDQwJDAcMAAYEZQwlDB0MGQwRDA0MBQwCB/4H/gf+B/4H/gf+B/4H/gRiA/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8A//8A//8A//8B//mA/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+P/4//j/+P/wAA/wAA/wAA/wAB+YjBgAWIFIACiAGABYgVgAGIAYAFiBWAAYgBgAWI
FgCIAYAEiBmABYgZgAWIGIAGiBiABYgbAIj/iP+I/oAEiBaAAYgBgASIFoABiAGABIgXAIgB
gASIGoADiBuAA4gagASIGYAEiBqABIj/iP+I/YACiByAAogXgAGIAoACiBgAiAKAAogcgAKI
G4ACiByAAogbgAOIGoADiBuAAoj/iP+I/wgAiB4AiB4AiB2AAYgdgAGIHIACiBuAAogbgAOI
G4ACiP+I/4j/CACIHgCIHgCIHUiGAIgdgAGIHIABiByAAogbgAKIHIABiP+I/4j/iAEAiB4A
iB4AiB4AiB2AAYgcgAGIHIACiBuAAogcgAKI/4j/iP8IAIgeAIgeAIgdgAGIHYABiByAAoga
gAOIG4ADiBuAAoj1AIj/iP+ICQCIHgCIHYACiByAAogbgAOIGoADiBqABIgagASIGoADiLmA
AYgZgAWIGIABiP+I6ACIHYACiByAAogbgAOIG4ADiBqABIgZgAWIGYAFiBmABYgZgASItoAD
iBiABogZgAGI/4jmgAKIG4AEiBqABIgZgAWIGYAGiBeAB4gXgAeIF4AHiBeAB4i0gAKIGYAF
iBiABogZgAWI/8OYBEOZQ5pDm0OcQ55DoEOiQ6RDpkOpQ6tDrkOwQ7NDtkO5Q71DwEPEQ8hD
zEPQQ9VD2UPeQ+JD5sObAkOcQ51DnkOfQ6FDokOkQ6dDqUOrQ65DsEOzQ7ZDuEO7Q79DwkPG
Q8pDzUPSQ9ZD2kPfQ+ND6EPsQ/BDnUOeQ59DoEOiQ6NDpUOnQ6lDq0OuQ7BDs0O2Q7lDu0O+
Q8FDxEPIQ8xD0EPUQ9hD3EPgQ+RD6UPuQ/JD9kP6Q6FDokOkQ6VDp0OpQ6tDrUOwQ7JDtkO4
Q7tDvkPBQ8RDx0PLQ85D0kPWQ9pD3kPiQ+ZD60PvQ/RD+UP9gwFDpEOmQ6hDqkOtQ69DskO0
Q7dDukO+Q8FDxEPHQ8pDzkPRQ9RD2EPcQ+BD5EPpQ+1D8UP2Q/qDBEOoQ6pDrUOwQ7NDtkO4
Q7xDv0PCQ8ZDyUPNQ9BD1EPXQ9tD3kPiQ+dD60PvQ/RD+EP9gwSIAUOsQ69Ds0O2Q7lDvEPA
Q8NDx0PKQ85D0kPWQ9lD3UPhQ+VD6EPsQ/FD9kP6gwSIBEOxQ7RDuEO8Q8BDw0PHQ8tDz0PT
Q9dD20PfQ+ND50PrQ+9D80P3Q/yDBIgGQ7ZDukO+Q8JDxkPKQ85D00PXQ9tD4EPkQ+hD7EPx
Q/VD+UP9gwOICUO7Q79DxEPJQ81D0kPWQ9tD30PjQ+lD7UPyQ/ZD+oMEiAtDwEPEQ8pDz0PU
Q9lD3kPiQ+dD7EPyQ/ZD+4MEiA1DxUPKQ9BD1UPbQ+BD5UPqQ+9D9EP6gwSID0PKQ9BD1kPc
Q+FD50PsQ/JD90P8gwOIEUPPQ9VD3EPiQ+hD7UPzQ/mDA4gTQ9RD2kPiQ+hD7kP0Q/qDA4gU
Q9lD30PnQ+1D9EP6gwOIFUPeQ+RD7EPzQ/mDA4gWQ+JD6UPxQ/hD/oMCiBdD5kPtQ/VD/IMC
iBhD6kPxQ/mDAogZQ+1D9EP9gwKIFIAEQ/BD94MCiBKAB0PzQ/qDAogTgAZD9UP8gwKIFIAF
Q/dD/oMCiBUASDWIAkP4gwKIG0P5gwKIG0P6gwKIG0P7gwKIG0P8gwKIG0P9gwKIG0P9gwKI
G4F8QwBDBEMIgRpDA0MHQwxDEEMUgRdDAEMFQwpDD0MTQxhDHEMfgRVDA0MIQwxDEUMWQxtD
H0MkQyhDK4ESQwFDBUMKQw9DE0MYQx1DIkMnQyxDMEM0QzeBEEMCQwdDDEMRQxZDGkMfQyRD
KUMuQzNDOEM8Q0BDQ4ENQwBDBEMIQw1DEkMXQxxDIUMmQytDMEM1QzpDP0NEQ0hDS0NPgQtD
AUMFQwpDDkMTQxhDHEMiQydDLEMyQzdDPENBQ0ZDS0NPQ1NDV0NagQlDAEMFQwpDD0MTQxhD
HUMiQydDLUMyQzdDPUNCQ0dDTENRQ1dDW0NfQ2JDZYEIQwNDCUMOQxNDGEMdQyJDJ0MsQzFD
N0M9Q0JDR0NNQ1JDV0NcQ2JDZkNqQ21DcIEGQwBDBUMLQxFDF0McQyFDJkMrQzBDNUM7Q0FD
R0NMQ1JDV0NcQ2JDZ0NsQ3BDdEN4Q3qBBUMBQwdDDUMSQxlDH0MkQylDLkM0QzlDPkNEQ0pD
UENWQ1tDYUNmQ2xDcUN2Q3pDfkOBQ4SBBEMBQwdDDkMUQxpDIUMmQyxDMUM2QzxDQUNHQ0xD
U0NZQ19DZENqQ29DdUN6Q39DhEOHQ4pDjYEDQwBDB0MNQxRDGkMgQydDLUMzQzhDPkNDQ0lD
TkNUQ1tDYUNnQ21DckN4Q31DgkOIQ4xDkEOTQ5WBA0MGQwxDE0MaQyBDJkMuQzRDOUM/Q0VD
SkNQQ1ZDW0NiQ2hDbkN0Q3pDgEOFQ4pDkEOUQ5dDmkOdgQJDA0MKQxFDGEMfQyVDLEMzQzlD
P0NFQ0tDUENWQ1xDYkNpQ29DdUN7Q4FDhkOMQ5FDlkObQ55DoUOjgQFDAEMHQw9DFkMdQyND
KkMxQzhDPkNEQ0pDUENWQ1tDYUNnQ29DdUN7Q4FDh0OMQ5JDl0OcQ6FDpEOnQ6mBAUMEQwtD
EkMaQyFDJ0MuQzVDPENDQ0lDT0NUQ1pDYENmQ2xDc0N6Q4BDhkOMQ5FDl0OcQ6FDpkOpQ6xD
roEBQwdDDkMWQx1DJEMrQzJDOENAQ0ZDTENSQ1hDXkNkQ2pDcEN4Q35DhEOKQ5BDlkObQ6BD
pkOqQ61DsEOyAUMBQwpDEUMYQx9DJ0MtQzRDO0NDQ0lDT0NVQ1tDYUNnQ21Dc0N7Q4FDh0ON
Q5NDmUOeQ6RDqUOtQ7FDs0O1AUMDQwxDE0MaQyFDKUMwQzZDPUNFQ0tDUUNXQ11DY0NpQ3BD
dkN9Q4NDikOQQ5ZDnEOhQ6ZDrEOwQ7NDtkO4AUMFQw1DFUMcQyNDKkMxQzhDP0NGQ01DU0NZ
Q19DZUNrQ3FDd0N/Q4VDi0OSQ5hDnUOjQ6hDrUOxQ7VDuEO6QwBDBkMPQxZDHUMkQytDMkM5
Q0BDR0NOQ1RDWkNgQ2ZDbENyQ3lDgEOGQ41Dk0OZQ55DpEOpQ65DskO2Q7lDu0MAQwdDEEMX
Qx5DJUMsQzNDOkNAQ0hDTkNVQ1tDYUNnQ21Dc0N5Q4FDh0ONQ5NDmUOfQ6RDqkOvQ7NDtkO5
Q7tDAUMIQxBDF0MeQyVDLEMzQzpDQENIQ09DVUNbQ2FDZ0NtQ3NDeUOBQ4dDjUOUQ5pDn0Ol
Q6pDr0OzQ7dDuUO7QwJDCUMRQxhDH0MmQyxDM0M6Q0FDSENPQ1VDW0NhQ2dDbUNzQ3lDgUOH
Q41DlEOaQ59DpUOqQ69Ds0O2Q7lDu0MDQwpDEkMYQx9DJkMtQzNDOkNBQ0hDT0NVQ1tDYUNn
Q21Dc0N5Q4FDh0ONQ5NDmUOfQ6VDqkOvQ7NDtkO5Q7tDBEMKQxJDGUMfQyZDLUMzQzpDQENI
Q05DVUNbQ2FDZ0NtQ3NDeUOBQ4dDjUOTQ5lDn0OkQ6lDr0OzQ7ZDuUO6QwRDC0MSQxlDH0Mm
QyxDM0M5Q0BDSENOQ1RDWkNgQ2ZDbENyQ3hDgEOGQ4xDk0OYQ55DpEOpQ65DskO1Q7hDuoH/
gf+B/4H/gf+B/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAA
AAAAAAAAAAGIf4AGiBiABogYgAaIGIAGiBiABogYgAaIGIAGiBiAB4j/iP+IdgCIBIABiBcA
iJ+ABYgZgAWIGYAFiBmABYgZgAWIGYAFiBmABogYgAaI/4j/iDcAiB4AiAOAAYjZgASIGoAE
iBqABIgagASIGoAEiBqABYgZgAWIGYAGiP+I/4g8AIj6gAGIHYADiBuAA4gbgAOIG4ADiBuA
BIgagAWIGYAGiP+I/4j/iDgAiB6AAYgdgAGIHYACiByAA4gbgAOIG4AEiBqABYj/iP+I/4h5
AIgegAGIHYACiByAA4gbgASIGoAFiP+I/4j/iJkAiB6AAYgdgAOIG4AEiBqABYgZgAGI/4j/
iP+InYABiB2AAogcgASIGoAGiBiAA4j/iP+I/4ibAIgegAKIHIAEiBqABogYgAOI/4j/iP+I
mwCIHoADiBuABYgZgAeIF4ADiP+IW0P+gwKIG0P+gwKIG0P9gwOIGkP8gwOIGkP7gwOIGkP6
Q/6DA4gZQ/hD/IMEiBhD9UP5Q/6DA4gYQ/ND9kP6Q/6DA4gXQ/BD8kP2Q/lD/YMEiBVD7UPv
Q/JD9UP4Q/yDBIgUQ+lD60PtQ/BD80P2Q/pD/oMDiBND5kPnQ+lD60PtQ/BD80P3Q/uDBIgR
Q+JD40PkQ+VD50PqQ+1D8EPzQ/dD/IMEiA9D30PeQ99D4EPhQ+ND5kPpQ+xD8EP0Q/hD/YME
iA1D28PaAUPbQ9xD3UPfQ+JD5EPoQ+xD8EP0Q/hD/YMEiAtD10PWw9UBQ9ZD10PYQ9pD3UPg
Q+RD50PrQ+9D80P4Q/yDBIgJQ9RD0kPRw9ABQ9FD0kPTQ9ZD2EPcQ99D40PnQ+pD7kPyQ/ZD
+oMEiAdD0UPOQ8zDywNDzUPOQ9FD1EPXQ9pD3kPiQ+VD6UPtQ/FD9kP6Q/6DBIgEQ85Dy0PI
Q8bDxQJDxkPHQ8lDzEPPQ9JD1UPZQ9xD4EPjQ+dD7EPwQ/RD+EP8gwSIAkPLQ8dDxEPCQ8DD
vwFDwEPBQ8JDxUPHQ8pDzUPRQ9RD10PaQ95D4kPmQ+pD7UPxQ/VD+UP9gwRDyEPEQ8BDvkO8
w7oDQ7xDvkPAQ8NDxkPJQ8xDz0PSQ9VD2UPcQ+BD5EPnQ+tD70PzQ/dD+4MCQ8ZDwUO9Q7pD
t0O2Q7VDtEO1Q7ZDt0O5Q7xDvkPBQ8RDx0PKQ81D0EPTQ9dD2kPdQ+FD5UPoQ+xD8EP0Q/dD
+0PEQ79DukO2Q7RDskOww68BQ7BDsUOzQ7VDuEO6Q71Dv0PCQ8VDyEPLQ85D0UPUQ9dD20Pe
Q+JD5kPpQ+1D8EPDQ71DuEO0Q7BDrkOsw6sCQ6xDrkOvQ7JDtEO2Q7lDu0O9Q8FDw0PGQ8lD
zEPPQ9JD1UPZQ9xD30PiQ+ZDwkO8Q7ZDsUOuQ6tDqcOnAUOmQ6dDqEOqQ6xDrkOwQ7JDtUO3
Q7pDvEO+Q8FDxEPGQ8lDzEPPQ9JD1UPZQ9xDwUO7Q7RDr0OrQ6hDpkOkw6MCQ6RDpkOnQ6lD
q0OtQ69DsUOzQ7ZDuEO6Q7xDv0PBQ8RDx0PKQ81Dz0PSQ8FDukOzQ65DqkOmQ6NDocOgA0Oi
Q6NDpUOnQ6hDqkOsQ65DsEOyQ7RDtkO4Q7pDvEO/Q8JDxEPHQ8pDwUO6Q7NDrUOpQ6VDokOf
Q57DnQHDngFDoEOhQ6NDpEOmQ6dDqUOrQ61DrkOwQ7JDtEO2Q7hDukO9Q7/DwgFDu0OzQ61D
qEOkQ6FDnkOcw5sCQ5xDnUOeQ6BDoUOiQ6RDpUOnQ6hDqkOrQ61DrkOwQ7JDtEO2Q7hDukPD
Q7xDtEOuQ6lDpEOhQ55DnMOaA0ObQ5xDnkOfQ6BDoUOiQ6NDpUOmQ6dDqEOpQ6tDrUOuQ7BD
skO0Q8VDvUO1Q69DqUOlQ6FDnkOcQ5rDmQHDmgFDm0OcQ51DnkOfQ6BDoUOiQ6NDpEOlQ6ZD
p0OoQ6lDq0OsQ65DBUMLQxJDGEMfQyVDLEMyQzlDP0NHQ01DU0NZQ19DZUNrQ3FDd0N/Q4VD
i0ORQ5dDnUOiQ6dDrUOxQ7RDt0O4QwVDCkMRQxhDHkMkQytDMUM3Qz5DRUNLQ1FDV0NdQ2ND
aUNvQ3ZDfUODQ4lDj0OVQ5tDoEOlQ6tDr0OyQ7VDt0MEQwpDEEMWQxxDI0MpQy9DNUM8Q0ND
SUNPQ1VDW0NhQ2dDbUNzQ3tDgUOHQ41Dk0OYQ55Do0OoQ6xDr0OyQ7RDA0MIQw9DFUMaQyBD
JkMtQzNDOUNAQ0ZDTENSQ1hDXkNkQ2pDcEN3Q31DhEOKQ49DlUOaQ59DpUOpQ6xDr0OxQwJD
B0MNQxJDGEMeQyRDKUMvQzVDPUNDQ0hDTkNUQ1pDYENmQ2xDc0N5Q39DhUOLQ5FDlkObQ6BD
pEOoQ6tDrUMAQwVDC0MQQxVDGkMgQyZDLEMxQzhDPkNEQ0pDUENVQ1tDYUNnQ25DdEN6Q4BD
hkOMQ5FDlkObQ59Do0OmQ6gBQwJDCEMMQxFDF0McQyFDJ0MtQzRDOUM/Q0VDSkNQQ1ZDXENh
Q2lDb0N0Q3pDgEOGQ4tDkEOVQ5lDnUOgQ6IBQwBDBEMJQw1DEkMXQx1DIkMnQy5DNEM5Qz9D
RENKQ1BDVUNbQ2JDaENuQ3RDeUN/Q4RDiUOPQ5NDlkOZQ5uBAUMBQwVDCUMNQxJDF0McQyJD
KEMtQzNDOEM+Q0NDSUNOQ1RDW0NhQ2ZDbENyQ3dDfEOBQ4dDi0OPQ5JDlIECQwBDBEMIQw1D
EUMWQxtDIUMnQyxDMUM2QzxDQUNHQ0xDU0NZQ15DZENpQ29DdEN5Q35Dg0OGQ4lDjIEEQwJD
B0MLQw9DFEMaQx9DJEMpQy9DNEM5Qz5DRENKQ1BDVkNbQ2FDZkNrQ3BDdUN5Q31DgEODgQVD
AEMEQwhDDUMTQxdDHEMhQyZDK0MxQzZDO0NBQ0dDTENSQ1dDXENhQ2ZDbENwQ3NDd0N5gQdD
AUMFQwtDD0MUQxlDHkMjQyhDLUMyQzhDPUNCQ0hDTUNSQ1dDXENhQ2VDaUNsQ2+BCUMCQwdD
C0MQQxVDGUMeQyNDKEMuQzNDOEM9Q0JDR0NMQ1FDVkNbQ15DYkNlgQtDA0MHQwxDEEMVQxlD
HkMkQylDLkMzQzhDPENBQ0ZDS0NPQ1NDV0NagQ1DAkMGQwtDD0MUQxlDHkMjQyhDLEMxQzZD
OkNAQ0RDSENLQ06BD0MBQwVDCkMPQxNDGEMdQyFDJkMqQy9DNEM4QzxDP0NDgRFDAEMEQwlD
DUMSQxZDGkMfQyNDKEMsQzBDNEM3gRRDAkMHQwtDD0MTQxdDHEMgQyRDKEMrgRZDAEMEQwhD
DEMRQxRDGEMcQx+BGUMAQwVDCUMMQxBDE4EcQwFDBEMIgf+B/4H/gf+B/4H/gf+B/4H/gT+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAAAAAAAAAAAAGIA4ACiBcA
iAKAA4gagASIGYAFiBiABogYgAaIGIAGiP+I/4j8AIgdgAKIHYABiByAAogbgAOIGoAEiBmA
BYgZgAWI/4j/iP+IHQCIHYACiB0AiB2AAYgcgAKIG4ADiBqABIgbgAOI/4j/iP+IPYACiDwA
iB2AAYgbgAOIG4ADiP+I/4j/iF+AAYgcAIgdgAGIHIACiBuAA4gbgAOI/4j/iP+IYACIOwCI
HYABiByAAogdgAGI/4j/iP+IvQCIHYABiB2AAYj/iP+I/4i+AIgdgAGIHYABiP+I/4j/iJ4A
iB2AAYgdAIgeAIj/iP+I/4ifAIgdgAGIHQCIHgCIHgCI/4j/iP+IXkPHQ79Dt0OwQ6tDpkOi
Q59DnEObw5kCQ5pDm8OcAUOdQ57DnwFDoMOhAUOiw6MBQ6RDpUOnQ6hDqUPKQ8JDuUOyQ61D
qEOjQ6BDnUOcw5oCw5sBQ5zDnQHDngHDnwHDoALDoQHDogFDo0OkQ6VDzUPFQ7xDtUOvQ6pD
pkOiQ59DnUOcw5sBw5wBw50Bw54Bw58Gw6ACw6EBQ6JD0EPIQ79DuEOyQ61DqEOlQ6JDoMOe
AUOdw54Bw58Cw6AEw58IQ9RDzEPCQ7xDtUOwQ6xDqEOlQ6NDocOgAsOhA8OiAcOhAsOgAcOf
AcOeBEPYQ9BDxkPAQ7lDtEOvQ6xDqUOmQ6VDpMOjAcOkBsOjAUOiw6EBQ6BDn8OeAcOdAUPc
Q9RDy0PEQ75DuEO0Q7BDrUOqQ6lDqMOnAsOoA8OnAcOmAUOlQ6RDo0OiQ6BDn8OeAUOdQ+FD
2EPPQ8hDwkO9Q7hDtEOxQ69DrcOsB8OrAUOqQ6lDqEOnQ6VDpEOiQ6FDoEOfQ55D5UPdQ9RD
zUPHQ8JDvUO5Q7ZDtEOyQ7HDsAbDrwFDrkOtQ6xDqkOpQ6dDpUOjQ6JDoEOfQ+pD4kPZQ9ND
zUPHQ8NDv0O8Q7lDt8O2BcO1AcO0AUOyQ7FDsEOuQ6xDq0OoQ6ZDpEOiQ6FD70PnQ99D2EPS
Q81DyEPEQ8FDv0O9Q7zDuwXDugFDuUO4Q7ZDtEOzQ7FDr0OsQ6pDp0OlQ6ND9UPtQ+RD3UPY
Q9JDzkPKQ8dDxUPDQ8LDwQTDwAFDv0O+Q71Du0O6Q7hDtUOzQ7BDrUOrQ6hDpkP6Q/JD6kPj
Q91D2EPUQ9BDzUPLQ8lDyMPHBMPGAUPFQ8RDwkPBQ79DvUO6Q7hDtEOxQ69DrEOpA0P4Q+9D
6UPjQ95D2kPWQ9ND0UPPQ87DzQTDzAFDy0PKQ8hDxkPEQ8JDv0O9Q7lDtkOzQ69DrAND/UP1
Q+9D6UPkQ+BD3EPZQ9dD1UPUw9MFQ9JD0UPQQ85DzEPKQ8dDxUPCQ75DukO3Q7NDsIMBQ/pD
9EPvQ+pD5kPiQ99D3UPbQ9rD2QVD2EPXQ9ZD1EPSQ9BDzUPKQ8dDwkO/Q7tDt0OzgwJD+kP1
Q/BD7EPoQ+VD40Phw+ABw98EQ95D3UPcQ9pD2EPVQ9JDz0PMQ8dDw0O/Q7tDtoMDQ/pD9kPy
Q+5D60PpQ+fD5gTD5QFD5EPjQ+JD4EPeQ9tD2EPVQ9FDzEPIQ8NDv0O6CIMDQ/xD+EP0Q/JD
8EPuQ+3D7ATD6wFD6UPoQ+ZD5EPhQ91D2kPWQ9FDzEPHQ8JDvYgBgwND/kP7Q/hD9kP0w/MB
w/IEQ/FD8EPuQ+xD6UPmQ+ND30PbQ9VD0EPLQ8ZDwYgCgwVD/EP7Q/rD+QRD+EP3Q/ZD9EPy
Q+9D7EPoQ+RD4EPaQ9VDz0PKQ8SIA4MMQ/5D/UP8Q/pD+EP1Q/JD7kPpQ+VD30PZQ9NDzUPH
iAWDDkP+Q/tD90PzQ+9D6kPjQ91D10PRQ8qIBoMPQ/xD+EPzQ+5D50PhQ9tD1EPNiAqDDEP9
Q/hD80PrQ+VD3kPXQ9CIEoMFQ/1D90PvQ+lD4kPaQ9OIFIMEQ/tD80PsQ+VD3UPViBWDBEP3
Q+9D6EPgQ9eIFoMDQ/pD8kPqQ+JD2YgXgwJD/UP1Q+1D5EPbiBiDAkP3Q+9D5kPdiBiDAkP5
Q/FD6EPegf+Bn0MAgR5DBYEeQwpDA4EdQxBDCEMAgRxDFUMOQwZDAIEbQxpDE0MLQwVDAIEa
QyBDGUMRQwtDBkMBgRlDJUMeQxdDEUMMQwhDBEMAgRdDK0MkQx1DF0MSQw5DCkMHQwRDAsMA
AYETQzBDKkMjQx1DGUMUQxFDDUMLQwlDB0MGwwUDwwQBQwNDAUMAgQpDNUMvQylDI0MfQxtD
F0MUQxFDD0MNwwwBwwsDQwpDCUMHQwVDAkMAgQhDO0M1Qy5DKUMlQyFDHUMaQxhDFkMUQxPD
EgHDEQJDEEMPQw1DC0MIQwVDAYEHQ0BDOkM0Qy9DK0MnQyRDIUMeQxxDGsMZAcMYAcMXAUMW
QxVDE0MQQw5DCkMGQwGBBkNFQ0BDOkM1QzFDLUMqQydDJEMiQyFDIEMfwx4Bwx0BQxxDGkMY
QxZDE0MPQwtDBkMBgQVDSUNFQz9DO0M3QzNDMEMtQytDKUMnQyZDJUMkwyMBQyJDIUMgQx1D
G0MYQxRDD0MKQwWBBUNOQ0lDRENAQzxDOUM2QzNDMUMvQy1DK8MqAUMpwygBQyZDJUMiQyBD
HEMYQxRDDkMJQwKBBENSQ05DSUNFQ0JDPkM7QzlDNkM0QzJDMUMwQy9DLsMtAUMrQypDJ0Mk
QyFDHEMYQxJDDEMFgQRDVkNTQ05DSkNHQ0RDQUM+QzxDOkM4QzZDNUM0QzNDMkMxQzBDLkMr
QyhDJEMgQxtDFkMPQwhDAIEDQ1pDV0NSQ09DTENJQ0ZDQ0NBQz9DPUM7QzpDOUM4QzdDNUM0
QzJDL0MsQyhDI0MeQxlDEkMLQwKB/4H/gf+B/4H/gf+B/4H/gQOA/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAAAAAAAAAAAAGIAYAEiBqABYgZgAaIGIAGiBiABYga
gAKIHQCI/4j/iFeAAYgegAGIHgCIHgCIHgCIIYAEiBqABIgbgAOIG4AEiBqABYgZgAaIGIAE
iBqAA4gcgAGI/4j/iHgAiB4AiIFI54ACiB2AAogcgAOIG4AFiBmABYgZgAOIG4ACiByAAYj/
iP+I/4gcgAGIHoACiB2AAogcgASIGoAFiBmAA4gbgAKIHIABiP+I/4j/iD2AAYgdgAKIHIAE
iBqABYgZgASIGoACiB0AiP+I/4j/iD4AiB6AAYgdgAOIG4AEiBqABYgZgAOIG4ABiP+I/4j/
iD0AiB8AiB6AAogcgAOIG4AEiBqABIgagAKIHACI/4j/iP+IPgCIHoACiByAA4gbgASIGoAG
iBmAA4gbgAGIHQCIpACI/4j/iHcAiB6AAogdgAKIHIADiBuABYgZgAWIGYADiBuAAogdAIge
AIhBgAKIHYABiB4AiB9IkYj/iP+INgCIHwCIHoACiByAA4gbgAWIGYAGiBmABYgZgAOIG4AD
iBuAA4gcgASIG4ADiByAA4gcgAKIHYABiB4AiD8AiP+Ix4MCQ/tD8kPpQ9+IBgCIEYMBQ/1D
80PqQ+CIBwCIEIMBQ/5D9EPrQ+GIB4ACiA6DAUP+Q/VD60PhiAeAA4gNgwJD9UPrQ+GIB4AE
iAyDAkP1Q+tD4YgIgAWICoMCQ/VD60PhiAiABYgKgwFD/kP1Q+tD4YgIgAWICoMBQ/1D9EPq
Q+CICIAFiAqDAUP8Q/ND6UPfiAiABYgKgwFD+0PyQ+hD3ogJgAWICIMCQ/lD8EPnQ92ICoAE
iAiDAkP4Q+9D5kPciAuAA4gIgwFD/kP2Q+1D5EPbiAyAAogHgwJD/EP0Q+tD40PaiAyAAogH
gwJD+kPyQ+pD4UPZiA2AAogGgwJD+EPwQ+hD4EPXiA6AAYgFgwJD/kP1Q+5D5kPeQ9aIDoAB
iAWDAkP8Q/ND7EPkQ91D1YgVgwND+kPxQ+pD40PbQ9SIFYMCQ/5D90PvQ+hD4UPaQ9OIFIMD
Q/xD9UPtQ+dD4EPZQ9OIFIMDQ/pD80PsQ+VD30PYQ9KIFIMCQ/5D+EPyQ+pD5EPeQ9hD0ogT
gwND/UP3Q/BD6UPjQ91D10PSiBODA0P7Q/VD70PoQ+JD3UPXQ9KIE4MDQ/pD9EPvQ+hD4kPc
Q9dD0ogTgwND+UP0Q+5D50PiQ9xD10PSiBKDA0P+Q/lD80PuQ+dD4kPdQ9hD04gSgwND/kP5
Q/ND7kPnQ+JD3UPYQ9SIEoMDQ/5D+UPzQ+5D6EPjQ95D2UPViBKDA0P+Q/lD80PuQ+hD40Pf
Q9pD1kNeQ1pDVkNTQ1BDTUNKQ0hDRkNDQ0FDQEM+Qz1DPEM7QzlDOEM2QzJDL0MrQyZDIUMb
QxRDDUMEgQNDYUNeQ1pDV0NUQ1FDT0NMQ0pDSENGQ0RDQkNBQ0BDPkM9QztDOUM1QzJDLkMp
QyNDHUMXQw9DBYEDQ2RDYUNeQ1tDWENVQ1NDUENOQ0xDSUNIQ0ZDRENDQ0FDQEM+QztDOEM0
QzBDK0MlQx9DGEMRQweBA0NmQ2RDYUNeQ1tDWUNWQ1RDUUNPQ01DS0NJQ0dDRkNEQ0JDQEM+
QzpDNkMyQy1DJ0MgQxlDEkMIgQNDaENmQ2NDYUNeQ1xDWUNXQ1RDUkNQQ05DTENKQ0hDRkNE
Q0JDP0M7QzdDM0MuQyhDIUMaQxJGQEajgQJDakNoQ2VDY0NhQ15DXENZQ1dDVUNSQ1BDTkNM
Q0pDSENGQ0NDQEM8QzhDNEMuQyhDIkMbRkpGpUbjgQJDa0NqQ2dDZUNjQ2BDXkNcQ1lDV0NU
Q1JDUENNQ0tDSUNHQ0RDQUM9QzlDNEMuQyhDIkZURqVG6Ub3gQJDbENrQ2lDZ0NkQ2JDYENd
Q1tDWUNWQ1NDUUNPQ0xDSkNHQ0VDQUM9QzlDNEMuQyhGWkatRu9G8UbXgQJDbUNsQ2pDaENm
Q2RDYUNfQ1xDWkNXQ1RDUkNPQ01DSkNHQ0VDQUM9QzhDM0MuRoVGyEbwRuxG5IEDQ21DbENq
Q2lDZ0NkQ2JDYENdQ1pDV0NVQ1JDT0NNQ0pDR0NEQ0FDPEM3QzJGMEaxRvlG+Mb8AYEDQ21D
bENrQ2lDZ0NlQ2NDYENeQ1tDV0NVQ1JDT0NMQ0lDRkNDQz9DO0M2QzFGlkbTRv1Gz0bQRs+B
A0NtQ2xDa0NpQ2dDZUNjQ2BDXkNbQ1dDVENRQ05DS0NIQ0VDQkM+QzlDNEaBRtFG+0baRpXG
UQGBA8NsAUNqQ2lDZ0NlQ2JDYENdQ1pDV0NUQ1FDTUNKQ0dDRENAQzxDN0ZhRsZG9UbpRqNG
NEMLQwKBA0NsQ2tDakNoQ2ZDZENiQ19DXENaQ1ZDU0NPQ0xDSUNFQ0JDPkM6RjxGtEbmRvZG
rUZOQxFDCUMAgQNDa0NqQ2lDZ0NmQ2NDYUNeQ1xDWENVQ1FDTkNKQ0dDQ0NAQzxDOEaPRttG
+kbERodGHkMOQweBBENqQ2lDaENmQ2VDYkNgQ11DWkNXQ1NDUENMQ0lDRUNBQz5DOkZdRslG
9EbkRvhG2EZvQwxDBYEEQ2lDaENnQ2VDY0NhQ19DXENZQ1ZDUUNOQ0pDR0NDQz9DO0M3RqVG
3kb1RvZG8kbtRpZDCUMCgQTDZwFDZUNkQ2JDYENdQ1pDV0NUQ1BDTENIQ0RDQUM9QzlGdkbP
RvpG9UbgRtlG9kayRiRDAIEEQ2ZDZUNkQ2NDYUNeQ1xDWUNWQ1JDTkNKQ0ZDQkM+QzpDNkai
xu8BRuhGr0bPRvNGt0YvgQVDZUNkQ2NDYUNfQ11DWkNXQ1RDUENMQ0hDRENAQzxDOEZgRstG
/UbuRrJGT0bGRupGsUYwgQVDZENjQ2FDYENeQ1tDWENVQ1JDTkNKQ0ZDQkM+QzlDNUaRRu9G
+0bSRt5GrEbLRvdGwkY+gQXDYgFDYENeQ1xDWkNXQ1RDUENNQ0hDRENAQztDN0Y6Rr9G9kb4
RtFG+kbMRt1G9EargQbDYQFDX0NdQ1tDWENVQ1JDT0NLQ0ZDQkM+QzlDNUZwRtRG9EbsRuRG
+kbaRuVG8UaegQZDYUNgQ15DXENaQ1dDVENRQ01DSUNEQ0BDPEM3QzNGhUboRvVG4Ub4xvEB
Ru1G7EaPgQZDYENfQ11DW0NZQ1ZDU0NPQ0xDSENDQz9DOkM2QzFGtEb6RvFG3Ub5RupG60b0
RtmBB0NfQ15DXENaQ1hDVUNSQ05DSkNHQ0JDPUM5QzRGW0bRRvhG40bzRupG+kb8RvNGyoEH
Q19DXkNcQ1pDV0NUQ1FDTUNJQ0VDQEM8QzhDM0aORulG+kbCRvVGyUbvRvlG8kb4gQdDX0Ne
Q1xDWUNXQ1RDUENNQ0lDRUNAQztDN0MyRpdG50b2RtFG6Ea/RvNG+UbxRtmBB0NfQ15DW0NZ
Q1ZDU0NQQ0xDSENEQz9DOkM2QzFGskb4RvFG4EbxRs1G+kbrRvZGr4EHQ2BDXkNcQ1lDVkNT
Q1BDTENIQ0RDP0M6QzZGNUa7RvVG+0b4RuNGw0b1RvNG8kbQgQdDYENeQ1xDWUNWQ1NDT0NM
Q0hDQ0M+QzpDNUY0RrBG6UbxRvlG1Ea4Ru9G80bsgQhDYUNfQ1xDWkNWQ1NDUENMQ0hDQ0M+
QzpDNUZMRstG+kbmRu9GvEatRu1G8EbvRvOBRgaBHYYBgRyGAoEbhgOBGoYEgRiGBoEXhgeB
FoYIgRaGCIEVhgmBFIYHAYYBgROGBIEEhgGBE4YEgQUGgRKGBIEZhgaBGIYGgReGB4EXhgeB
FoYIgRaGCIEWhgiBFYYJgRWGCYEEhgGBDoYQgQ2GEYENhhGBDYYQgQ6GCoEUhgqBFIYKgROG
DIFERu+BHEbpRvQGgRtG5IYCgRpG6YYDgRlG1IYEgRhG0oYFgRZG7kbhhgaBFkbjhgeBFUbm
hgiBFEbiRviGCIEURuVG+4YIgRNG34YKgRJG+oYLgRFG64YMgRFG8oYMgRBG84YNgRBG84YH
RvqGBIEPRvSGB0b0gRVG8oYHRvWBFUbrhgdG9IEURvGGCYEURvSGCYEEBoEORvKGCIEDhgKB
DUb1hhCBDUbyhhCBDUbyhhCBDIYSgQyGD4EPhguBE4YMgRKGDIEFgD5Gu4AdRqkGgBxGmkb3
BoAbRopG7oYBgBpGWkbORvWGAYAZRkxGyUbeRvmGAYAXRkRGmkbgRvRG+4YCgBdGokbiRv2G
BIAWRhdGs0b0hgWAFkYxRrpG/YYFgBZGVEbPhgaAE0YXAEYaRo5G74YGgBJGPkZNRjNGYEbJ
hgeAEUZKRltGXUZpRrNG+YYHgBFGbEZNRldGkUbghgiAEEabRnZGTEZgRq5G/IYIgA9GNkan
Rn1GaEaPRs2GA0byRupG+YYCgA9GuUayRpVGn0bDRvCGAkb4gBRGGUarRqpGrUbSRvCGA0b3
gBRGOUa1RrdGw0bshgVGDYATRtlG3kbdRuSGBkYMgAJGG0ZrgA1GO0b0RvFG9IYHRh8ARhhG
ikb7BoANRleGCUb1RqZGxUblhgKADUa+RvyGD4AMRhZG2Eb5hg+ADEaMRudG9Ub5hg6AC0Yk
RuhG8kbuRvWGDoALRjxG9EbvRu1G+oYLRuNGxUZbgAtGWEbvRu1G6oYIRrNGUEYwRg+ADkZg
xuoBRu+GCUZLgBBGeUb5RvZG+4YJRtxGHoCCRnKAHUYzRpGAHUYgRoKAHUYURoqAHUZlRsWA
GsZpAUaIRtcGgBlGaUatRsNG54YBgBlGrEbURvKGAoAYRiRGwEbohgOAGEZvRtNG+IYDgBdG
C0amRuSGBIAXRodGzEb7hgSAFkZYRsBG7YYFgBZGs0bXRvaGBYAVRktGzkbfRvqGBYAVRqlG
0UbnBkbuRtdG84YCgBRGPkbcRveGAUbwRt9G+4YCgBNGSEbdhgRG6YYDgBJGG0behgVG/YYD
gBFGFEavhguAEEYtRqVG94YLgA9GHkZyRsmGDIAQRm9G34YMgBBGQ0bchgyAEEZORuqGDIAQ
RnNG+oYMgBBGn4YNgA9GAEbChg2AD0Y3RsmGDYD/gB5GCoAdRkpGpIAcRlZGukblgBtGCEaZ
RuEGgBtGUka+RvEGgBpGEEaKRt5G9AaAGkZIRq5G6Ub7BoAZRgBGdUbHRu2GAYAZRjNGnEbb
RvSGAYAZRlVGtUbrRvuGAYAYRgpGdkbDRvCGAoAYRllGmkbSRviGAoAVRlFGYUZ3Rp5Gu0bh
hgOAFEZ9RsdGwUbDRslG20b0hgOAE0ZIRsRG9UbwRulG60b0hgSAE0aORt6GAUb6RvyGBYAS
Ri9GskbfhgmAEkY7RsyGCoASRiJGuYYKgBJGQEbGhgqAEkZ1RuVG8YYJgBFGGUaGRu9G+YYJ
gBFGYUaYRvVG+YYJgBFGW0aNRvJG9oYJgP+A/4D/gDRGA4AeRgGAHkYBgP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4CJAAAAAAAA
AAAAAAABiAGABIgagASIGoAEiBmABYgZgAaIGIAGiBeACIgWgAiIFoAJiBaAB4gYgAWIEACI
CYACiA6ACYgEAIgKgA6IEoAMiBOACIgYgAKI/4iGgAiIFoAKiBOADYgQgA+IDoACiAGAA4gb
gAOIG4ADiBuABIgagASIGoAEiBmABogXgAiIFoAJiBWACogVgAmIF4AFiA2AB4gEgAOIB4AP
iAUAiAqADYgTgAuIFYADiP+IpYAIiBWAC4gSgA6ID4ACiAKAAYgdgAGIHYABiB2AAogcgAKI
G4AEiBqABIgZgAaIF4AIiBaACYgVgAuIFYALiAmAA4gHgASIBYAPiAWAAogIgA6IEoAMiBWA
BYj/iMKACYgUgANIfIgDgAOIEYACiEMAiB2AAYgdgAGIHYACiBuABIgZgAWIGIAIiBaACYgV
gAqIFYAMiBSADogBgAiIBoAFiAWAD4gFgAKICEj8gAyIFIAKiP+I3YABiB2AAYiCAIgegAGI
HIADiBuABIgZgAaIF4AIiBaACogUgAyIFIAOiAWAA4gIgBiIE4AOiBSACogXgAGI/4jEAIgd
gAGIggCIHgCIHYACiByAA4gagAaIF4AIiBaACogUgAyIEoAPiAdI64gPgBGIEoAOiBaAC4gX
gAeI/4jeAIiiAIgdgAKIG4AEiBmABogYgAiIFoAJiBWAC4gTgAGIA4AIiByADIgUgAyIFYAM
iBlIwIAGiP+I3gCIoQCIHYACiByAA4gagAaIGIAIiBaACYgVgAuIHYAEiByAC4gVgAqIFoAK
iB2AA4gggAGI/4j/iGAAiB6AAogbgASIGoAGiBiACIgWgAmIHYADiB6AAogegAWIGoAJiBeA
CYgWgAKIBQCI/4j/iISAAYgdgAKIHIAEiBqABogYgAiIFoAJiB6AAogegAKIHoAEiBuACIgX
gAiIGIADiByAAYj/iN6DA0P+Q/lD9EPvQ+lD5EPfQ9tD14gSgwRD+UP0Q+9D6UPlQ+BD3EPY
iBKDBEP6Q/VD8EPqQ+VD4UPdQ9mIEoMEQ/pD9UPwQ+pD5kPiQ95D2ogSgwRD+kP1Q/BD60Pm
Q+JD3kPbAIgRgwRD+kP1Q/FD60PnQ+ND30PcgAKID4MEQ/pD9UPxQ+tD50PjQ+BD3IAEiA2D
BEP6Q/VD8UPsQ+dD5EPgQ92ABogLgwRD+kP1Q/FD7EPoQ+RD4EPdgAiICYMEQ/pD9UPxQ+xD
6EPkQ+BD3YgEgAWIB4MDQ/5D+kP1Q/BD60PnQ+RD4EPdiAiAAogGgwND/kP5Q/VD8EPrQ+dD
40PgQ92ICoACiASDA0P+Q/lD9EPwQ+tD50PjQ+BD3YgMgAOIAYMDQ/1D+EP0Q+9D6kPmQ+ND
30PciA2ABIMDQ/1D+EPzQ+9D6kPmQ+JD30PbiA6AA4MDQ/xD90PyQ+5D6UPlQ+FD3kPbiA+A
AoMDQ/tD90PyQ+1D6EPkQ+BD3UPaiBCAAYMDQ/tD9kPxQ+xD50PjQ99D3EPZiBGDBEP6Q/VD
8EPsQ+ZD4kPeQ9tD14gRgwND/kP5Q/RD8EPrQ+VD4UPdQ9pD1ogRgwND/kP5Q/RD70PqQ+RD
4EPcQ9hD1YgRgwND/UP4Q/ND7kPpQ+ND30PbQ9dD1IgRgwND/EP3Q/JD7UPoQ+ND3kPaQ9ZD
0ogRgwND/EP3Q/FD7EPnQ+JD3UPZQ9VD0YgRgwND+0P2Q/FD60PmQ+FD3EPXQ9NDz4gRgwND
+0P1Q/BD60PmQ+BD20PWQ9JDzogRgwND+kP1Q+9D6kPlQ99D2kPVQ9FDzYgRgwND+kP0Q+9D
6UPkQ95D2UPUQ9BDy4gRgwND+UP0Q+5D6UPjQ91D2EPTQ89DyogRgwND+UPzQ+5D6EPjQ9xD
10PSQ85DyYgRgwJD/kP5Q/ND7UPoQ+JD3EPXQ9JDzUPIiBGDAkP+Q/lD80PtQ+dD4kPbQ9ZD
0UPMQ8dDYkNgQ11DWkNXQ1NDUENMQ0hDQ0M+QzpDNUZGRslG/EbwRvtGwkagxu0BRupG8oEH
Q2JDYENdQ1pDV0NUQ1BDTENIQ0RDPkM6QzVGU0bQRvxG90b5Rr9GlkbsRvRG3kb5gQdDY0Nh
Q15DW0NXQ1RDUENMQ0hDREM+QzpDNUZFRshG+0b4RvtG6EaPRulG+UbORvqBB0NkQ2JDXkNb
Q1hDVENQQ0xDSENEQz5DOkM1RkxGysb3AUb2RvtGwUboRvtGv0bvgQdDZUNiQ19DW0NYQ1RD
UENMQ0hDREM+QzpDNUMwRrlG+Ub4RvZG80brRupG+ka6Ru2BB0NmQ2NDX0NcQ1hDVENQQ0xD
SENEQz5DOkM1QzBGkkbmRvZG8Ub1RvZG6Ub5RrRG9IEHQ2dDZENgQ1xDWUNVQ1FDTENIQ0ND
PkM5QzVDMEaRRutG+kbtRupG8UboRvRGpEbqgQdDZ0NkQ2BDXUNZQ1VDUUNMQ0hDQ0M+QzlD
NUMwRo1G7UbwRudGz0b0RvFG7EaSRtOBB0NoQ2VDYUNdQ1lDVUNRQ0xDSENDQz5DOUM0QzBG
fkbnRvZG8Ua8xvIBRu1Gt0begQdDaUNmQ2FDXUNZQ1VDUUNMQ0hDQ0M9QzlDNEMvRm1G30b6
RvlG2kbnRvRG9kbeRtCBB0NqQ2ZDYkNeQ1lDVUNRQ0xDR0NDQz1DOEM0Qy9GW0bVRvxG2Ebr
RuBG+EblRu6BCENrQ2dDYkNeQ1pDVUNRQ0xDR0NCQz1DOEMzQy9GNka5RvpG20bsRsxG/Ebj
RvmBCENsQ2hDY0NeQ1pDVUNQQ0xDR0NCQzxDOEMzQy5DKUaYRvBG7Eb6Rt5G6EbSRtWBCENt
Q2lDY0NfQ1pDVUNQQ0tDR0NCQzxDN0MyQy5DKUZ+Rt1G9UbXRvBG7kbvRraBCENuQ2lDZENf
Q1pDVUNQQ0tDRkNBQztDN0MyQy1DKEZeRstG9kbPRvpG5kbxRp6BCENvQ2pDZENfQ1pDVUNQ
Q0tDRkNBQztDNkMxQy1DKEYtRrFG6kbkRvhG40byRrGBCENvQ2tDZUNfQ1pDVUNQQ0tDRkNB
QztDNkMxQyxDJ0MiRo1G40bvRuNG+Eb1RsKBCENwQ2tDZUNgQ1pDVUNQQ0tDRUNAQzpDNUMw
QytDJ0MiRmFG0kbtRsxG7Ub0gQlDcUNsQ2VDYENaQ1VDUENKQ0VDQEM6QzVDMEMrQyZDIUMd
RpxG8kbqRutG7YEJQ3JDbENmQ2BDW0NVQ1BDSkNFQz9DOUM0Qy9DKkMmQyFDHEZiRsZG/Eba
RvqBCUNyQ21DZkNgQ1tDVUNPQ0pDREM/QzlDNEMvQypDJUMgQxtGJkamRtxG6EbtgQlDc0Nt
Q2ZDYENbQ1VDT0NKQ0RDP0M5QzNDLkMpQyVDIEMbQxZGeUbfRupG4oEJQ3NDbkNmQ2FDW0NV
Q09DSUNEQz5DOEMzQy5DKUMkQx9DGkMVRitGuEb7RtyBCUN0Q25DZ0NhQ1tDVUNPQ0lDREM+
QzhDM0MuQylDJEMfQxpDFUMQRoNG50bygQlDdENuQ2dDYUNbQ1VDT0NJQ0RDPkM4QzJDLUMo
QyNDHkMZQxRDD0ZrRs6BCkN0Q25DZ0NhQ1tDVUNPQ0lDQ0M+QzdDMkMtQyhDI0MeQxlDFEMP
Rj5GwIEKQ3VDbkNnQ2FDW0NVQ09DSUNDQz5DN0MyQy1DKEMjQx5DGUMUQw5DCEaTgQpDdUNv
Q2dDYUNbQ1VDT0NJQ0NDPkM3QzJDLUMnQyJDHUMYQxNDDkMIRleBCkN1Q29DZ0NhQ1tDVUNP
Q0lDQ0M+QzdDMkMsQydDIkMdQxhDE0MOQwdGJoEKQ3VDb0NnQ2FDW0NVQ09DSUNDQz5DN0My
QyxDJ0MiQx1DGEMTQw5DB0MCgQpDdUNvQ2dDYUNbQ1VDT0NJQ0NDPkM3QzJDLEMnQyJDHUMY
QxNDDUMHQwKBCkN1Q29DZ0NhQ1tDVUNPQ0lDQ0M+QzdDMkMsQydDIkMdQxhDE0MNQwdDAYEY
hgyBEYYNgRKGDYEQhg+BEIYPgQ+GEIEOhgsBhgSBDYYLAYYEgQ2GC4EBhgOBDYYLgQOGAYEN
hguBBAaBDoYLgROGC4EThguBE4YLgRSGCoEDBoEPhguBAYYBgQ+GD4EQhg6BEIYOgRGGDIES
hgyBE4YLgROGDIEShgyBE4YLgROGC4EThguBFIYKgRSGCoEVhgmBFYYJgQyGDYERhg6BEIYP
gQ+GEIEOhhGBDkbwhhCBDUb4hhCBDYYRgQ2GDAGGA4ENhgyBAYYCgQ2GDIEChgGBDYYMgQMG
gQ2GDIEThgpG+YEThguBE4YMgQGGAYEPhgsBhgKBD4YPgQ+GD4EQRvGGDYEQRuiGDIESRvOG
Ckb8gRJG+YYLRvWBEYYMRvuBEoYMgRKGDIEThguBE4YLgROGC4EUhgqBFIYKgRVG/IYIgAtG
cIYNRrGAD0aEhg5GhoAORm6GD0aCgA1GfIYQRnuADEZLhhFGcYALRhVGpIYRgAxGtIYRgAxG
2IYRgAxGzIYMRreGA4AMRq6GDEZhRq6GAoAMRpCGDEZyAEaLhgGADEZohgRG/oYGRoaAAUZu
BoAMRiuGA0b5RveGBkaWgAJGVYANRt+GAkb5RvyGBkaYgBFGoYYCRv2GB0a6gAFGQka/gA1G
T4YMRkNGkoYBgA5G44YLRuCGAoAORpCGD4AORi6GD4APRkdG+YYNgBBGg0bmhgtG9IARRr+G
C0aegBFGwoYMgBFG14YMgBFGpYYMgBFGYIYMgBFGG0bhhguAEkalhguAEkZWhguAE0ashgqA
E0ZJhgqAFEabhgVG+4YCgA1GHkY6RndG2YYNgAtGAkZBRmFGcUaZRudG+4YMgAxGV0Z0RoJG
nkbSRvJG34YLgAxGUUZzRnhGgUa1Rt1GxUbyhgqADUY/RldGY0aRRrtGuUbZhgqADUYhRk1G
T0Z7RqBGqEbWhgqADUZORnNGZ0ZxRpFGpUbLhgqADUaPRq5GnEZ8RmBGn0bRhgqADEYwRsxG
30bMRnpGRUaGRsmGCoAMRkRG9wZG6UaGRk9GXEa8hgqADEY+hgJGm0YlRiBGoEb3hgmADEYa
RuaGAUaDgAFGgkbwhgmADUa4Bkb1RmaAAUZxRuGGCYANRoUGRtdGTYABRn9G9oYFRviGAoAN
Rk4GRsNGTwBGBkachgqADUYDRqNGqUZgRhtGT0bHhgqADkZDRphGcEZPRoBG4oYKgA9GikaH
Rn5GrEb4hgqAEEZQRolGvkb8hgqAEUYZRoxG5IYKgBJGOEbJRvGGAUb1RvSGBYASRgNGwkbk
Bkb3RuVG6oYFgBJGEUbJRuVG9EbzRuFG6IYFgBJGXEbdRvVG8kbtRtxG74YFgBJGwEb2RvxG
7kbjRtpG9IYFgBJGqUb2BkbvRt9G0UbihgWAEkZjRu1G9UblRtNGu0bShgWAEkYyRvFG7Ubi
RrlGpEbFhgWAE0aaRt1G1kauRpdGvUb7hgSAE0YyRrlGs0auRptGvkb0RvjG+QFG+AaAFEY8
RoFGn0awRrFGpEaQRpdGpEbcBoAVRjtGcEaLRn9GQoABRiNGuQaAEUYjRk5G5EbzhgmAE0a4
RvCGCYATRk5Gzkb5hgiAFEadRuJG+oYHgBRGd0bHRuaGB4AURkZGrUbjhgeAFEYnRqBG7oYH
gBRGG0a2RvSGB4AURihGwUb3hgeADkYHgARGEkaxhgiADUY3RlmABUaiRvRG/Eb2RvyGBIAN
RjlGgEYZgARGlUbjRutG5kbqRvWGA4ANRhRGSYAFRppGzEbRRsdG0UbohgOADkYfgAVGmkaq
Rq9GqEa2RtpG9oYCgBRGA0aeRolGfUaCRpxG0Eb7hgKAFEY5RpZGekZhRmxGlkbThgOAFEZh
RplGd0ZrRoFGo0bbhgOAFEZjRp5GbkZaRoFGpkbbhgOAFEZbRp5GXkY7RmhGnUbUhgOAFEY2
RpBGNUYBRiVGdUa3RuxG7Ub1BoAVRlhGA4ABRjRGk0bLRtpG4UbpgBVGC4ACRgxGdkauRsVG
yEbZgBlGAUZ9Rq1Gw0bCRsqAGUYmRqVGxkbTRspGy4AZRj1GukbeRulG3UbTgBlGF0ajRuVG
/EbvRtyAGkaFRthG/AZG54AaRndGxkb7BkbsgBpGXEaORnpGEUaXgB5GA4AeRh+AHkZpgFZG
AgBGAoAfRgKAH0YCgJtGAYD/gAVGAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4C/AAAAAAAAAAAAAAABgA+ICoAGiASACogH
gAWICYAJiAOAB4gLgBOIDIASiA6ADogSgAqIF4AFiP+IxYABiB2ABIgagAWIGYAGiBiABogY
gAaIEACIBIAIiA+ACAiABYgOgAmIAYAEiA2ACogUgAyIBYAGiAyAA4gJgAWICYAFiAuABogF
gAaIDIASiA6AEIgPgA2IE4AJiBiABIj/iKUAiB6ABIgagASIGoAEiBqABYgZgAWIGYAFiBCA
AYgEgAeID4AJCIAEiA+ACYgUgAmIFEjwgAeIDIACiA6AA4gKgAOIC4AEiAyABIgHgAWIDYAF
iAOAB4gOgA+IEYAMiBSACIgYgASI/4iFAIgegAKIHIACSGCIG4ADiBuAA4gbgASIGoAEiBEA
iAeABIgQgAKIB4ADiBCACYgUgAmIFYAHiBaAB4gfgAOICwCIDUidgAOIDYABiAmABYgOgAOI
BYAGiA+ADogRgAuIFYAIiBiABIj/iIUAiB6AAYgdgAGIHYACiByAAogcgAKIHIACiFKAA4gC
AIgWgAeIF4AGiBeABoghgAKIG4ADiBqABIgOgAKIB4AFiA+AA4gEgASIE4AKiBWAB4gZgASI
/4jFAIgeAIgegAGIHYABiJWAA4gZgASIGYAEiCOAAYgcgAKIG4ADiA8AiAmAA4gRgAGIBoAD
iBOAAogEgAGIFoAHiBiABIgcgAGI/4j/iMAAiByAAogjgAGIHYABiByAAogbgAKIEQCICQCI
FACIH4ABiB6AAYgfAIj/iP+I/4gHAIgeAIgdAIhSAIgfAIgfAIgfAIj/iP+I/4jcAIj/iP+I
/4j/iP+I/4j/iB2DAkP+Q/hD80PtQ+dD4UPbQ9VD0EPLQ8eIEYMCQ/5D+EPzQ+1D50PhQ9tD
1UPQQ8tDxogRgwJD/kP4Q/JD7UPnQ+FD2kPVQ9BDykPGiBGDAkP+Q/hD80PtQ+dD4UPaQ9VD
z0PKQ8WIEYMCQ/5D+UPzQ+1D50PhQ9pD1UPPQ8pDxYgRgwND+UPzQ+1D50PhQ9pD1UPPQ8pD
xYgRgwND+UPzQ+1D50PhQ9tD1UPQQ8pDxYgRgwND+UPzQ+1D6EPiQ9tD1UPQQ8tDxogRgwND
+kP0Q+5D6EPiQ9tD1kPQQ8tDxogRgwND+kP0Q+5D6UPjQ9xD1kPRQ8xDx4gRgwND+0P1Q+9D
6UPjQ91D10PSQ81DyIgRgwND+0P1Q/BD6kPkQ91D2EPTQ85DyYgRgwND/EP2Q/BD6kPlQ95D
2UPUQ89DyogRgwND/EP3Q/FD60PmQ99D2kPVQ9BDzIgSgwJD/UP3Q/JD7EPnQ+BD20PWQ9FD
zYgSgwJD/kP4Q/ND7UPoQ+FD3EPXQ9NDz4gSgwND+UPzQ+5D6UPiQ91D2UPUQ9CIEoMDQ/pD
9EPvQ+pD40PfQ9pD1kPSiBKDA0P6Q/VD8EPrQ+VD4EPbQ9dD04gSgwND+0P2Q/FD7EPmQ+FD
3UPZQ9WIEoMDQ/xD90PyQ+1D50PiQ95D2kPXiBKDA0P8Q/dD8kPtQ+hD40PfQ9xD2IgSgwND
/UP4Q/ND7kPpQ+RD4EPdQ9qIEoMDQ/1D+EPzQ+5D6UPlQ+FD3kPbiBKDA0P9Q/hD80PvQ+pD
5kPiQ99D3IgSgwND/EP4Q/ND70PqQ+ZD4kPfQ92IEoMDQ/xD90PzQ+5D6kPmQ+ND4EPdiBGD
BEP7Q/ZD8kPuQ+lD5kPjQ+BD3ogRgwND/kP6Q/VD8UPtQ+lD5kPjQ+BD3ogRgwND/UP4Q/RD
8EPsQ+hD5UPjQ+BD3ogQgwRD+0P3Q/ND70PrQ+hD5UPiQ+BD34gQgwND/UP5Q/VD8UPuQ+pD
50PkQ+JD4EPfQ3RDbkNnQ2FDW0NVQ09DSUNEQz5DN0MyQy1DJ0MiQx1DGEMTQw1DB0MBgQpD
dENuQ2dDYUNbQ1VDT0NKQ0RDPkM4QzJDLUMoQyJDHUMYQxNDDUMHQwGBCkN0Q25DZ0NhQ1tD
VUNQQ0pDREM+QzhDMkMtQyhDI0MdQxhDE0MOQwdDAYEKQ3NDbkNnQ2FDW0NWQ1BDSkNEQz9D
OEMzQy1DKEMjQx5DGEMTQw5DB0MCgQpDc0NuQ2dDYUNcQ1ZDUENKQ0VDP0M5QzNDLkMoQyND
HkMZQxNDDkMHQwKBCkNzQ21DZ0NhQ1xDVkNQQ0tDRUNAQzlDNEMuQylDJEMeQxlDFEMOQwhD
AoEKQ3JDbUNnQ2FDXENWQ1FDS0NGQ0BDOUM0Qy9DKUMkQx9DGkMUQw9DCEMDgQpDckNtQ2dD
YUNcQ1dDUUNMQ0ZDQUM6QzVDL0MqQyVDH0MaQxVDD0MJQwOBCkNxQ21DZ0NiQ1xDV0NRQ0xD
R0NBQztDNUMwQypDJUMgQxtDFUMQQwlDA4EKQ3FDbENnQ2JDXENXQ1JDTENHQ0JDO0M2QzBD
K0MmQyBDG0MWQxBDCkMEgQpDcUNsQ2dDYkNdQ1hDUkNNQ0hDQkM8QzZDMUMsQyZDIUMcQxZD
EUMKQwWBCkNwQ2xDZ0NiQ11DWENTQ01DSENDQzxDN0MyQyxDJ0MiQxxDF0MRQwtDBUMAgQlD
cENsQ2dDYkNdQ1hDU0NOQ0lDQ0M9QzhDMkMtQyhDIkMdQxhDEkMMQwZDAIEJQ29DbENnQ2JD
XUNZQ1RDT0NJQ0RDPkM4QzNDLkMoQyNDHkMYQxNDDEMHQwGBCUNvQ2tDZ0NiQ15DWUNUQ09D
SkNFQz5DOUM0Qy5DKUMkQx5DGUMUQw1DB0MCgQlDb0NrQ2dDY0NeQ1lDVUNQQ0tDRUM/QzpD
NEMvQypDJEMfQxpDFEMOQwhDA4EJQ29Da0NnQ2NDXkNaQ1VDUENLQ0ZDQEM6QzVDMEMqQyVD
IEMaQxVDDkMJQwOBCUNuQ2tDZ0NjQ19DWkNWQ1FDTENHQ0BDO0M2QzFDK0MmQyFDG0MWQw9D
CkMEgQlDbkNrQ2dDY0NfQ1tDVkNRQ0xDR0NBQzxDN0MxQyxDJ0MhQxxDFkMQQwtDBUMAgQhD
bkNrQ2dDY0NfQ1tDV0NSQ01DSENCQz1DN0MyQy1DJ0MiQx1DF0MRQwtDBkMBgQhDbUNrQ2dD
Y0NgQ1tDV0NSQ01DSENCQz1DOEMzQy1DKEMjQx1DGEMRQwxDB0MBgQhDbUNqQ2dDY0NgQ1tD
V0NTQ05DSUNDQz5DOEMzQy5DKEMjQx5DGEMSQwxDB0MCgQhDbENqQ2ZDY0NfQ1tDV0NSQ05D
SUNDQz5DOEMzQy5DKEMjQx5DGEMSQw1DCEMCgQhDa0NpQ2VDYkNfQ1tDV0NSQ01DSUNDQz1D
OEMzQy5DKEMjQx5DGEMSQw1DCEMDgQhDakNoQ2RDYUNeQ1pDVkNRQ01DSENCQz1DOEMyQy1D
KEMjQx1DGEMSQw1DCEMDgQhDaENmQ2NDYENcQ1lDVUNQQ0xDR0NBQzxDN0MyQyxDJ0MiQx1D
GEMRQwxDB0MCgQhDZkNkQ2FDXkNbQ1dDU0NPQ0pDRUNAQztDNUMwQytDJkMhQxxDF0MQQwtD
BkMCgQhDZENiQ19DXENZQ1VDUUNNQ0hDREM+QzlDNEMvQypDJUMfQxpDFUMPQwpDBkMBgQhD
YkNfQ1xDWUNWQ1JDTkNKQ0ZDQUM8QzdDMkMtQyhDI0MeQxlDFEMOQwlDBEMAgQhDX0NdQ1lD
VkNTQ1BDTENIQ0NDP0M5QzRDL0MqQyVDIUMcQxdDEkMMQwdDA4EJQ1tDWUNWQ1NDUENMQ0hD
RENAQzxDNkMxQy1DKEMjQx5DGUMUQxBDCkMGQwGBCUNYQ1ZDU0NQQ0xDSUNFQ0FDPUM4QzND
LkMqQyVDIEMbQxdDEkMNQwhDBEMAgSCGCIEWhgiBF4YHgRiGBoEYhgaBGYYFgRqGBIEbhgOB
HYYBgf+B/4H1RvuGCIEWRveGB4EWRuyGB4EXRvaGBoEYRviGBYEZRvSGBIEZRu9G+4YDgRuG
A4EcBkb8BoEeRvWB/4H/gb+AFEYuRvCGA0bvRulG+4YBgBVGNYYDRvBG6YYCgBZG04YHgBdG
94YGgBdGKYYGgBhGWEb0hgSAGUa5RviGA4AaRn6GA4AbRp2GAoAcRkpGa0bfgP+A/4DWRilG
ZEZUgANGsgaAF0ZORlJGDIABRg1G6AaAF0YkRnRGI4ABRnKGAYAYRl9GTEYaRkZGo0b9BoAY
RjNGSkZARnNGtkb3BoAaRgVGf0bBRvUGgBtGZkbRhgGAG0ZfRtNG6waAHEZARqRGyYAeRg+A
/4D/gN5GmoAeRuKAHgaAHkb0gB5Gq4AeRmmAHkZagB5GBYD/gP+A/4BeRgGA/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gJ8AAAAAAAAAAAAAAAGIE4AJiBSACIgWgAiIFIAJiBEACIALiBCADogRgAyIE4ALiBSACYgV
gAiIFoAIiBaAB4gXgAaIGIAGiBeAB4gXgAaIF4AGiBeAB4gYgAWIGYAFiBmABIgagAOIGoAE
iA6AAYgEgAiID4AOiBCADYgRgAyIEoAKiBSACIgWgARIK4htgAeIFoAHiBeAB4gWgAeIFYAJ
iBOAC4gSgAyIE4ALiBOACogVgAiIFoAHiBeABogXgAeIF4AGiBiABogXgAaIGIAGiBmABIgb
gAOIG4ACiB0AiG4AiAqAAYgRgAuIE4AKiBSACIiqgAaIF4AHiBeABogXgAeIFoAIiBSACogT
gAuIE4ALiBOACogUgAmIFYAIiBaAB4gXgAaIGIAGiBeABogYgAaIGYAEiBuAA4gcgAGIzQCI
HoAJiMmABYgYgAaIGIAGiBeABogYgAaIF4AHiBWACYgTgAyIE4AJiBWACIgWgAeIF4AHiBeA
BogXgAaIGIAGiBiABYgbgAOIHQCI/4jigASIGYAFiBmABIgZgAWIGYAFiBiABogXgAeIFYAJ
iBSACYgVgAiIFoAHiBeABogXgAeIF4AGiBeABogagASIHQCI/4j/iAOAAogcgAKIG4ADiBqA
BIgagASIGYAFiBiABogWgAiIFIAJiBWACIgWgAeIFoAHiBeABogYgAaIF4AGiBuAAoj/iP+I
JQCIHYABiByAAYgcgAKIHIACiBuAA4gZgAaIFoAIiBOACogUgAmIFYAIiBaAB4gXgAaIF4AG
iBeAB4gcgAGI/4j/iGQAiB2AAYgcgAKIG4ADiBqABIgYgAeIFIAJiBSACYgVgAeIF4AHiBaA
B4gXgAaIF4AGiB4AiP+I/4iEAIgdgAGIHIACiBqABIgYgAeIFYAIiBSACIgWgAeIF4AGiBeA
B4gXgAaIGIAFiP+I/4ikAIgdgAGIHIACiBqABIgZgAaIFoAHiBSACIgWgAeIF4AGiBeAB4gW
gAeIGIAFiP+I/4g9gwRD+0P3Q/ND70PsQ+lD5kPkQ+JD4EPfiA6DBEP8Q/hD9UPxQ+5D60Po
Q+VD40PhQ+BD34gNgwRD/kP6Q/ZD8kPvQ+xD6UPnQ+RD4kPhQ+BD34gMgwVD+0P3Q/RD8EPt
Q+pD6EPlQ+ND4kPgw98BiAyDBEP9Q/hD9UPxQ+5D60PpQ+ZD5EPiQ+FD4MPfAYgKgwVD/UP6
Q/VD8kPvQ+xD6UPnQ+VD40PiQ+FD4MPfAYgJgwVD/kP6Q/dD80PwQ+1D6kPoQ+ZD5EPiQ+HD
4AOICIMFQ/5D+0P3Q/RD8EPtQ+tD6EPmQ+RD40PiQ+HD4AOIB4MFQ/5D+0P4Q/VD8UPuQ+tD
6UPnQ+VD40PiQ+HD4ALD4QGIBoMFQ/5D+0P4Q/VD8kPvQ+xD6kPnQ+ZD5EPjQ+LD4QRD4ogF
gwVD/kP7Q/hD9UPyQ/BD7UPqQ+hD5kPkQ+ND4sPhA8PiAUPjiASDBUP+Q/tD+EP2Q/ND8EPu
Q+tD6UPnQ+VD5EPjQ+LD4QJD4kPjQ+RD5YgDgwVD/kP7Q/lD9kPzQ/FD7kPsQ+pD6EPmQ+TD
4wHD4gND40PkQ+VD54gDgwVD+0P5Q/ZD9EPxQ+9D7UPrQ+lD50PlQ+TD4wFD4sPjAUPkQ+VD
5kPnQ+mIAoMFQ/1D+UP3Q/RD8kPwQ+5D7EPqQ+hD5kPlw+QBw+MBw+QBQ+VD5kPoQ+lD64gC
gwRD/kP7Q/dD9UPzQ/FD70PtQ+tD6UPoQ+bD5QHD5AJD5UPmQ+dD6EPqQ+xD7ogBgwVD/EP5
Q/ZD9EPyQ/BD7kPsQ+tD6UPoQ+dD5sPlAkPmQ+dD6EPpQ+tD7UPvQ/GIAYMEQ/5D+0P4Q/VD
80PxQ+9D7kPsQ+tD6kPow+cEQ+hD6UPqQ+xD7kPwQ/JD9IgBgwRD/UP6Q/dD9UPzQ/FD8EPu
Q+1D7EPqw+kBw+gBw+kBQ+pD60PtQ+9D8UPzQ/VD+IgBgwRD/UP6Q/dD9UPzQ/FD8EPvQ+5D
7UPsQ+vD6gJD60PsQ+1D7kPwQ/JD9EP2Q/lD+4gBgwRD/UP6Q/hD9UP0Q/JD8UPwQ+9D7sPt
AcPsAcPtAUPuQ/BD8UPzQ/VD+EP6Q/0DiAGDBEP+Q/tD+EP2Q/VD88PyAUPxQ/DD7wRD8EPx
Q/ND9EP2Q/lD/EP+gwGIAYMFQ/xD+kP4Q/ZD9cP0AUPzw/IBw/EBw/IBQ/ND9UP2Q/hD+kP9
gwOIAYMFQ/5D/EP6Q/jD9wFD9sP1AcP0AcP1AUP2Q/dD+EP6Q/xD/oMEiAGDBkP+Q/xD+0P6
w/kBw/gEQ/lD+kP7Q/xD/oMGiAKDB0P+Q/3D/ALD+wLD/AFD/YMIiAODGYgGgxeICIMUiAuD
EYgPgw2IFoMDiA5DVUNSQ09DTENJQ0VDQUM9QzlDNUMvQytDJkMiQx1DGUMUQw9DC0MGQwGB
CkNRQ05DS0NIQ0VDQUM9QzlDNUMxQyxDJ0MjQx5DGkMVQxFDDUMIQwNDAIEKQ01DSkNHQ0RD
QEM9QzlDNUMxQy1DKEMjQx9DG0MXQxJDDkMKQwZDAYELQ0lDRkNDQ0BDPEM4QzVDMUMtQylD
JEMgQxtDF0MTQw9DC0MHQwOBDENFQ0JDPkM7QzhDNEMwQyxDKEMkQyBDHEMYQxRDEEMMQwhD
BEMAgQxDQUM+QzpDN0MzQzBDLEMoQyRDIEMbQxhDFEMQQwxDCEMEQwGBDUM9QzpDNkMyQy9D
K0MnQyNDIEMcQxdDFEMQQwxDCUMFQwGBDkM5QzZDMkMuQypDJ0MjQx9DG0MYQxNDEEMMQwlD
BUMCgQ9DNUMyQy5DKkMmQyJDH0MbQxdDFEMPQwxDCUMFQwKBEEMyQy5DKkMmQyJDHkMaQxdD
E0MQQwxDCEMFQwKBEUMuQypDJkMiQx5DGkMXQxNDD0MMQwhDBUMCQwCBEUMrQydDIkMeQxpD
F0MTQw9DDEMJQwVDAkMAgRJDKEMkQx9DG0MXQxNDEEMMQwlDBUMCQwCBE0MmQyFDHEMYQxRD
EEMNQwlDBkMDQwCBFEMjQx9DGkMVQxFDDkMKQwZDA0MAgRVDIUMdQxdDE0MPQwtDCEMEQwGB
FkMgQxtDFkMRQw1DCUMGQwJDAIEWQx5DGkMUQxBDDEMIQwRDAYEXQx5DGUMTQw9DC0MHQwND
AIEXQx1DGEMTQw5DCkMGQwNDAIEXQx1DGEMSQw5DCkMGQwNDAIEVQwBDAkMdQxhDE0MOQwpD
BkMDQwCBFEMBQwNDBkMeQxlDE0MPQwtDB0MEQwGBEkMAQwJDBUMHQwpDH0MaQxRDEEMMQwhD
BUMCQwCBEEMBQwRDBkMJQwxDD0MgQxtDFkMRQw5DCkMHQwRDAkMAgQ1DAEMCQwVDCEMKQw1D
EEMTQyJDHUMYQxNDD0MMQwlDBkMEQwLDAAGBCEMAQwFDAkMEQwZDCUMMQw9DEkMVQxhDJEMf
QxpDFkMSQw5DC0MJQwdDBUMDwwIBwwECwwABwwEBQwJDA0MFQwZDCEMLQw1DEUMUQxdDGkMd
QyZDIUMcQxhDFEMRQw5DDEMKQwjDBgHDBQHDBARDBUMGQwdDCUMLQw1DD0MSQxVDGEMbQx9D
IkMoQyRDH0MbQxdDFEMRQw9DDUMLQwrDCQHDCAVDCUMKQwtDDUMPQxFDFEMWQxpDHUMgQyND
J0MrQydDIkMeQxtDF0MVQxJDEUMPQw7DDQHDDATDDQFDD0MQQxJDFEMWQxhDG0MfQyJDJUMo
QyxDLkMqQyVDIUMeQxtDGEMWQxRDE0MSwxEBwxADwxEBQxJDE0MUQxZDGEMbQx1DIEMkQydD
KkMuwzEBQy1DKEMlQyJDH0McQxpDGEMXQxbDFQdDFkMYQxlDG0MdQx9DIkMlQylDLEMvQzND
NoH/gf+B/4H/gf+B/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8A
AAAAAAAAAAAAAAGI/4hngAKIG4ADiBqABIgZgAWIGIAHiBeAB4gXgAeIF4AHiBeABogXgAeI
FoAIiBaAB4gXgAaIFQCIAYAGiBSAAYgBgAWIFYABiAGABIgVgAKI/4j/iAeAAYgcgAOIGoAE
iBqABIgZgAaIF4AHiBeAB4gXgAeIF4AGiBeAB4gXgAeIF4AGiBiABogUAIgCgAWIFIABiAKA
BIgVgAGI/4j/iCeAAYgcgAOIG4ADiBqABIgZgAaIGIAGiBeAB4gXgAeIF4AGiBiABogXgAeI
F4AGiBiABogUAIgCgAWIFIABiP+I/4gnAIgegAGIHIADiBuAA4gagASIGoAFiBiABogYgAaI
F4AHiBeAB4gXgAaIGIAGiBiABoj/iP+IWwCIHoABiB2AAogcgAKIG4AEiBqABIgagAWIGIAG
iBiABogYgAaIF4AHiBeAB4gXgAaI/4j/iHmAAYgegAKIHIADiBuAA4gbgASIGoAEiBmABogY
gAaIGIAGiBiABogYgAaI/4j/iLeAAYgdgAOIHIADiBuABIgagAWIGYAGiBiABogYgAaIGIAH
iBcAiP+I/4jagAOIHIAFiBqABYgagAWIGYAGiBiAB4gXgAeIF4AEiAGAAYj/iP+I/4gSgAOI
HIAFiBqABogYgAeIGIAHiBeACIgWgAWI/4j/iP+IVoAGiBiACIgXgAiIFoAJiBaACYgVgAGI
/4j/iP+IW4AFiBmACIgWgAmIFYAKiBWABYgZAIj/iD2DAYgdgxSICoMXiAfD+gHD+wLD/ALD
/QPD/gODCYgFw/EBw/ICw/MCw/QCw/UCw/YCQ/dD+EP5Q/tD/YMEiATD6AHD6QLD6gHD6wLD
7ALD7QLD7gFD70PxQ/ND9UP3Q/pD/oMDiAJD38PgAsPhAsPiAcPjAsPkAsPlAUPmQ+dD6EPq
Q+xD70PyQ/VD+UP+gwMIQzRDMEMsQyhDJUMjQyBDHkMdQxvDGgHDGQTDGgFDG0McQx5DIEMi
QyRDJ0MqQy5DMUM0QzhDO0M3QzRDL0MsQylDJ0MlQyNDIUMgQx/DHgZDH0MgQyFDIkMkQyZD
KUMsQy9DMkM2QzlDPUNAQzpDN0MzQzBDLUMrQylDJ0MmQyTDIwLDIgLDIwJDJEMmQydDKUMr
Qy5DMUM0QzdDO0M+Q0JDRUM+QztDN0M0QzJDL0MtQyxDKkMpwygBwycEwygBQylDKkMsQy5D
MEMzQzVDOEM8Q0BDQ0NHQ0pDQUM+QztDOEM2QzRDMkMwQy9DLkMtwywGQy1DLkMvQzFDM0M1
QzdDOkM9Q0FDRUNIQ0xDT0NEQ0JDP0M8QzpDOEM2QzVDM0MywzEHQzJDM0M0QzVDN0M6QzxD
P0NCQ0ZDSkNNQ1FDVENHQ0VDQkNAQz5DPEM6QzlDOEM3wzYBwzUEwzYBQzdDOEM6QzxDPkNB
Q0RDR0NLQ05DUkNWQ1lDSkNIQ0VDQ0NCQ0BDPkM9QzxDO8M6AsM5AsM6AkM8Qz1DPkNAQ0ND
RUNIQ0tDT0NTQ1dDWkNeQ01DS0NIQ0dDRUNDQ0JDQMM/AcM+AcM9BMM+AUM/Q0FDQkNEQ0dD
SUNMQ09DU0NXQ1tDX0NiQ09DTUNLQ0lDR0NGQ0VDRENDQ0LDQQdDQkNDQ0RDRkNIQ0pDTUNQ
Q1NDV0NbQ19DYkNmQ1BDTkNNQ0tDSkNIQ0dDRkNFw0QCw0MEw0QBQ0VDR0NIQ0pDTUNQQ1ND
VkNaQ15DYkNmQ2pDUUNPQ05DTENLQ0pDSUNIQ0fDRgLDRQTDRgFDSENJQ0tDTUNPQ1JDVUNY
Q11DYENkQ2hDbUNRQ1BDTkNNQ0xDS0NKQ0nDSAHDRwdDSENJQ0pDTENOQ1FDU0NWQ1pDXkNi
Q2ZDakNvQ1BDT0NOQ01DTENLQ0pDScNIAcNHBsNIAUNKQ0tDTUNPQ1FDVENXQ1tDX0NjQ2hD
bENww04BQ01DTENLQ0rDSQFDSMNHCENIQ0lDS0NMQ09DUUNUQ1dDW0NgQ2RDaENtQ3FDTMNL
AUNKQ0nDSAHDRwHDRghDR0NIQ0pDTENOQ1BDU0NXQ1pDX0NjQ2hDbENxw0kBQ0jDRwFDRsNF
AsNEB8NFAUNGQ0hDSkNMQ09DUkNVQ1lDXkNiQ2dDbENww0UBw0QBw0MBw0ICw0EHQ0JDQ0NE
Q0VDR0NKQ0xDT0NTQ1dDXENgQ2VDakNvw0EBw0ABwz8Cwz4Dwz0Bwz4EQz9DQENCQ0RDRkNJ
Q0xDUENUQ1lDXkNiQ2dDbUM8wzsDwzoCwzkGwzoCQztDPEM+Q0BDQkNFQ0hDTENQQ1VDWkNf
Q2RDacM2AcM1BMM0B8M1AkM2QzhDOUM7Qz5DQUNEQ0hDTENRQ1ZDW0NgQ2bDLwbDLgTDLwRD
MEMxQzJDNEM2QzhDO0M/Q0JDR0NMQ1FDVkNcQ2HDKA3DKQLDKgFDLEMuQzBDMkM1QzlDPUNB
Q0ZDTENRQ1ZDXMMhDMMiA0MjQyRDJUMnQylDLEMvQzJDNkM7Q0BDRUNLQ1BDVsMZCMMaBMMb
AkMcQx1DHkMgQyJDJUMoQytDL0M0QzlDP0NEQ0pDUMMRB8MSBMMTAsMUAUMVQxdDGEMbQx1D
IEMkQyhDLEMyQzdDPUNDQ0nDCALDCQXDCgPDCwLDDAFDDUMPQxFDE0MVQxlDHEMgQyVDK0Mw
QzVDO0NBwwAGwwECwwIDwwMCQwRDBUMHQwhDC0MNQxBDFEMYQx1DI0MoQy5DNEM6gRNDAEMC
QwVDCEMMQxBDFEMaQyBDJUMrQzKBFkMAQwNDCEMMQxJDF0MdQyNDKYEYQwBDBEMJQw9DFEMa
QyGBGkMBQwZDDEMSQxiB/4H/gf+B/4H/gf+B/4H/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/AP//AP//AP//Af/5gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//
j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//
j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//
j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//
AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAA
AAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAP8A
AP8AAP8AAfmIGoACiBuABIgagAWIGIAGiBiABogZgAqIFYAJiBaACIgWgAiIF4AHiBiAAQiA
A4gZAIgBgAOIHIACiByAA4gcgAKIHYACiB6AAYgegAGIHwCIH4ABiB8AiB6AA4hGgAGIH4AE
iBuABIgbgAOIG4ADiByAAogcgAKIHIACiBeABYgYgAeIGIAGiBmABogYgAaIGYAFiBqACIgW
gAiIF4AHiBiABogZgAEIgAKIGYABiAGAAogZAIgCgAGIHYACiB2AAYgegAGIHoABiB8AiB+A
AYgegAGIHoACiB2ABIhIgAOIHYADiByAAogcgAKIHYABiB2AAYgdgAGIHYABiBWAB4gYgAaI
GYAGiBiAB4gYgAaIGYAFiBqABIgagAeIGIAGiBmABYgZgAIIgAGIGoABiAEAiBsAiAIAiB8A
iB8AiB6AAYgegAGIHoABiB6AAYgegAKIHYADiBuAAYhQgAKIHYABiB2AAYgeAIgeAIgeAIge
AIgeAIgVgAaIGYAGiBmABogYgAeIGIAGiBmABYgZgAWIGoADiByAAogcgAIIgAGIGoABiAEA
iBsAiKYAiB8AiB+AAYgdgAOIG4AGiBeAAogcAIj/iC2ABogZgAaIGIAGiBmABogZgASIGoAE
iBuAA4gcgAKIHIACiB2AAYgeAIgeAIjogAGIHYAEiBmABYgXgASIHACI/4gtgAaIGYAGiBmA
BogZgASIGoADiByAAogcgAKIHYABiB4AiB4AiP+IKoABiByABIgXgAWIGIAFiB0AiP+ILYAG
iBmABYgagAOIG4ACiB2AAYgdAIj/iK0AiByABIgVgAeIGIAFiB2AAYj/iP+I/4ibgASIF4AG
iBiABogbgAOI/4j/iP+ImIAGiBiABogYgAaIGYAFiP+I/4j/iJiABogYgAaIGIAGiBiABoj/
iBhD6kPuQ/JD9kP5Q/yDD0P9Q/tD+UP3Q/VD8kPwQ+5D60PpQ/RD90P7gxJD/UP7Q/hD9UPz
Q/BD7UPrQ+hD5kP+gxRD/UP6Q/dD9EPxQ+5D60PoQ+ZD44MEiAmDBkP+Q/pD90PzQ/BD7UPp
Q+ZD40PhA4gOgwVD/kP7Q/dD80PvQ+xD6EPlQ+FD3ogRgwRD+0P3Q/ND70PrQ+dD40PgQ92I
EYMEQ/xD90PzQ+9D6kPmQ+JD3kPbiBKDA0P9Q/hD80PvQ+pD5UPhQ91D2ogTgwND+UP0Q+9D
6kPlQ+FD3UPZiBODA0P7Q/VD8EPrQ+VD4EPcQ9iIFIMCQ/xD9kPwQ+tD5UPgQ9xD2IgUgwJD
/kP3Q/FD7EPmQ+FD3EPYiBSDA0P5Q/JD7UPmQ+FD3EPYiBWDAkP6Q/RD7UPnQ+FD3EPYiBWD
AkP7Q/VD7kPnQ+JD3UPYiBWDAkP9Q/ZD70PoQ+ND3UPYiBaDAUP+Q/dD8EPpQ+ND3kPZiBaD
AkP4Q/FD6kPkQ95D2YgWgwJD+UPyQ+tD5UPfQ9qIFoMCQ/pD80PrQ+VD30PagASIEYMCQ/tD
9EPsQ+ZD4EPagAaID4MCQ/tD9EPsQ+ZD4EPagAeID4MBQ/xD9EPsQ+ZD4EPbgAeID4MBQ/xD
9UPsQ+ZD4EPaiAKABIgPgwFD/EP1Q+xD5kPgQ9qIF4MBQ/xD9EPsQ+ZD4EPaiBeDAUP7Q/RD
7EPlQ99D2ogWgwJD+0PzQ+tD5UPfQ9mIFoMCQ/pD80PrQ+RD3kPZiBaDAkP6Q/JD6kPkQ95D
2IgWgwJD+UPyQ+pD40PdQ9iIFoMCQ/lD8kPpQ+ND3UPXgQRDAEMDQwZDCEMKQwxDDUMOww8D
Qw5DDUMMQwpDCUMHQwVDA0MBgQhDA0MGQwlDC0MOQw9DEUMSwxMDQxJDEUMQQw9DDUMLQwhD
BkMEQwGBBkMBQwVDCEMMQw9DEkMUQxZDF0MYwxkCQxhDF0MWQxRDE0MRQw5DC0MJQwZDA0MA
gQZDDEMQQxNDFkMZQxtDHUMeQx/DIAHDHwFDHUMcQxpDGEMVQxNDEEMMQwlDBkMDQwCBBkMX
QxtDHkMhQyNDJUMmwycDQyZDJUMjQyFDHkMcQxlDFUMSQw5DCkMGQwOBB0MjQyZDKUMrQy1D
L8MwA0MvQy1DK0MpQyZDI0MgQxxDGEMUQw9DC0MHQwOBB0MuQzFDNEM2QzjDOQNDOEM2QzRD
MUMvQytDKEMkQyBDG0MXQxFDDEMIQwOBB0M6Qz1DP0NBQ0LDQwJDQkNAQz5DPEM4QzVDMUMt
QyhDI0MeQxlDE0MOQwlDBIEHQ0ZDSENKQ0zDTQJDTENLQ0lDRkNDQz9DO0M2QzJDLUMnQyJD
HEMVQxBDCkMFQwCBBkNRQ1RDVsNXA0NVQ1RDUUNOQ0tDRkNBQzxDN0MxQytDJUMfQxhDEkMM
QwZDAIEGQ11DX0NgQ2FDYkNhQ2BDX0NcQ1lDVkNSQ0xDR0NCQzxDNkMvQylDIkMaQxRDDUMH
QwGBBkNoQ2pDa8NsAUNrQ2pDZ0NlQ2FDXUNZQ1NDTUNHQ0FDOkMzQyxDJUMdQxZDD0MIQwKB
BkNyQ3RDdUN2Q3VDdENzQ3BDbUNpQ2VDYENZQ1NDTUNGQz9DN0MwQyhDH0MYQxFDCkMDgQZD
fUN+w38CQ31De0N4Q3VDcUNsQ2dDX0NZQ1JDS0NDQztDM0MrQyJDGkMTQwtDBIEGQ4ZDh8OI
AUOHQ4ZDg0OAQ3xDeENzQ21DZUNeQ1dDT0NHQz9DN0MuQyRDHEMUQw1DBYEGQ49DkEORRpBG
j0ONQ4tDh0ODQ35DeUNzQ2tDY0NcQ1NDS0NDQzpDMUMnQx5DFkMOQwZDAIEFQ5dDmEOZQ5hG
l0OVQ5JDjkOKQ4RDf0N4Q3BDaENgQ1dDT0NGQz1DNEMpQyBDGEMPQwhDAIEFQ55Dn0OgQ59D
nUObQ5hDlEOPQ4pDhEN9Q3RDbENkQ1tDUkNJQz9DNkMrQyJDGUMRQwlDAYEFQ6XDpgFDpUOj
Q6FDnkOZQ5RDj0OIQ4FDeENwQ2dDXkNVQ0tDQkM4Qy1DI0MaQxJDCUMCgQVDq8OsAUOqQ6lD
pkOiQ55DmUOTQ4xDhUN8Q3NDakNhQ1dDTkNEQzpDLkMlQxxDE0MKQwKBBcOwAkOvQ61DqkOm
Q6JDnUOWQ5BDiEN+Q3ZDbUNjQ1lDT0NFQztDL0MmQxxDE0MLQwOBBcO0AkOzQ7FDrkOqQ6VD
oEOZQ5JDi0OBQ3hDb0NlQ1tDUUNHQzxDMEMnQx1DFEMLQwOBBcO3AkO2Q7NDsEOsQ6hDokOc
Q5RDjUODQ3pDcENmQ1xDUkNIQz1DMUMnQx5DFEMLQwOBBUO5Q7pDuUO4Q7VDskOuQ6lDpEOd
Q5ZDjkOEQ3tDcUNnQ11DU0NIQz5DMUMnQx5DFEMMQwOBBcO7AkO5Q7dDtEOwQ6tDpUOeQ5dD
j0OFQ3tDckNoQ11DU0NIQz5DMkMnQx5DFEMLQwOBBcO8AkO6Q7hDtEOwQ6tDpUOfQ5dDj0OF
Q3xDckNoQ11DU0NIQz5DMUMnQx1DFEMLQwOBBUO8Q71DvEO6Q7hDtUOwQ6tDpkOfQ5dDj0OF
Q3tDckNoQ11DU0NIQz1DMUMnQx1DE0MLQwKBBUO8Q71DvEO6Q7hDtUOwQ6tDpUOfQ5dDj0OE
Q3tDcUNnQ11DUkNIQz1DMEMmQxxDE0MKQwGBBcO8AkO6Q7hDtEOwQ6tDpUOeQ5dDj0OEQ3tD
cUNnQ1xDUkNHQzxDMEMmQxxDEkMJQwGBBcO8AkO6Q7dDtEOwQ6tDpUOeQ5ZDjkOEQ3pDcENm
Q1xDUUNGQzxDL0MlQxtDEkMJQwCBBcO8AUO7Q7lDt0OzQ69DqkOkQ51DlkOOQ4NDekNwQ2VD
W0NQQ0ZDO0MvQyRDGkMRQwhDAIEFw7sBQ7pDuUO2Q7NDrkOpQ6NDnUOVQ41DgkN5Q29DZUNa
Q1BDRUM7Qy5DJEMaQxFDCEMAgf+B/4H/gf+B/4H/gf+B/4EFgP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/AAAAAAAAAAAAAAABiB2AAYgdgAGIHYABiB2ABogYgAeIF4AI
iBaACIgWgAmIFYABCIAHiBSAAQiAB4gUgAGIAYAHiBQAiAGAB4gUAIgBgAeIHIACiB2AAYge
gAGIHgCI/4hbAIgagAWIFoAJiBWACYgzgAGIHgCIHgCIHgCIHgAIgASIGAAIgAWIFwAIgAaI
FgAIgAaIFgAIgAeIFQCIAYAGiBUAiAGAB4gXgAeIGIAGiBiABogYgAeIG4ADiByAAogdgAGI
HgCIHgCIvACIHYACiBmABYgVgAqIFIALiBOADIgxAIgeAIiBgAOIG4AFiBmABYgZgAaIGIAG
iBmABogYgAaIGIAGiBmABogYgAaIGYAFiBqABIgbgAOIG4ADiByAAogcgAKIHIACiByAAogc
gAKIHIACiBuAA4gZgAWIFIALiBOAC4gTgAyIE4AMiP+IFIADiByABIgagAWIGYAFiBmABYga
gAWIGYAFiBqABIgagASIG4ADiBuAA4gcgAKIHIACiByAAogcgAKIHIACiByAAogbgASIGIAG
iBaACIgTgAyIEoANiBKADYgSgA2I/4g0AIgegAKIHIADiByABIgagASIGoAEiBuAA4gbgAOI
HIACiByAA4gbgAOIG4ADiBuAA4gbgAOIG4ADiBqABIgZgAWIGIAHiBOAC4gSgA2IEoANiBKA
DYgRgA6I/4iVgAGIHoABiB2AAogcgAOIHIACiByAAogcgAKIHIACiByAAogcgAKIG4ADiBuA
BIgZgAWIGIAGiBaACYgRSOCADIgSgA2IEoANiBKADIgSgAyI/4j/iBkAiB6AAYgdgAGIHIAC
iByAA4gbgAOIGoAEiBqABIgZgAWIGIAHiBSAC4gRgA6IEYANiBGADYgSgAuIE4ALiP+I/4ha
gAGIHYACiByAAogbgAOIG4ADiBqABYgYgAaIFoAJiBOADIgRgA2IEYANiBKAC4gTgAuIFIAJ
iP+I/4h7SB0AiB2AAogbgASIGoAEiBmABYgYgAeIFYAKiBKADYgQgA2IEoAMiBKAC4gUgAqI
FIAJiP+I/4ibgAGIHIADiBuABYgYgAaIFoAJiBSAC4gRgA2IEIANiBKADIgSgAuIFIAJiBWA
CYgogwJD+UPyQ+pD40PdQ9iIFoMCQ/pD8kPqQ+RD3kPYiBaDAkP6Q/ND60PlQ99D2YgWgwJD
+0P0Q+xD5kPgQ9uIFoMCQ/1D9kPuQ+hD4kPdiBeDAUP+Q/dD8EPqQ+RD34gXgwJD+kPyQ+1D
50PiiBeDAkP8Q/VD8EPqQ+aIF4MDQ/hD80PuQ+mIF4MDQ/xD90PyQ+6IGIMDQ/tD9kPyiBiD
BEP7Q/eIGYMEQ/yIGYMFiBqDBIgbgwOIHIMCiB4DiD8DiAgAiBSDA4gEgAOIEkP+gwaABYgR
Q/ND90P6Q/6DB4ACiBBD6UPsQ+9D80P2Q/pD/YMIAIgOQ99D4kPlQ+lD7EPwQ/ND9kP5Q/yD
B4gNQ9VD2EPcQ99D40PmQ+lD7UPwQ/ND9kP6Q/6DBogLQ81Dz0PTQ9ZD2UPdQ+BD5EPnQ+pD
7kPyQ/ZD+UP9gwWICkPEQ8dDykPOQ9FD1EPXQ9tD3kPiQ+ZD6UPuQ/JD9kP6Q/2DBYgIQ71D
v0PCQ8ZDyUPMQ89D00PWQ9pD3kPiQ+ZD60PvQ/ND90P7gwWIB0O2Q7hDu0O+Q8FDxEPHQ8tD
zkPSQ9ZD2kPfQ+ND6EPsQ/FD9UP6Q/6DBIgGQ7BDskO0Q7dDukO9Q8BDxEPHQ8tDz0PTQ9hD
3EPhQ+VD6kPvQ/RD+EP+gwSIBcO6AUO5Q7dDtUOyQ61DqEOiQ5xDlEOMQ4FDeENuQ2RDWkNP
Q0VDOkMuQyNDGkMQQweBBsO4AkO2Q7NDsEOsQ6dDoUOaQ5NDi0OAQ3dDbUNjQ1lDT0NEQzpD
LUMjQxpDEEMHgQZDtUO2Q7VDs0OxQ65DqkOlQ59DmUORQ4lDf0N2Q2xDY0NYQ05DREM5Qy1D
I0MaQxBDCEMAgQXDsgJDsUOuQ6tDp0OiQ51DlkOPQ4hDfkN1Q2tDYUNYQ01DQ0M5Qy1DI0Ma
QxFDCEMAgQVDrkOvQ65DrUOrQ6hDpEOfQ5pDlEONQ4VDfENzQ2pDYENXQ01DQ0M5Qy1DJEMa
QxFDCUMBgQVDqcOqAUOoQ6dDpEOgQ5xDl0ORQ4pDg0N5Q3FDaENfQ1ZDTENCQzlDLUMkQxtD
EkMKQwKBBUOjw6QBQ6NDokOfQ5xDmEOTQ41Dh0OAQ3dDb0NmQ11DVENLQ0JDOEMtQyRDHEMT
QwtDBIEFQ53DngFDnUOcQ5pDl0OTQ45DiUODQ3xDdENsQ2RDXENTQ0pDQUM4Qy5DJUMdQxVD
DUMGgQVDlsOXAkOWQ5RDkUONQ4lDhEN/Q3hDcENpQ2FDWkNRQ0lDQEM4Qy5DJkMeQxZDD0MI
QwGBBEOOQ49DkEOPQ45DjUOKQ4dDg0N/Q3pDdENtQ2ZDX0NXQ09DSENAQzhDLkMmQx9DF0MR
QwpDBIEEQ4XDhwNDhUODQ4FDfUN5Q3VDb0NoQ2JDXENVQ01DRkM/QzdDLkMnQyBDGUMTQwxD
B0MBgQNDfEN9Q35Df0N+Q31DfEN5Q3ZDc0NvQ2pDZENeQ1hDUkNLQ0RDPUM2Qy5DJ0MhQxtD
FEMPQwlDBIEDQ3JDdEN1w3YBQ3VDdENyQ29DbENoQ2RDX0NaQ1RDTkNIQ0JDPEM2Qy5DKEMi
QxxDFkMRQwxDCEMDgQJDZ0NpQ2vDbAJDa0NqQ2dDZUNiQ15DWUNVQ1BDS0NGQ0BDOkM1Qy5D
KEMjQx1DGEMUQw9DC0MGQwNDAAFDXENfQ2DDYgNDYUNfQ11DW0NYQ1RDUENMQ0dDQkM9QzhD
M0MtQyhDI0MfQxpDFkMSQw5DCkMHQwRDAUNRQ1RDVUNXw1gDQ1dDVUNTQ1FDTUNKQ0dDQ0M/
QztDNkMyQy1DKEMkQyBDHEMYQxVDEUMOQwtDCUMGQ0ZDSENKQ0zDTgFDT8NOAUNNRktDSkNH
Q0RDQUM+QztDOEM0QzBDLEMoQyRDIUMeQxpDF0MVQxFDD0MNQwtDOkM9Qz9DQUNDw0QBw0UB
RkRGQ0NCQ0BDPkM8QzpDN0M0QzFDLkMrQydDJEMiQx9DHEMaQxdDFUMTQxFDEEMuQzFDM0M2
QzhDOUM6wzsBxjsBQzpDOUM4QzZDNEMzQzBDLkMsQylDJ0MkQyJDIEMeQxxDGkMYQxdDFUMU
QyJDJUMoQytDLUMuQzBDMUMyxjIBwzIBQzFDMEMvQy5DLEMrQylDJ0MmQyRDIkMhQx9DHkMc
QxtDGkMZQxhDFkMZQxxDH0MhQyNDJUMnQyhGKUYqwyoDwykBQyhDJ0MmQyVDJEMjQyJDIUMg
Qx/DHgFDHcMcAUMLQw5DEUMUQxZDGUMbQx1DHkYgRiFDIsMjAsMkAsMjAsMiAcMhAsMgBUMA
QwJDBUMJQwtDDkMQQxJDFEYWRhhDGUMbQxxDHcMeAcMfAcMgBMMhA8MiAkMjgQNDAUMDQwZD
CEMLQw1GD0MRQxNDFEMWQxdDGUMaQxtDHEMdwx4BQx9DIMMhAUMiQyPDJAFDJYEHQwFDA0MG
QwhDC0MNQw9DEUMTQxRDFkMYQxlDG0McQx1DH0MgQyFDIkMkQyVDJkMngQpDAEMDQwVDCEMK
Qw1DD0MRQxNDFkMYQxpDG0MdQx9DIUMiQyRDJkMnQymBDUMBQwRDBkMJQwxDDkMSQxRDF0MZ
QxtDHUMgQyJDJEMmQyhDKoEPQwBDA0MGQwpDDUMQQxNDFkMZQxtDHkMhQyRDJkMoQyuBEUMB
QwRDCUMMQw9DE0MWQxlDHEMfQyNDJUMoQyuBEkMAQwRDCEMLQw9DE0MWQxpDHUMhQyRDJ0Mq
gRRDA0MHQwtDD0MTQxdDG0MfQyJDJkMpgRVDA0MHQwtDD0MUQxhDHEMgQyRDJ4H/gf+B/4H/
gf+B/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAAAAAAAAAA
AAGACYgVgAmIDwCIBIAJiA6AEIgOgBCIDoAQiA6AEIgOgAaIBoACiA2AB4gXgAeIGoAEiP+I
/4gKgASIGIAGiBiABogXgAeIFoAIiBSACogOgA2IE4ANiBGADogHAIgHgAuIAgCIBoAHCIAK
iAQAiASACAiACogFAIgDgAiIBYAEiAeADIgUgAqIFUirgAiIGIAGiByAAoj/iOuAAYgbgAWI
GYAFiBiABkhAiBeAB4gWgAiIDQAIgA2IEYAOiBGAD4gPgBSICoAdiASAGogQgA6IEoAMiBSA
CogWgAiIGYAFiP+I/4gKgASIGoAFiBiABogYgAaIF4AHiA0AiAGADogQgA6IEIAOiBGADYgS
gAuII4AKiBKADYgRgA2IEYANiBNI0IAKiBeAB4gcgAKI/4jqgAOIG4AFiBmABogYgAaIF4AH
iBCADIgSgAyIEoALiBOACogYgAFII4hrgAmIE4ALiBJIq4ALiBSACogZgAWI/4jrgAKIHIAE
iBqABIgZgAaIGIAGiBCAC4gUgAmIFYAIiBiABIitSPKABYgVgAmIFIAKiBSACoj/iOyAAYgd
gAKIG4AEiBqABIgagASIEoAJiBWACIgXgAaIGoACiO2AB4gWgAiIGYAFiP+IzIABiB2AAogc
gAOIG4ADiBuAA4gSgAmIFoAHiBiABYgbgAGI/4gugAaI/4jNAIgegAGIHYACiByAAogcgAKI
E4AHiBeABogagAOIHIABiP+I/4j0AIgeAIgOAIgOAIgOgAGIDQCIDoABiA0AiA6AAYgTgAeI
F4AGiBqAA4gcgAGI/4j/iLQAiB2AAYgdgAGIHgCIHgCIHgCIEACIDACIEACIDABDq0OtQ69D
sUO0Q7dDukO9Q8BDxEPIQ8xD0UPWQ9pD30PkQ+lD7kPzQ/lD/oMDiAVDpkOoQ6pDrEOuQ7FD
tEO3Q7pDvkPBQ8VDy0PPQ9RD2UPdQ+ND6EPtQ/ND+EP9gwOIBEOjQ6RDpUOoQ6lDrEOuQ7FD
tEO4Q7tDv0PEQ8lDzkPSQ9dD3EPiQ+dD7UPzQ/hD/YMDiANDoEOhQ6JDpEOlQ6dDqkOsQ69D
skO2Q7pDv0PDQ8hDzEPRQ9dD3EPhQ+hD7UPzQ/hD/oMDiAJDnsOfAUOhQ6JDpEOmQ6hDq0Ou
Q7FDtEO5Q71DwkPHQ8xD0UPWQ9tD4kPoQ+1D80P4Q/6DA4gBw50CQ55Dn0OhQ6JDpEOnQ6lD
rEOwQ7RDuEO9Q8FDxkPLQ9BD1kPcQ+JD50PtQ/ND+EP+gwMIw5wDQ51DnkOfQ6FDo0OlQ6hD
q0OvQ7NDt0O8Q8FDxkPLQ9BD10PcQ+JD50PtQ/ND+EP+gwNDncOcAUObw5wBQ51DnkOgQ6JD
pUOnQ6tDr0OzQ7dDu0PAQ8VDykPRQ9ZD3EPiQ+dD7UPzQ/iDA0Oew5wBw5sCw5wBQ55Dn0Oh
Q6RDp0OrQ65DskO3Q7tDwEPFQ8tD0UPWQ9xD4UPnQ+1D8kP5gwJDn0OeQ5zDmwFDmsObAUOc
Q51Dn0OhQ6RDp0OqQ65DskO2Q7tDwEPGQ8tD0UPWQ9xD4UPnQ+1D80P5Q/4DQ6FDn0OdQ5xD
m8OaA0ObQ51DnkOhQ6NDpkOqQ65DskO2Q7tDwEPGQ8tD0EPWQ9tD4UPnQ+1D80P4Q/5Do0Oh
Q59DnUOcw5oBw5kBQ5pDm0OcQ55DoEOjQ6ZDqUOtQ7FDtkO7Q8BDxUPLQ9BD1UPbQ+FD50Pt
Q/JD+EOmQ6NDoUOeQ5xDm0Oaw5kBQ5hDmUOaQ5tDnUOgQ6JDpUOpQ61DsUO2Q7tDwEPFQ8pD
0EPVQ9pD4UPnQ+xD8kOpQ6ZDo0OgQ55DnEOaQ5lDmMOXAUOYQ5lDmkOcQ59DoUOlQ6hDrEOx
Q7VDukO/Q8RDykPPQ9RD20PgQ+ZD60OsQ6lDpUOiQ59DnUOaQ5nDlwHDlgFDl0OYQ5lDm0Oe
Q6BDpEOnQ6xDsEO1Q7pDv0PEQ8lDzkPVQ9pD4EPlQ69Dq0OoQ6RDoEOdQ5tDmUOXQ5ZDlcOU
AUOVQ5ZDmEOaQ5xDn0OiQ6dDq0OvQ7RDuUO+Q8NDyEPPQ9RD2kPfQ7JDrkOqQ6VDokOeQ5tD
mUOWQ5VDk8OSAkOTQ5RDlkOYQ5tDnkOiQ6ZDqkOuQ7NDuEO9Q8JDyEPOQ9ND2UO1Q7FDrEOn
Q6NDn0OcQ5lDlkOUQ5JDkUOQQ49DkEORQ5JDlEOWQ5lDnEOgQ6RDqEOtQ7JDt0O8Q8JDx0PN
Q9JDuEOzQ65DqUOkQ6BDnEOYQ5VDk0OQQ49DjcOMAUONQ45Dj0ORQ5NDl0OaQ55DokOnQ6tD
sEO1Q7tDwUPGQ8xDu0O2Q7BDqkOlQ6FDnEOYQ5VDkUOPQ4xDisOJA0OKQ4xDjkORQ5RDmEOc
Q6BDpUOpQ65DtUO6Q79DxUO+Q7hDskOsQ6ZDoUOcQ5hDlEOQQ41DikOIQ4bDhQJDhkOHQ4lD
jEOOQ5JDlUOZQ55Do0OnQ61Ds0O4Q71DwUO7Q7RDrUOnQ6JDnEOXQ5NDj0OLQ4hDhUODw4EB
Q4BDgUOCQ4NDhkOIQ4tDj0OTQ5dDm0OgQ6ZDq0OxQ7ZDxEO9Q7ZDrkOoQ6JDnEOXQ5JDjUOJ
Q4VDgkN/Q37DfANDfkOAQ4JDhUOIQ4xDkEOUQ5lDn0OkQ6lDrkPGQ79DuEOwQ6lDokOcQ5ZD
kEOLQ4dDg0N/Q3xDekN4w3cCQ3hDekN8Q35DgUOFQ4lDjUORQ5dDnEOhQ6ZDyEPBQ7pDsUOp
Q6JDnEOVQ49DikOFQ4BDfEN4Q3ZDdMNyA0NzQ3VDeEN6Q35DgUOFQ4pDj0OUQ5lDnkPLQ8ND
u0OyQ6pDokObQ5RDjkOIQ4NDfkN4Q3VDckNvQ25DbcNsAUNtQ29DcUN0Q3dDekN+Q4JDiEON
Q5FDlkPNQ8VDvEOyQ6pDokObQ5RDjUOGQ4BDe0N1Q3FDbkNrQ2lDaMNnAUNoQ2lDa0NtQ3BD
c0N3Q3tDgEOFQ4pDj0PPQ8ZDvUOzQ6tDokOaQ5NDi0OFQ35DeUNyQ25DakNnQ2VDY0NiQ2FD
YkNjQ2RDZ0NpQ2xDcEN0Q3lDfUOCQ4dD0EPHQ75DtEOrQ6JDmkOSQ4pDg0N8Q3ZDcENrQ2dD
Y0NgQ15DXcNcAUNdQ15DYENjQ2ZDaUNtQ3JDdkN7Q39D0kPJQ79DtEOrQ6JDmUORQ4lDgUN6
Q3RDbUNoQ2NDYENdQ1pDWUNYQ1dDWENZQ1tDXUNfQ2NDZkNrQ29Dc0N4Q9NDykPAQ7VDq0Oi
Q5lDkEOIQ4BDeUNyQ2tDZUNgQ1xDWUNWQ1TDUwJDVENVQ1dDWkNdQ2BDZUNpQ21DcUPUQ8tD
wUO1Q6tDokOYQ49Dh0N/Q3dDcENoQ2NDXkNZQ1ZDU0NRQ0/DTgFDT0NQQ1JDVENXQ1pDX0Nj
Q2dDa4EWQwJDB0MLQxBDFEMZQx1DIUMlgRdDAkMHQwxDEEMWQxpDHkMigRhDAkMHQwxDEkMW
QxtDH4EZQwNDCEMNQxJDF0MbgRpDA0MJQw5DEkMXgRtDBEMJQw5DE4EcQwRDCUMOgR1DA0MJ
gR5DA4H/gf+B/4H/gf+BPYYBgRqGBIEXhgeBFYYJgROGCoEThgyBEIYOgQ6GEIENhhGBC4YT
gQmGBwGGDIEGhggBhg6BA4YbgQGGGkb9gf+B/4FehgKBGYYFgRaGCIEUhgqBE4YLgRGGDYEP
hg+BDYYRgQyGEoEKRvVG+IYSgQhG9Eb3hhSBBUb5RvuGF4ECRvNG+4YaAUbtRvuGGkb+RvyA
/4D/gDtGBUZURpdG1YAYRgpGWEapRveGAoAWRkpGrkb7hgWAFEZYRsGGCIASRitGtoYKgBFG
eEb6hguAD0ZJRtOGDYANRiRGq4YPgAxGb4YRgApGLUalhhKACEYhRoOGFIAGRktGroYWgANG
I0amhhmAAka6hhsARnVG2oYcgP+A/4A8RghGREZ8gBlGC0ZVRplG14YBgBdGWUaeRuSGBIAU
RgxGakbEhgeAE0ZgRtyGCYARRihGnIYHRvpG2Ua3RoyAEEZ6RuyGBkbpRtBGx0avRphGfYAO
RklGrYYExvcBRutGyEa5RpRGiUaKRoxGjoANRlZG1Ub3hgJG+kbkRshGpkaBRm1GY0ZiRmtG
fkabRrCADEZ2RsVG8oYBRu1G40baRsZGfEZSRjxGSUZURm9GiUamRtFG6YAKRjBGjUbCRu7G
9wFG4kbJRt1G30a8RoBGekaERqRGvkbQRuZG/IYBgAhGSEaPRrVG20byRvhG70bfRtpGnkbj
RvtG3kbJRtZG6IYGgAVGQkahRrxG10bsRvuGAUb8RvlGzkbhRveGDIADRi9GnkbjhhiAAkYd
Rp9G0oYWRvdGvEZ+gP+A/4BcRi1GUEaGgBlGOEZmRo1GqUbRRu2AFkYeRmBGmka9RtFG30bp
RvFG0IAURjFGc0arRtZG70blRtdG0EaqRnWAFEZXRqxGzkbhRtJGukaMRlaAFUYiRmdGlUal
RrlGm0ZURgSAF0YuRmxGeEY9gBpGDkYuRh2ASUZPRnmAGEYURmlGmsavAUa2RqqAC0YdRg+A
BEY1RmNGT0ZJRldGdEajRsdG3EbVRsxGzkavgAdGGkY5RlRGYkZYRjBGBQBGEUZHRnhGnkac
RpRGtkbJRtZG6kbXRtxGv0aNRlxGLoAGRmtGj0aaRoNGfkaFRnxGgEaNRqRGu0a9RqlGy0bW
RtJGyUbcRthGy0azRl2A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+AAgAAAAAAAAAAAAAAAYAPiA2AEIgOgBCIDoAI
iAOAA4gOgAaIBwCID4AFiBmABIgagAOIG4ABCACIHACI/4j/iB8AiB6AAYgdgAKIHIADiBuA
BIgYgAeIF4ABiASACogNgAEIgA6IDgAIgA6IDgAIgAWIA4AEiA4ACIADiAeAAogOAAiAAogI
gAGIDwAIgAGICgCIDwAIAIgcAIj/iP+IPwCIHoABiB2AAogdgAKIHIADiBuABIgYAIgHgAiI
DQCIBIALiA0ACIAPiA0ACIAFiAOABYgNAAiAA4gGgASIDQAIgAKICIADiA0AiAEAiAqAA4gb
gAOIHIABiB0AiP+I/4gPAIgfAIgegAGIHYACiB2AAogcgAOIIoAIiBWACYgSgAyID4ADiASA
BogPgAKIBoAFiA+AAYgIgASIDwCICoACiByAAogdAIj/iP+IkQCIHoACiESAB4gWgAiIFYAJ
iA9I8YgHgAaID4ABiAeABIgQAIgJgAOIHIACiByAAYj/iP+I/4gagAWIGYAFiBiABogZgAWI
GoAEiBuAA4gbgAKIHYABiB0AiP+I/4j8gASIGoAEiBmABYgZgAWIGoAEiBuAAogcgAKIHQCI
/4j/iP+IHoACiBuAA4gbgAOIG4ADiBqABIgbgAKIHIACiB0AiP+I/4j/iB+AAYgdgAGIHYAB
iA1I/YgOgAGIHYABiByAAYgdgAGIHQCI/4j/iP+ILwCIHUj+AIgdSP0AiB5I+IicSP5I/Uj+
iBvI/QFI/Ej7iBpI/Uj8yPsCiBnI/gHI+wHI+QGIGsj9AUj8SPlI+IgcyPwBSPiIHEj8yPsB
iB1I+0j6iB1I/kj9iB5I/oj/iL9D1UPLQ8FDtUOrQ6FDmEOPQ4ZDfkN2Q25DZkNgQ1tDV0NT
Q1BDTUNMQ0tDSkNLQ0xDTkNQQ1JDVUNZQ1xDXkNhQ9ZDzEPCQ7VDq0OhQ5dDjkOFQ31DdENt
Q2VDX0NZQ1VDUENNQ0tDScNHAkNIQ0pDTENNQ1BDUUNTQ1ZDU0PXQ8xDwkO1Q6tDoUOXQ45D
hEN8Q3RDbENkQ11DWENTQ09DS0NIQ0ZDRcNEAkNDw0QCw0cCQ0ZD10PMQ8JDtUOrQ6FDl0ON
Q4RDe0NzQ2tDY0NcQ1dDUkNNQ0pDR0NFQz9DPUM6QzlDOkM8Qz1DPMM9A0PXQ81DwkO1Q6tD
oUOXQ41DhEN7Q3NDa0NiQ1xDVkNRQ01DSUNCQzxDOEMzQzBDL0MuQy9DLkMzQzVDNEMyQy5D
10PMQ8JDtUOrQ6FDl0ONQ4RDe0NzQ2tDYkNcQ1ZDUUNMQ0NDPEM2QzBDKkMnQyZDJEMgQx9D
I0MkQydDIkMhQ9dDzEPCQ7VDq0OhQ5dDjUOEQ3tDc0NrQ2NDXENWQ1FDR0M+QzhDMkMpQyRD
H0MbQxdDFMMVAUMUQxPDFQFD1kPMQ8JDtUOrQ6FDl0ONQ4RDfEN0Q2xDY0NdQ1dDTkNEQzxD
NUMvQyVDHUMYQxRDD8MMAUMLQwSAAUMAQ9ZDzEPBQ7VDq0OhQ5dDjkOFQ31DdENtQ2VDXkNZ
Q0xDQkM7QzRDK0MhQxlDEUMNQwlDBkMFgARD1UPLQ8FDtUOrQ6FDmEOPQ4ZDfkN2Q25DZkNg
Q1dDTENDQztDNEMqQx9DF0MPQwtDBkMBgAVD1UPLQ8FDtUOrQ6JDmEOQQ4dDf0N3Q3BDaENj
Q1dDTENEQzxDNUMqQx9DFkMPQwtDBoAGQ9RDykPAQ7VDq0OiQ5lDkUOIQ4FDeUNyQ2tDZUNa
Q1BDSEM/QzhDK0MhQxlDE0MOQweABkPTQ8lDwEO1Q6xDo0OaQ5JDikODQ3xDdUNuQ2hDXUNT
Q0tDQ0M8QzBDJkMeQxZDE0MJgAZD0kPJQ8BDtUOsQ6RDm0OTQ4xDhUN+Q3hDcUNsQ2FDWENQ
Q0lDQkM3Qy5DJkMfQxlDDUMGgAVD0UPIQ79DtUOtQ6VDnUOVQ45Dh0OBQ3tDdENwQ2dDXkNW
Q1BDSENAQzZDL0MpQyFDGEMSQwtDB4ADQ9BDyEO/Q7VDrUOmQ55Dl0OQQ4pDhEN+Q3hDdENu
Q2RDXUNXQ1JDSUNCQzpDNEMuQyJDG0MTQw1DCIACQ89Dx0O/Q7ZDrkOnQ6BDmUOTQ41Dh0OC
Q3xDeEN1Q21DZUNfQ1tDUkNNQ0ZDP0M2QypDHkMYQxJDDIACQ85Dx0O/Q7ZDr0OoQ6FDm0OV
Q5BDikOGQ4FDfUN6Q3dDbkNoQ2VDX0NXQ1FDS0NBQzNDKUMgQxtDF0MKgAFDzkPGQ79Dt0Ow
Q6lDo0OdQ5hDk0OOQ4pDhUOCQ39DfEN4Q3JDbkNoQ2FDXUNVQ01DP0M1QytDJ0MiQxVDBgBD
zUPGQ79Dt0OxQ6tDpUOgQ5tDlkOSQ45DikOHQ4RDgkOAQ39DeUNxQ25DZUNhQ1hDT0NDQzxD
N0MxQyZDFUMLQ81DxkO/Q7hDskOsQ6dDokOdQ5lDlUOSQ45DjEOJQ4hDhkOFQ4FDfUN5Q3FD
a0NkQ1xDUkNNQ0RDOkMwQyFDGEPMQ8ZDwEO5Q7NDrkOpQ6VDoEOdQ5lDlkOTQ5FDj0ONQ4xD
ikOHQ4VDgkN+Q3pDc0NrQ2FDWENPQ0ZDPUM2QytDzEPGQ8BDukO1Q7BDq0OnQ6NDoEOdQ5pD
mEOWQ5RDk0OSQ49DjUOLQ4hDhEOAQ3tDdENuQ2dDXUNUQ01DSUNCQ8xDxkPBQ7tDtkOyQ65D
qkOmQ6NDoUOeQ5xDm8OZAUOYQ5ZDlEOSQ49Di0OHQ4JDfkN4Q3VDb0NkQ1vDVwFDzEPHQ8JD
vEO4Q7RDsEOsQ6lDp0OkQ6NDocOfAcOeAUOcQ5pDmEOWQ5NDkEOKQ4ZDgkN9Q3pDc0NvQ2pD
ZkPMQ8dDw0O9Q7lDtkOyQ69DrEOqQ6hDp0Olw6QBw6MBQ6FDoEOfQ51Dm0OXQ5RDj0OMQ4dD
g0OAQ3pDeUN3Q81DyEPEQ79Du0O4Q7RDskOvQ61DrEOqw6kBw6gCQ6dDpkOlQ6RDokOhQ51D
mEOUQ5JDjkOMQ4jDhQFDzkPJQ8VDwEO9Q7pDt0O0Q7JDsUOvQ67DrQNDrkOtw6wCQ6pDqUOm
Q6NDnkOdQ5tDmEOVQ5RDkkPOQ8pDxkPCQ79DvEO5Q7dDtUO0Q7NDssOxAsOyAUOzw7ICQ7FD
r0OuQ61DqkOoQ6dDo0OiQ6NDokPPQ8tDyEPEQ8FDvkO8Q7pDuEO3Q7bDtQLDtgFDt8O4A0O5
Q7jDtwFDtUOyw7EBQ7DDrgFD0UPNQ8lDxUPCQ8BDvkO8Q7tDusO5A8O6AUO7Q7zDvgLDvwND
vkO9w7wBQ7pDu0O6Q9JDzkPLQ8dDxEPCQ8BDv0O+Q73DvALDvQFDvkO/Q8FDwkPDQ8RDxcPG
A8PHAUPFw8YBQ8mB/4H/gf+B/wGGGEb+Rv1G/IEChhbG/gLG/AFG+0b1RvRG84YTxv0BxvwB
RvtG+kb8RvtG+cb4AUb0hhBG/QFG+Ub7RvrG+QFG+Eb3RvhG9kb4RvZG80byhgqBAoYBxv0B
RvhG+0b6xvcBRvbG9ALG8gFG78buAYYCgQKGCMb9Acb7AUb4xvcBRvRG88bxAUbwRu1G7Ebo
RulG6IYNxv0BRvtG+kb5RvdG9UbzRvJG8EbuRu1G60boRuZG40bfRuKGDUb9RvtG+kb5RvdG
9UbzRvBG7kbtRupG6UboRuFG3MbbAUbShgxG/Ub5RvdG+Ub4RvZG80bwRuBG7EbrRuhG5kbi
Rt1G2UbSRslGjoYMRvmBAUbzRvdG9EbxRuEBRtpG6EbmRuJG3UbWRs9GqkaCAYYFgQhG70b4
RvdG9EbxRu5G20bpRudG40beRtZGskaNgQKGAYELRvNG+Ub4RvdG8kbxRu5G7EbqRuRG4EbC
Rp+BBIYCgQgGxvsBRvlG+Eb2RvJG8EbtRutG50bNRq6BBoYMRv1G+0b5RvhG9kbzRu9G3kbZ
RsKBCIYMRv1G+0b6RvlG9kb0RtiBDIYLRv3G+wFG+UbwRuOBD4YKRv1G90bwgRWGBkb7gQ8G
gQWGBoERBoEEhgWBEwaBA4YFgReGBoEWhgeBF4YGgRiGBIEahgKB3EbvhhvG+wFG+oZRRv2G
ukb7RvmGBEbshghGv4YLRv3G+wGGDUbHRsBGs4YLRv1G+4YMRtFGxka7RrRGq4YYRtxG1UbK
RsJGuEauRqmGFkblRt5G2UbTRsZGvUazRqdGoYYTRu1G60blRuBG20bWRs9GxEa2RqtGokab
hhJG8UbtRulG5EbeRtpG1EbPRsNGtEapRqBGl4YQRvdG9UbwRu5G6kbjRt1G1kbRRspGvUat
RqBGl0bKhg1G/Ub3RvVG8kbsRudG30bZRsxGwEa1RqtGo0aORnVGYEa7BoEFhgeBD4YBgQSG
BoESBoEChgaBFAYBhgeBFoYHgReGB4EXhgWBGYYDgRsGgb5Gi0bqhh1G/Ib/hv+GDkb5RvZG
9EbxRuxG50bgRtlG00bNRsFGrkaaRo1GvAaAA0ZMRvqGB0bDRlGADEYLhgGAAkZURt2GBkbS
RmKAD0bsBgBGTEa9hgZG90ZfgBFGewZG04YHRtVGNoATRoeGB0bwRjmAFEZBhgdGWYAWhgVG
uUYwgBeGA0bHRlKAGQZG+EapRk2AG0aMRhqAn0YxRotGvEbiRvqGFEb0RsdGuUaXAEZURqNG
r0awRtVG+YYURvyGAUb3RnVGxUbPRqJGqEbbhgtG9Eb7hgtGv0bVRrhGqEbGRu5G8Eb7hgJG
90b0Ru5G7EblRtZGv0aZRs1G84YCRv5G9Mb6Acb4AUb6RvtGwEbRRrxGokbERtjG1AFG1UbP
RrdGikZzRndGs0a6RrhGtEawRspG7oYDRv1G+kb9hgNGt0bURtZGfUaIRtNG1UbGRsFGxUbL
RtJG0UbSRunG8QFG90b7hgxGyUbpRvmGA0buRvVG60bvhhRG94b/hh1G+4YeRvqGL0b5RvdG
80bwRutG50bfRtVGz0bHRr1Gp0aMRnpGp4YPRv1G+kb4RvVG8UbuQuhC30LWRs9Gx0a8Rq5G
oEaPRpGGEEb8RvlG+EbxQu5C6kLiQttC1EbJRsJGtkaqRqBGlkbNhg5G/kb9RvpG+Ub0QvBC
60LnQt9C2ULORsZGwEa1RqtGo0aVhg5G/kb9QvxC+kL3QvNC7ULpQuRC3ELURs5GyEbARrRG
qkachg5G/kL9QvxC+kL4QvZC8kLtQulC5EbcRtVGzUbGRr5GtEaphgmCAwZG/kL9QvxC+kL4
QvZC8kLuQu1G50bhRthG0UbMRshGwUa2hgaCB0b+Qv1C/EL6QvhC9kLzQu9G7UbpRuZG4EbY
RtRGz0bMRsWGBIIJRv5C/UL8QvpC+UL3QvRC8UbtRulG5kbhRt5G3EbVRtJGz4YDggpC/kL9
wvwBQvpC+EL2QvJG70bsRupG5kbhRt1G20baRteGA4ILQv5C/UL8QvpC+UL3QvRC8kbvRuxG
6EbmRuJG4EbeRt+GAoIGhgKCAkL+wv0BQvxC+kL5QvZC9ELwRu9G7UbqRuhG40bkRuOGAoIF
BoIGQv5C/UL8QvvC+QFC9kL0xvEBRu1G7EbqRulG6IYBgg7C/gFC/UL8QvtC+kL5QvdG9Ub0
RvLG8AFG70btgAZGT0aGRrxGzEbYRtVGykbJRsNGvkbERrdGu0bERsdGt0akRpRGnkaGRjqA
CkZYRqVG1EbSRrxGska1RrJGrEapRqhGf0ZzRnxGa0Y+RjRGXEZvRkBGHoAKRk1Gi0ayRrBG
gkZnRm5GZkZaRkNGC4ABRilGT0Y6Ri5GNkY0RjJGN0YLRiFGMEYPgAdGKkY/RgeACUYLRgpG
EYAcRg9GPEZARiuAAkYBRg1GE0YhgBNGGkZcRnhGiUaIRndGdUaJxooBRpdGkIACRhRGRkZg
RhCAA0YARiNGKUZORklGUUZ/RoZGh0aMRrbGrgFGnUafRp1GkEaHRpFGl0agAEYsRpZGw0bo
RtdGiUZFRhZGBEYlRmlGf0aSRqFGmkanRr1Gw0a8RsRGu0avRpRGc0ZyRmZGXkaHRqZGlEZn
RmFGrUbphgFG5Ua+RoZGXEZtRoxGoUasRrpGx0bVRuRG5UbkRuLG5QFG4UbZRtFGx0a7RqxG
n0aTRnxGXEbJRveGAUb4RtlGq0Z8RnJGmUa4RspG00blRvRG90b1RvJG8UbsRulG5kbkRtxG
1Ea/Rq5Gl0Z/RmBGSUY2RvyGAkbmRshGnUZ8RoZGq0bWRuNG70b6RvlG90b1RvJG7kbrRudG
5UbYRsFGrUacRohGckZaRjxGL0YihgNG30bMRqlGlkaeRsVG6kb7RvxG+0b5RvdG9EbxRu1G
6kbnRt5Gw0alRn9GckZqRldGQ0Y5RjVGLoYDRu1G3EbGRrlGw0bhBsb9AUb7RvlG90b0RvFG
7UbqRuZG00avRn9GT0Y6RkZGSEZGRkpGS0ZJhgRG70bkRt1G6IYCRv1G+0b5RvdG9EbxRu5G
60bmRs5Go0ZsRjPGEwFGJUY1RkFGS0ZNhgZG9oYDRv5G+0b5RvdG9UbzRu9G7EbmRtBGpEZw
Rj1GGkYNRhhGIsYmAUYghgtG/Ub7RvlG+Eb2RvNG8EbsRulG2ka0RotGY0ZJRjRGIEYNRgaA
AYYMRv1G+0b5RvdG9EbxRu1G6kbgRs5Gr0aRRnpGX0Y6RhlGBoABhgxG/Ub7xvkBRvVG8kbv
RulG4kbZRs1GukalRolGakZIRjBGGUZghg1G/Ub7RvhG9kbzRu9G6kbkRtxG0kbIRr5GrEaN
Rm1GVEZARqCGDcb9AUb6RvdG9UbwQu1C5ELcQtRCzEbCRrhGp0aYRodGdUaKhg5G/Eb7RvlG
9UbxQu5C6ULhQthC0ULHRrxGsUalRp1GjkaAhg5G/kb9RvpG9kL0QvBC6ULlQt5C10LMRsJG
u0avRqhGnUaPhg5G/kL9QvxC+kL2QvNC7ELmQuJC20LRRsxGxUa7RrBGpkabhgmCAwZG/kL9
QvxC+kL4QvVC8kLqQuZC4ULaRtJGykbDRrhGsEakhgiCBML+AUL9QvxC+kL4QvVC8kLuQulC
50beRthG0EbLRsRGukayhgWCCEL+Qv1C/EL6QvhC9ULyQu5G7EbpRuRG3UbVRtJGzkbJRsKG
BIIJRv5C/UL8QvpC+EL3QvRC8EbtRulG5kbhRt1G2EbVRtBGzoYDggpC/kL9QvxC+0L5QvhC
9ULyQu5G7EbnRuVG4EbcRttG2UbWhgKCDML9AUL8QvpC+EL2QvNC8ELtRutG6EbmRuBG30bd
RtqGAoIMQv5C/UL8QvtC+UL4QvZC8kLwQu1G7EbpRuZG48biAYYBgg5C/kL9QvxC+8L5AUL2
QvNC8UbwRu1G60bqRuhG54YBgg7C/gFC/UL8QvvC+QFC9kL1RvJG8UbwRu5G7UbsgP+AoEYB
gENGAoB/RgGAW0YCgBxGA4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4AcAAAAAAAAAAAAAAABgAaIFoAJiBWACIgWgAGI/4AC
iByAA4gbAIhogASIGYAEiBmABYgYgAaIGIAGiBeABogXgAeIFoAHiBaAB4gXgAaIEoACiAGA
B4gSgAIIgAeIFIAJiBWACIgWgAiIFoAHiBeAAQiABYgXAAiABYgXAIj/iD+AAYgdgAOIZIAB
iByABogYgAaIF4AGiBeAB4gXgAeIFoAHiBaAB4gWgAeIEYACiAKABogTgAGIAYAHiBOAAQiA
B4gVgAiIFoAIiBaAB4gXgAaIGACIAYADiBgAiP+If4ABiB2AAkhwiEMAiB6AA4gagAeIF4AH
iBaACIgVgAiIFoAHiBaAB4gQgAKIAoAHiBKAAYgCgAaIFACIAYAHiBQACIAHiBaAB4gXgAeI
F4AGiBiABYj/iNmAAYgdgASIQYABiB2ABIgZgAmIFYAIiBWACIgWgAeIFoAHiBGAAYgDgAaI
F4AHiBaAB4gWgAeIFoAIiBaAB4gXgAaIGIAFiP+I+YACiCAAiCAAiB6AAogcgAWIGYAIiBWA
CIgWgAeIFoAHiBeABogXgAeIFoAHiBeABogXgAeIFoAHiBeABogYgASI/4j/iBqAAogfgAGI
H4ABiB2AA4gbgAWIGYAIiBaAB4gXgAaIF4AGiBeAB4gXgAaIF4AHiBaAB4gWgAeIF4AFiBmA
BIj/iP+IOoACiCAAiB+AAYgdgAOIG4AFiBmAB4gXgAaIF4AHiBeABogXgAeIF4AGiBeABogX
gAWIGIAEiBqAA4j/iP+IXQCIIACIH4ABiB2AAogcgASIGoAFiBmABYgYgAaIGIAFiBiABYgZ
gAOIGoADiBqAA4gagAKI/4j/iKAAiB8AiB6AAogcgAOIG4ADiBuAA4gagASIGoADiBqAAogc
gAGIHACIHQCI/4j/iOIAiB6AAYgdgAGIHYABiB2AAYgdAIgdAIh6Q9NDz0PMQ8lDxkPEQ8ND
wcPAAcO/AcPAAUPBQ8JDxEPFQ8ZDyEPKQ8vDzAFDzcPOAUPPQ9DD0QJD1EPRQ85Dy0PIQ8ZD
xUPEw8MBQ8LDwwFDxEPFQ8ZDyEPJQ8tDzEPOQ9BD0UPTQ9RD1UPWw9cBw9gCQ9VD0kPPQ8xD
ykPJQ8fDxgHDxQFDxkPHQ8hDyUPKQ8xDzUPPQ9FD00PUQ9ZD10PZQ9pD28PcAcPdAkPXQ9RD
0UPOQ8xDy8PJAcPIAkPJQ8pDy0PMQ85Dz0PRQ9ND1UPXQ9lD2kPcQ91D3kPfQ+DD4QHD4gFD
2EPVQ9JDz0POQ8zDywHDygFDy0PMQ81DzkPPQ9FD00PVQ9dD2UPbQ91D3kPgQ+FD40Pkw+UB
w+YCQ9lD1kPTQ9FDz0POw80BQ8zDzQFDzkPPQ9FD0kPUQ9ZD2EPaQ9xD3kPgQ+JD5EPlQ+fD
6AFD6cPqAkPZQ9dD1EPSQ9DDzwHDzgHDzwFD0EPSQ9ND1UPXQ9lD20PdQ99D4kPkQ+VD50Pp
Q+pD60Psw+0DQ9pD10PVQ9ND0cPQBEPRQ9JD1EPVQ9dD2UPbQ91D4EPiQ+RD5kPoQ+pD7EPt
Q+5D78PwA0PaQ9hD1kPUQ9LD0QRD0kPUQ9VD10PZQ9tD3UPfQ+JD5EPmQ+lD6kPsQ+5D70Pw
Q/HD8gHD8wFD2kPYQ9ZD1EPTQ9LD0QHD0gFD00PVQ9ZD2EPaQ9xD30PhQ+ND5UPoQ+pD7EPu
Q/BD8UPyQ/PD9AND2kPYQ9ZD1EPTw9IDQ9ND1EPVQ9dD2UPbQ91D30PiQ+RD5kPpQ+tD7UPv
Q/FD8kPzQ/TD9QJD9kPaQ9hD1kPUQ9PD0gND00PUQ9ZD10PZQ9tD3kPgQ+JD5UPnQ+pD7EPu
Q/BD8UPzQ/TD9QHD9gJD2kPYQ9ZD1EPTw9IDQ9ND1EPVQ9dD2UPbQ95D4EPiQ+VD50PqQ+xD
7kPwQ/FD80P0w/UBw/YCQ9lD10PVQ9PD0gHD0QHD0gFD00PVQ9dD2UPbQ91D30PiQ+RD5kPp
Q+tD7UPvQ/FD8kPzQ/TD9QND2UPWQ9RD08PRAcPQAUPRQ9JD00PUQ9ZD2EPaQ9xD3kPhQ+ND
5UPoQ+pD7EPuQ/BD8UPyQ/PD9AND2EPVQ9ND0sPQAcPPAcPQAUPRQ9ND1UPWQ9hD20PdQ99D
4kPkQ+dD6UPrQ+xD7kPvQ/BD8cPyA0PXQ9RD0kPQQ8/DzgNDz0PQQ9FD00PVQ9dD2UPbQ91D
4EPiQ+VD50PpQ+pD7EPtQ+5D78PwA0PWQ9ND0UPPQ85DzcPMAcPNAUPOQ89D0UPTQ9VD10PZ
Q9tD3UPfQ+JD5EPmQ+hD6UPqw+wBw+0DQ9VD0kPQQ85DzMPLAUPKw8sBQ8xDzUPPQ9BD0kPU
Q9ZD2EPbQ91D30PhQ+ND5UPmQ+dD6EPpw+oDQ9ND0UPOQ8xDy8PJAUPIw8kBQ8pDy0PMQ85D
z0PRQ9ND1UPYQ9pD3EPeQ+BD4UPjQ+RD5cPmAcPnAkPSQ89DzUPKQ8lDyEPHw8YCQ8dDyEPJ
Q8tDzEPOQ9BD0kPUQ9ZD2UPaQ9xD3kPfQ+BD4cPiAcPjAkPQQ81Dy0PIQ8fDxQHDxANDxUPG
Q8hDyUPLQ81Dz0PRQ9ND1UPXQ9hD2kPbQ9xD3cPeAcPfAUPeQ89DzEPJQ8dDxUPDw8IBw8EB
w8IBQ8NDxUPGQ8hDyUPLQ81Dz0PRQ9ND1EPWQ9dD2EPZw9oEQ81DykPHQ8VDw0PBQ8DDvwRD
wEPBQ8NDxEPGQ8dDyUPLQ81Dz0PQQ9FD08PUAUPVw9YCQ9VDzEPJQ8ZDw0PBQ79DvkO9w7wD
Q71DvkO/Q8FDwkPEQ8VDx0PJQ8pDzEPNQ85Dz0PQw9EEQ8pDx0PEQ8FDv0O9Q7tDusO5A0O6
Q7tDvEO9Q75DwEPBQ8NDxUPGQ8hDyUPKQ8vDzAVDyUPFQ8JDv0O9Q7tDuUO4Q7fDtgLDtwFD
uEO5Q7tDvEO9Q79DwUPCQ8NDxcPGAUPHw8gFQ8RDwUO9Q7tDuUO3Q7XDtAHDswHDtAFDtUO2
Q7dDuEO6Q7tDvUO+Q79DwEPBQ8LDwwVDxkPDQ79Du0O5Q7dDtUOzQ7LDsQRDskOzQ7RDtUO2
Q7dDuUO6Q7tDvEO9Q77DvwVDxUPBQ75DukO3Q7VDs0OxQ7BDr8OuA0Ovw7ABQ7JDs0O0Q7VD
tkO3Q7hDuUO6w7sFQ8RDwEO8Q7hDtkOzQ7FDr0OuQ63DrAFDq8OsAUOtw64BQ69DsUOyQ7ND
tEO1w7YBw7cFQ8NDv0O7Q7dDtEOyQ69DrUOsQ6tDqsOpAsOqAUOrQ6xDrUOuQ69DsEOxw7IB
Q7PDtARDs4H/gf+B/4H/gdyGA4EWhgqBEIYPgQuGFIEGhhCBAoYFgQKGDoEIhhKBDYYNgRCG
C4EShgqBFIYMgRKGA4EDhgWBEYYBgQaGBYEahgaBGoYFgRqGBoEZhgeBGYYHgQcGgRCGB4EF
BoERhg6BBYa3gb8GgRmGBoEThgyBDoYSgQiGF4EEhhMBhhmBBoYUgQuGD4ENhg2BEYYLgROG
DIEShgSBAYYHgRCGAoEEhgeBDwaBB4YIgRiGB4EYhgiBF4YJgReGCYEGRviBDoYQRviBDoYQ
RvuGvICfRoiAGEYKRjBGaUagRs1G7QZGqYATRjhGX0adRtFG+YYGRslGF4ANRjRGZUawRvCG
DEboRkOACEYwRmpGsUbthhJGa4AERj1GkUbYhhdGj0YORl5GokbdhhNG9oYZRvtGwUaNRmZG
NQBG/IYURtlGkEZhRjZGAoAERmhG0oYPRtVGl0ZkRiaACYYNRuVGrUZmRiSADYYLRspGQkYE
gBCGDUZpgBCGBEbuRtGGB0KeQgeADoYCRr5GXEYORgtGp4YGAkLSQj6ADQZGxkZDgARGdYYF
ggJCeEIRgAtGboAHRkFG14YEggJC2EJygBRGDEashgGCAoYDRtNCVIAIRjKACkZ3ggOGA4IB
QrpCO4AGRqyAC0JBQs2CAYYEggJCpMJBAUZARjBGRkZmBkZ0gAtCC0J7AoYEggWGBUYdRgxG
PUZQRl5GcUaPRp9GqUasRsVC2kLpQvNC+4YFggEGggGGEIIGhgKCA4YRgg6GEIINhhGCDIYS
ggIGggSGK4IFBoIIwv4Bwv0BwvsBQvpG+kb3xvUBxvQBRvMGggYGggrC/gHC/QHG/AFG+0b6
xvkBxvgBBoIFBoINQv7G/gJG/Mb9BIYBggQGggYGggYGxv4DhgaCAYYBggeGAYIFhg+CB4YB
ggWGEIIGhgKCA4YTggOGBQKG/4YZggaGF4IIhhaCCIYWggmGFIINhgRG6Ub7hgmCEIYDRuxG
+YYIggWGAYIIhgNG90buRv2GB4IFhgKCB4YERuhG84YHggWGAoIHhg6CB4YBggaGDoIPhg+C
EIYOgg+GD4IPhg+CDYYSggmGCYIQwv4Bwv0BQvvC+gFG+Eb2xvUBRvTG8gEGggYGggnC/gHC
/QFC/Eb8xvoBRvhG+cb4AgaCE8L+AUb+xv0BxvwBRv3G/AFG/QaCFcb+BIYFggMGghCGDoII
BoIFhg+CCAaCBYYQggaGAoIDhhUChuKCAYYbggiGFYIJhhWCCoYUgguGBkb3hgqCD4YDRuBG
9YYJghCGAkbVRuZG94YIggYGggmGAUbNRttG6kb9hgeCBgaCCYYBRs1G1EbjRvCGB4IHBoII
hgFG0EbNRthG6Ub7hgaCEYYBRtVGyUbORt5G8YYGghCGAkbaRsdGxUbWRuuGBoIQhgJGwka2
RrVGxkbhRvZG80b+Bkb9RvFC88L6AULzQuFC6ULxQvxC70L5QvtC70LlQu9C/kL1QvgCRvpG
+Eb9RmlGqEagRqRGt0bFRs1GzkbGRrtGqkKuQsJC60L9QvJC90L6ggJC+ULvwuwBQujCzgFC
10bzRvhG9kZURoFGeUZlRkJGYEZVRmdGnUbJxucBQv1C/AJC70LxQulC4ULlQuNC3ULhQvVC
+EL9AkL2RvRG/Eb6RvlGdkZ6RmtGgEaKRq5GwEbaRvBG90bzRu9C/kL4QvoCQvxC6UL4Qv5C
+ELtQvJC9UbmRt9G1ka+RrxGtEalRtqA/4AbRgGAGUYDgBpGAoAaRgGAE0YBgB9GA4ACRgKA
PUYBgBdGAoAnRgGAhEICgB9CAYBCQgKAIEIBgCBCAgDCAQGAAUYCgCdGAoASQgGAFEIBQgNC
AYAYQgKACkIBgBNCAoD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+ADwAAAAAAAAAAAAAAAYAEiBiABYgbgAKIHACI/4hNgAKIHIAC
iBuAAogbgAKIHIABiByAAojRgAKIGoAIiBWACYgUgAmIFIAJiBWACIgVgASIGYAKiBqAA4gb
gAKIHACI/4hNgAOIGoADiBuAAogbgAKIG4ADiP+IDgCIHYAJiBSACYgUgAmIFYADiBqABIgZ
gAqIGoADiBuAAYgdAIj/iEyAA4gbgAOIGoADiBqABIgagAOI/4gOAIgdgAGIHIAIiBWAA4gb
gAOIGoAEiBmACogagAKIHIABiB0AiP+ITIACiBuABIgagAOIGoAEiBmABIj/iC4AiB2AAYgc
gAKIG4ADiBqABIgZgAmIG4ACiByAAYj/iGuAAogbgAOIG4ADiBqAA4gbgAOI/4guAIgdgAGI
HIACiBuAA4gagASIGYAISOuIG4ABiB0AiP+IbYABiByAAogbgAKIG4ADiByAAYj/iG4AiB0A
iB2AAYgcgAKIAYACiByAAYj/iIyAAYgcgAGIHIACiByAAYgdAIj/iK4AiB2AAYgBgAGI/4jr
AIgdAIj/iPEAiP+I/4j/iP+I/4j/iP+I/kPCQ75DukO2Q7NDsEOuQ6xDqkOpQ6jDpwPDqAFD
qUOqQ6tDrEOtQ65Dr8OwAcOxBEOwQ8FDvUO5Q7VDskOvQ61Dq0OpQ6jDpgHDpQLDpgFDp0Oo
Q6lDqkOrw6wBQ63DrgZDwUO9Q7lDtEOxQ65DrEOqQ6hDpsOlAcOkA8OlAUOmQ6dDqEOpQ6rD
qwHDrAVDq0PBQ7xDuEO0Q7FDrkOrQ6lDp0Omw6QBw6MDw6QBQ6VDpkOnw6gBQ6nDqgLDqwLD
qgFDwUO8Q7hDtEOwQ61Dq0OoQ6dDpUOkQ6PDogPDowFDpEOlQ6bDpwFDqMOpAsOqAcOpAkPB
Q7xDuEO0Q7BDrUOrQ6hDpkOlQ6RDo8OiA8OjAUOkQ6XDpgFDp8OoAcOpBUOoQ8FDvEO4Q7RD
sEOtQ6tDqUOnQ6VDpEOjw6IDw6MBQ6RDpcOmAUOnw6gBw6kFQ6hDwUO9Q7lDtEOxQ65Dq0Op
Q6dDpkOlQ6TDowRDpMOlAUOmQ6dDqMOpAcOqBMOpAUPCQ71DuUO1Q7JDr0OsQ6pDqEOnQ6ZD
pcOkA8OlAUOmQ6dDqMOpAUOqw6sGQ6pDw0O+Q7pDtkOzQ7BDrUOrQ6lDqEOnw6YBQ6XDpgJD
p0OoQ6nDqgFDq8OsAcOtBUOsQ8RDv0O7Q7dDtEOxQ69DrUOrQ6pDqcOoAUOnw6gBw6kBQ6pD
q0OsQ63DrgHDrwHDsAPDrwFDxUPBQ71DuUO1Q7NDsEOvQ61DrEOrw6oDw6sBQ6xDrUOuQ69D
sMOxAcOyAcOzA8OyAUPGQ8JDvkO6Q7dDtUOyQ7FDr0Ouw60BQ6zDrQHDrgFDr0OwQ7FDskOz
Q7RDtcO2AsO3AcO2AkPHQ8NDwEO8Q7lDt0O1Q7NDskOxw7AEQ7FDskOzQ7RDtUO2Q7dDuEO5
w7oBw7sDw7oBQ8lDxUPCQ75Du0O5Q7dDtUO0w7MEQ7RDtUO2Q7dDuEO5Q7pDu0O8Q71DvsO/
BUO+Q8tDx0PEQ8BDvkO7Q7pDuMO3AcO2AkO3Q7hDuUO6Q7tDvEO9Q79DwEPBQ8JDw8PEBUPD
Q8xDyUPGQ8JDwEO+Q7xDu8O6BEO7Q7xDvUO+Q79DwUPCQ8RDxUPGQ8dDyMPJBUPIQ85Dy0PI
Q8VDwkPBQ79DvsO9A0O+Q79DwEPBQ8NDxEPGQ8dDyUPKQ8tDzEPNQ87DzwPDzgFD0EPNQ8pD
x0PFQ8NDwsPBBEPCQ8NDxEPGQ8dDyUPKQ8xDzkPPQ9FD0kPTw9QGQ9JDz0PMQ8lDx0PGQ8XD
xANDxUPGQ8dDyUPKQ8xDzkPPQ9FD00PVQ9ZD10PYQ9nD2gRD2UPTQ9FDzkPMQ8pDyUPIw8cC
Q8hDyUPKQ8tDzUPPQ9BD0kPUQ9ZD2EPaQ9tD3MPeAcPfAUPgw98CQ9VD0kPQQ85DzMPLAcPK
AcPLAUPMQ85Dz0PRQ9ND1UPXQ9lD20PdQ99D4EPiQ+PD5AHD5QLD5AFD10PUQ9JD0EPPQ87D
zQJDzkPPQ9BD0kPTQ9VD10PZQ9tD3UPfQ+JD40PlQ+dD6MPpAcPqAsPpAUPYQ9ZD1EPSQ9HD
0AND0UPSQ9ND1UPXQ9lD20PdQ99D4kPkQ+ZD6EPqQ+tD7EPtw+4BQ+/D7gJD2UPXQ9VD1EPT
w9ICQ9ND1EPVQ9dD2UPbQ91D30PhQ+ND5kPoQ+pD7EPuQ+9D8cPyAcPzAsPyAUPaQ9hD18PV
AcPUAUPVQ9ZD10PYQ9pD3EPeQ+BD4kPlQ+dD6kPsQ+5D8EPyQ/ND9cP2AcP3AsP2AUPbQ9lD
2EPXw9YCQ9dD2EPZQ9tD3EPfQ+FD40PmQ+hD60PtQ+9D8kP0Q/ZD90P4Q/nD+gRD+UPcQ9pD
2cPYA0PZQ9pD3EPdQ99D4kPkQ+ZD6UPrQ+5D8EPzQ/VD90P5Q/rD/AHD/QRD/EPcQ9tD2sPZ
AkPaQ9tD3EPeQ+BD4kPkQ+dD6UPsQ+5D8UPzQ/ZD+EP6Q/xD/UP+gwVD/kPdQ9xD20Paw9sB
Q9xD3UPeQ+BD4kPkQ+dD6UPsQ+5D8UPzQ/ZD+EP7Q/1D/oMIQ93D3ARD3UPfQ+BD4kPkQ+ZD
6UPrQ+5D8UPzQ/ZD+EP6Q/2DCkPeQ93D3AFD3UPeQ99D4EPiQ+RD5kPoQ+tD7kPwQ/ND9UP4
Q/pD/IMLgf+B/4H/gbfDAAHDAQHDAAKBFkMAQwHDAgFDA8MCAUMBwwABgRRDAEMCwwMBwwQC
QwNDAkMBQwCG3IEChgSBAgaBA4YLgQaGBoEXhiCBAYYdgQOGG4EFhhmBB4YXgQmGE4EOhg+B
EoYJgf+B5YbrRvtG+AbG+wFG+Eb7hgeBBIYJgQiGAoEIBkbzhgpG+8b3AYYGxvwBRvlG4kaz
RspG7cb3AQYBRuJG7IYVRvpG8kb4hgOBAkb7hhTG+AFG+oYDgQSGGoEGRvNG+4YVRviBCIYV
gQsGRvFG7YYPgQ/G+QFG84YJgRaGBYH/gceG+Eb4RtFGXkZfRkhGR0achglG50avRolGeEZ6
RpJGtUbHRteGAkbeRqBGTIADRkNGaYYYRr6AAkYBRtSGAUYtRraGFUatgANGtIYBgAFGOYYK
RvxG40bZRvuGBEb3Rq6AAkYgRsGGAYACRkVG6oYIRtpGpUacRsdG50bvRupG6UbnRuxGzEY8
gAFGdkbghgGABEY4RqeGBkbYRqtGoEbGRuXG4wFG5UbpRvJG9EbNRq5GskbZBkb9BoAGRh9G
qIYERutGy0bGRttG/IYLRoeACEY3RnbGuAFG4kbtRt1G7Ub7hgtGaYAORkdGb0bXRvaGCEb8
RotGOoASRmxG2EbtRvRG+UbrRt9Gj0ZBRieA/4DEhtpG9UbvRrZGuUbqhgRG50bwhgFG30bY
RttGl0ayRsZG2UbzRvWGBUbURg+ABEYCRvKGBUbaRrxGpEZrRheAA0YdRkpGV0ZrRndGdUZE
gAdGokZiRp9G5YYHRvhG1UasRo1Gm0bQRveGAkb1RsBGIYAFRiFGmoABRnJG4oYIRsZGW0Yu
RllGzkb6Rv1G6kbXRpOABkYSRnSAAkZLhghGlYADRmNGdUZgRkNGEYAHRjCAA0ZYRsqGBkZd
gBBGEoAFRhNGgIYERliAGUYYRqlG8Eb3RvNGTYAGRgRGOEZhRohGmUaeRplGikZVgBNGS0aY
RqNGvUbgRuxG9UbzRu5G5kbCRkmAE0ZlRspG4Eb4RvVG80bFRsFGu0aHRi6AFUY8RnhGi0Zo
RjyA/4DHRqZGl0ZmRmhGkUbERupG6AbG9QJG5EbVQtdC0UbLRtVC20LUQr/GzwFGvEbERslG
v0bLRthG4UbnRuBGxUafRoBGd0aARqVGxUbaRuZG30btRv1G/oYBRvdG8kb7Bkb9RupG/QZG
8Ub5hgRG+0b4RrxGnkaURmxGV0ZmRo9GnEasRrRGyEbgRuFG1kbYRt9G1UbvRvqGAkb7RvVG
/Eb+RvxG6wZG+EbuRudG4UakRrlGn0ZWRjpGYkZmRnJGg0abRrxG00b7Bkb4RutG9kbsRvYG
Ru1G3UbgRtJGyUaxRp5GpEacRqZGrAZG3kbIRtFGwUbHRs1Gw0a7RsBGwUbHRtFG+gZG6Eb8
RvBGykbPRrRGlEZ/RoVGmUatRrJGuUa1RqpGvEbMRqFGvUatRrlGzkb2RuxG50bVRs5GzUa2
RrpG50bmRu1G40bZRsxG4ka/RrFGtUaxRshGrUacRoBGZUZURmBGZkaIRodGQkZDRnNGpkbD
RsVGs0aGRnFGW0ZTRmJGdEaLRqBGjkaERpBGhEaCRoFGf0ZwRlBGDIAERmBGdUaJRk5GGUYS
RkFGTUZTRhWAF0ZCRo1GjEaCRnxGMEYYgBlGNkamRttG1kayRqJGdUZDgAZGCkYWRgyADkZt
Rt4GRtlG2kbNRq5GlEYugBZGBEaTRrdG0Ea/Rr5Gv0a2RjeAGEYHRk5GikapRsJGzEYkgBtG
U0acRqBGIID/gP+Af0YDRgGAAkYCgAJGA4ABxgIBxgMBRgGAFEYCRgNGAYAFRgGAEEYDgARG
AoAKRgGADEYBgLZGAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gLgAAAAAAAAAAAAAAAGIGYAFiBmABYgZgAOIHIABiP+I
hgCIHYACiBuAA4gaSMKABIgZgAWIGIAHiBeAB4gXgAeIFoAIiBWACYgUgAqIE4ALiBSACogV
gAGIeIAGiBeAB4gYgASIGoADiByAAYj/iIeAAYgcgAOIG4AEiBmABYgZgAaIF4AHiBeAB4gV
AAiAB4gUgAEIgAeIE4ACCIAHiBKAAwiAB4gTgAKImIAGiBeAB4gXgAWIGYAEiBqAA4gcAIj/
iGqAAYgdgAKIG4AEiBmABYgZgAWIGYAGiBeAB4gUAIgBgAeIE4ABiAGAB4gSgAKIAYAHiBGA
A4gBgAeIEoACiJiABogXgAeIF4AGiBeABYgYgAWIGoADiBwAiP+ITIABiB2AAogbgASIGoAE
iBmABYgZgAWIGYAGiBiABYgUAIgCgAaIE4ABiAKABogSgAKIBkhYgAGIr4AFiBiABogXgAaI
F4AGiBiABIgZgASIGoADiBwAiP+ILoABiB2AAogbgAOIG4AEiBmABYgZgAWIGYAFiBmABYgT
AIgEgAWIEoABiASABYgRgAKIuYAEiBqABIgZgAWIGIAFiBiABYgZgAOIGoADiBuAAogcAIjw
AIgegAGIHIADiBuAA4gbgASIGYAFiBmABYgZgAWIGYAFiBIAiAWABYgRgAGIBYAFiBGAAYgJ
gAGIroACiBuAA4gagAWIGYAEiBmABIgZgASIGoACiBuAAogcgAGI8ACIHYACiByAA4gbgANI
04gZgAWIGYAFiBmABYgZgAWIGYAFiBmABYgRAIgGgAWIEIABiAaABIivAIgdgAGIHIACiByA
A4gagASIGYAEiBqAAogbgAKIHACIHQCI0YABiB2AAogcgAOIGoAFiBmABYgZgASIGoAEiBqA
BIgagASIGoAEiBqABIgRAIgHgASIHIACiM0AiB2AAogcgAOIGoAEiBmAA4gbgAKIG4ABiB0A
iNGAAYgcgAOIG4AEiBqABIgagASIGYAFiBmABYgZgAWIGYAFiBmABYgZgAWIGYAFiBAAiAeA
BYgcgAKIzACIHoABiByAA4gagASIGoACiBuAAYgdAIjwAIgdgAWIGYAFiBmABYgZgASIGoAE
iBqABIgagASIGoAEiBqABIgagASIGoAFiBmABIgagASIMUPew90CQ95D30PgQ+JD40PlQ+hD
6kPtQ/BD8kP1Q/dD+kP8Q/6DC8PeA0PfQ+BD4kPjQ+VD50PpQ+xD70PxQ/RD9kP5Q/tD/oMM
w94CQ99D4EPhQ+ND5UPnQ+lD60PtQ/FD80P2Q/hD+0P9gw3D3wJD4EPhQ+ND5EPmQ+hD6kPt
Q+9D8kP1Q/dD+kP8Q/6DDcPfAUPgQ+FD4kPkQ+ZD6EPqQ+xD7kPxQ/RD9kP5Q/tD/YMOw+AB
Q+FD4kPkQ+VD50PpQ+tD7kPwQ/JD9UP4Q/pD/EP+gw1D/kPgQ+FD4kPkQ+VD50PpQ+tD7UPv
Q/JD9EP3Q/lD+0P9gw1D/kP8Q+FD4kPjQ+VD50PoQ+pD7UPvQ/FD80P2Q/hD+0P9gw1D/kP8
Q/pD4kPjQ+VD5kPoQ+pD7EPuQ/FD80P1Q/hD+kP8Q/6DDEP+Q/xD+kP4Q+ND5UPmQ+hD6kPs
Q+5D8UPzQ/VD90P5Q/xD/oMNQ/1D+kP4Q/VD5UPmQ+hD6kPsQ+5D8EPzQ/VD90P5Q/tD/oMN
Q/1D+0P4Q/ZD80PmQ+hD6kPsQ+5D8UPzQ/VD90P5Q/tD/YMNQ/5D/EP5Q/ZD80PwQ+hD6kPs
Q+9D8UPzQ/VD+EP6Q/xD/oMOQ/1D+kP3Q/RD8UPuQ+tD7UPvQ/FD9EP2Q/hD+kP8Q/6DDkP+
Q/tD+UP1Q/JD70PsQ+1D70PyQ/RD90P5Q/tD/YMQQ/1D+kP3Q/RD8EPtQ+lD8EPyQ/VD90P6
Q/xD/oMRQ/xD+UP2Q/JD70PrQ+dD80P1Q/hD+0P9gxND/EP5Q/VD8UPtQ+pD5kP2Q/lD+0P+
gxRD/EP4Q/VD8EPsQ+hD5EP6Q/2DFkP8Q/hD9EPwQ+tD50PjQ/6DCogCgwlD/EP4Q/RD70Pr
Q+dD4oMHCIAFiAGDB0P9Q/lD9UPvQ+tD50PigwWIAoAFiAODBUP+Q/pD9UPwQ+tD50PigwOI
BIAFiASDBUP7Q/dD8UPsQ+dD44MBiAaABYgFgwRD/UP4Q/JD7kPpQ+QDiAeABYgFgwVD+kP0
Q+9D6kPliAiABYgGgwRD/UP3Q/JD7UPniAiABYgHgwRD+kP0Q+9D6ogIgAWICIMDQ/1D+EPy
Q+2ICIAFiAmDA0P7Q/ZD8YgIgAWICoMDQ/pD9YgIgAWIC4MDQ/mICYAEiAyDAkP+gRNDAEMC
QwPDBAHDBQHDBAFDA0MCQwGBEkMAQwJDA0MEwwUEQwRDA0MCQwCBEUMAQwFDA0MEwwUBwwYC
QwVDBEMDQwFDAIERQwBDAkMEwwUBwwYCwwUBQwNDAkMBQwCBEEMAQwFDA0MEQwXDBgNDBUME
QwNDAUMAgRBDAEMBQwJDA8MFAcMGAkMFQwRDA0MCQwCBEUMAQwJDA0MEwwUBwwYBwwUBQwRD
AkMAgRFDAEMBQwNDBMMFAcMGAcMFAUMEQwNDAYERQwBDAUMCQwNDBMMFBEMEQwNDAUMAgRBD
AEMBQwJDA0MEwwUBQwbDBQFDBEMDQwJDAIEQQwBDAUMCQwNDBEMFwwYCwwUBQwRDAkMBgRBD
AEMBQwNDBEMFwwYEQwVDBEMDQwJDAIEPQwBDAUMDQwRDBUMGwwcDQwZDBUMEQwNDAYEPQwFD
AkMEQwVDBkMHwwgEQwdDBUMEQwJDAIENQwBDAkMDQwVDBkMIwwkBwwoCQwlDCEMHQwZDBEMC
QwCBDEMBQwNDBUMGQwhDCUMKwwsBwwwBQwtDCkMJQwhDBkMEQwJDAIEKQwBDAkMEQwZDCEMJ
QwtDDEMNww4Cww0BQwxDC0MJQwdDBUMCQwCBCUMBQwNDBkMIQwpDC0MNQw5DD8MQBEMPQw5D
DEMKQwhDBUMCQwCBB0MAQwJDBUMHQwlDC0MNQw9DEEMRQxLDEwNDEkMRQw9DDkMLQwlDBkMD
QwCBBkMBQwNDBkMJQwtDDUMPQxFDE0MUQxXDFgPDFQFDE0MSQxBDDUMKQwdDBEMBgQZDBUMH
QwpDDUMPQxFDE0MVQxdDGEMZwxoCQxlDGEMXQxZDFEMSQw9DDEMJQwVDAoEGQwlDC0MOQxFD
FEMWQxhDGUMbQxzDHQFDHsMdAUMcQxpDGUMXQxRDEUMOQwtDB0MDQwCBBUMNQxBDE0MWQxhD
GkMcQx5DH0MgQyHDIgFDIUMgQx9DHkMcQxpDF0MUQxBDDUMJQwVDAYEFQxJDFEMXQxpDHUMf
QyFDIkMkQyXDJgJDJUMkQyNDIUMfQx1DGkMWQxNDD0MLQwdDA4EFQxZDGUMcQx9DIUMkQyZD
J0MpwyoEQyhDJ0MlQyNDIEMeQxpDFkMSQw5DCkMGQwGBBEMbQx5DIUMkQyZDKUMrQyxDLUMu
wy8CQy5DLUMrQylDJ0MkQyFDHUMaQxZDEUMNQwhDBIEEQyBDI0MmQylDK0MuQzBDMUMyQzPD
NAHDMwFDMUMwQy5DK0MoQyVDIUMdQxlDFUMQQwxDB0MCgQNDJUMoQytDLkMxQzNDNUM2wzgB
wzkBwzgBQzZDNEMyQzBDLUMqQyVDIUMdQxlDFEMPQwtDBkMAgQJDKkMtQzBDM0M2QzhDOkM8
Qz3DPgNDPUM7QzlDN0M1QzJDLkMqQyZDIkMdQxhDFEMPQwpDA4ECQy9DMkM1QzlDO0M9Qz9D
QUNCw0MDQ0JDQEM+QzxDOkM3QzNDL0MrQyZDIkMdQxhDE0MOQwhDA4EBQzRDN0M6Qz5DQEND
Q0VDRkNHQ0jDSQFDSENHQ0ZDRENBQz9DPEM4QzRDMEMrQydDIkMdQxhDE0MMQwdDAgFDOUM9
Q0BDQ0NGQ0hDSkNMQ03DTgNDTUNLQ0lDR0NEQ0FDPkM5QzVDMUMsQydDIkMdQxhDEkMMQwdD
AoH/gf+B/4H/gf+B/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8A
AAAAAAAAAAAAAAGI/4hWgAKIHYAFSDmIGYAGiBiABogZgAWIGoAEiBqABIgbgAOIBYACiBOA
AogCgAaIEoACiAGABogTgAIIgAeIFIAJiBWACIgWgAiIFoAHiBeABogYgAGIHYABiB2AAYge
AIgeAIj/iHeABIgagAaIGYAGiBmABYgagASIG4ADiBuAA4gHAIgTgAKIA4AFiBOAAYgCgAaI
E4ABiAGAB4gTgAEIgAeIFYAIiBaACIgWgAeIF4AGiBgAiB4AiB4AiB4AiP+It4AEiBuABYga
gAWIGoAEiBqABIgbgAOICACIEoACiAWAA4gTgAGIA4AGiBKAAYgCgAaIFACIAYAHiBaAB4gW
gAiIFoAHiBeABoj/iP+IUYADiByABYgagASIG4ADiBuAA4gcgAKIB4ACiBKAAYgEgAWIEwCI
A4AGiBeAB4gXgAaIF4AGiBaACIgWgAeI/4j/iHGAA4gcgASIGoAEiBuAA4gcgAKICQCIEoAB
iAaAA4gTAIgFgAWIGIAFiBiABogXgAaIF4AHiBaAB4gWgAWI/4j/iHSAAogdgAOIG4ADiAwA
iA+AAYgKgAGIEQCICIACiBqABIgZgAWIGIAGiBiABYgYgAaIF4AGiBaABoj/iP+Ik4ABiB6A
AogdgAGIDACIEACICoABiBqAA4gagASIGoAEiBmABYgYgAaIF4AGiBeABogZgAGI/4j/iJYA
iB+AAYgeAIgMAIgcgAGIGoADiBuAA4gagASIGoAEiBmABYgYgAaIF4AEiP+I/4jVAIgOAIgc
AIgbgAKIG4ACiByAAogbgAOIGoAEiBqABIgZgAWIGIAEiP+I/4j/iAIAiBuAAogcgAKIG4AC
iByAAogbgAOIG4ADiBqABIgZgASI/4hwgwOIHIMCiB2DAYj/iGqAAYgcgAKIHIABiB2AAYgc
gAKIHIACiBuAA4gagASI/4hTQz9DQkNFQ0hDS0NNQ09DUUNSQ1PDVAFDU0NSQ1FDT0NMQ0pD
R0NDQz9DOkM2QzFDLUMoQyJDHUMXQxJDDEMHQ0RDR0NKQ05DUENTQ1VDV0NYw1kDQ1hDVkNU
Q1JDT0NMQ0lDRENAQzxDN0MyQy1DKEMjQx1DF0MSQw1DSUNMQ09DU0NWQ1hDWkNcQ11DXsNf
AUNeQ11DXENaQ1hDVUNSQ09DSkNGQ0JDPUM4QzNDLkMpQyNDHUMYQxNDTkNRQ1VDWENbQ15D
YENhQ2PDZAFDZUNkQ2NDYkNgQ15DW0NYQ1VDUENMQ0hDQ0M+QzlDNEMvQylDI0MeQxlDU0NW
Q1pDXkNgQ2NDZUNnQ2hDacNqAkNpQ2hDZkNkQ2FDXkNbQ1ZDUkNOQ0lDREM/QzpDNUMvQylD
JEMfQ1hDXENfQ2NDZkNoQ2pDbENuQ2/DcAJDb0NtQ2xDakNnQ2RDYUNcQ1hDVENPQ0tDRkNA
QztDNUMwQypDJUNdQ2FDZENoQ2tDbUNwQ3JDc0N0w3UCQ3RDc0NyQ3BDbUNqQ2dDYkNeQ1pD
VUNRQ0xDR0NCQztDNkMxQytDYkNlQ2lDbUNwQ3NDdUN3Q3lDesN7AkN6Q3lDd0N1Q3NDcENt
Q2hDZENgQ1xDV0NSQ01DSENCQzxDN0MyQ2ZDakNtQ3FDdUN3Q3pDfEN+Q3/DgANDf0N9Q3tD
eUN2Q3NDb0NrQ2ZDYkNdQ1hDU0NOQ0hDQ0M9QzhDakNuQ3JDdkN5Q3xDfkOBQ4NDhMOFAUOG
Q4VDhEODQ4FDf0N8Q3lDdUNxQ21DaENkQ19DWkNVQ05DSUNEQz9DbkNyQ3VDekN9Q4BDg0OF
Q4dDicOKAUOLQ4pDiUOIQ4ZDhEOCQ39De0N3Q3NDbkNqQ2VDYENbQ1VDUENKQ0VDcUN1Q3hD
fUOAQ4RDhkOJQ4tDjUOOw48CQ45DjUOMQ4pDh0OEQ4BDfUN5Q3VDcENrQ2dDYkNbQ1ZDUUNM
Q3NDd0N7Q4BDg0OHQ4pDjEOPQ5FDkkOTw5QBQ5NDkkORQ49DjUOKQ4ZDg0N/Q3tDdkNyQ21D
aENiQ11DWENTQ3VDeUN9Q4JDhkOJQ4xDj0OSQ5RDlUOXw5gBw5cBQ5VDlEOSQ49Di0OIQ4RD
gEN8Q3hDc0NuQ2hDY0NeQ1lDdUN6Q35Dg0OHQ4tDjkORQ5RDlkOYQ5rDmwNDmkOYQ5ZDlEOR
Q41DikOGQ4JDfUN5Q3RDbkNqQ2VDYEN2Q3pDf0OEQ4hDjEOQQ5NDlkOZQ5tDnMOeAUOfQ55D
nUOcQ5pDmEOVQ5JDj0OLQ4dDg0N/Q3pDdENwQ2tDZkN1Q3pDf0OEQ4hDjUOQQ5RDl0OaQ5xD
nkOgw6EDQ6BDnkOcQ5lDl0OTQ5BDjEOIQ4RDf0N6Q3VDcENsQ3RDeUN+Q4NDiEOMQ5BDlEOY
Q5tDnUOgQ6LDowFDpMOjAUOhQ6BDnUObQ5hDlEORQ41DiUOEQ39De0N2Q3FDckN3Q3xDgkOH
Q4tDkEOUQ5dDm0OeQ6BDo0Okw6UDQ6RDo0OgQ55Dm0OYQ5VDkUONQ4lDhEN/Q3tDdkNvQ3RD
eUOAQ4VDikOOQ5JDlkOaQ51DoEOjQ6TDpgHDpwFDpkOlQ6NDoUOeQ5tDmEOVQ5FDjUOIQ4RD
f0N7Q2tDcUN2Q31DgkOHQ4xDkEOVQ5lDnEOfQ6JDpEOmw6cDQ6ZDpEOjQ6BDnkObQ5hDlEOQ
Q4tDh0ODQ39DZ0NtQ3JDeUN+Q4RDiUOOQ5JDlkOaQ51DoUOjQ6VDpkOnQ6jDpwFDpUOkQ6JD
oEOdQ5pDlkOTQ45DikOGQ4JDYkNoQ25DdUN6Q4BDhUOKQ49Dk0OXQ5tDn0OhQ6NDpUOmw6cC
Q6ZDpEOjQ6FDnkObQ5hDlUOQQ41DiUOFQ1xDYkNoQ29DdUN7Q4FDhkOLQ49DlEOYQ5xDn0Oh
Q6NDpEOlw6YBQ6VDpEOjQ6FDnkOcQ5lDlkOSQ45Di0OHQ1ZDXENiQ2pDcEN2Q3tDgUOGQ4tD
j0OUQ5hDm0OeQ6BDokOjw6QCQ6NDokOgQ55DnEOZQ5ZDkkOPQ4tDiENPQ1VDXENjQ2lDcEN1
Q3tDgUOGQ4pDj0OUQ5dDmkOcQ55DoMOhA0OgQ59DnUObQ5hDlkOSQ49DjEOIQ0hDTkNVQ1xD
Y0NpQ29DdUN6Q4BDhUOJQ45DkkOVQ5hDmkOcQ53DngJDnUOcQ5tDmUOXQ5RDkUOOQ4tDiENA
Q0ZDTUNVQ1tDYkNoQ25DdEN5Q35Dg0OIQ4xDkEOTQ5VDl0OZw5oDQ5lDmEOWQ5RDkkOPQ4xD
iUOGQzhDPkNFQ01DVENaQ2BDZ0NsQ3JDd0N8Q4JDhkOKQ41DkEOSQ5RDlcOWAkOVQ5RDk0OR
Q49DjEOJQ4dDhEMwQzZDPUNFQ0tDUkNYQ19DZUNqQ3BDdUN7Q39Dg0OGQ4lDjEOOQ49DkMOR
AUOQQ49DjkONQ4tDiEOGQ4NDgUMnQy5DNEM8Q0NDSUNQQ1ZDXENiQ2hDbUNzQ3dDe0N/Q4JD
hUOHQ4hDisOLAkOKQ4lDiEOGQ4RDgkN/Q31DHkMlQytDM0M6Q0FDR0NOQ1RDWkNfQ2VDa0Nv
Q3NDd0N6Q31Df0OBQ4PDhANDg0OCQ4FDf0N9Q3pDeIH/gf+B/4H/gf+B/4H/gf+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8A//8A//8A//8B//mA/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+P/4//j/+P/wAA/wAA/wAA/wAB+YgdAIgeAIgeAIgeAAgAiBuABIgagAWIGIAGiBeA
B4gWgAiIF4AHiBiABogZgAWIGoAEiB2AAogdgAGIHgCIHwCIHoABiB6AAYgegAKIHIAEiBuA
C4gVgAyIFIANiBSADogCgAGIDoANCIACiA+AEIgQgA+IEYANiBKADIgTgAaIPQCIHgCIHoAC
iBuABIgZgAWIGYAFiBiABogXgAeIGIAGiBmABYgagASIG4ADiB4AiMKAAogdgASIGoAMiBOA
D4gRgBGIBIACiAmAEQiAA4gLgBSIDYASiA+ADogRgAyIFIAJSCeIFYAFiF0AiB4ACACIG4AB
CACIGoACCACIGoACCACIGYADCACIGYADCACIGYADCACIGoACCACIG4ABCACIHAAIAIj/iAeA
AYgZgA2IEIASiAiAG4gDgCaICIAWiAuAEogPgA2IE4AKiBWACYgWgAWInACIHYABiB2AAYgc
gAKIHIACiB2AAYgdgAGIHgCI/4hLgAiIE4AQiAqAG4gBgB4IgCeICYARiBCADYgTgAqIFoAH
iBiABIicAIgdgAGIHYABiByAAogcgAKIHQCI/4hwAEg5iByABYgXgAyIDoAYiASAGogCgByI
AYAJiAWADQiAA4gQgAkIgAGIFIAHCIABiBaABQgAiBiABIi7AIgdgAGIHQBI7Ij/iNGAAoga
gAqIEoAUiAeAF4gEgBqIA4ADiAKAFIgCgAGID4AKiAEAiBSAB4gYgAaIGoAEiNoAiP+I/4gS
gAeIB0iviAyAEogJgBWIBoAYiASAAogEgBKIAwCIC4AOiBaACIgYgAaIGoAEiP+I/4jwgASI
BwCID4AQiAuAE4gIgBaIBYABiAWAEYgRgA2IEoAMiBeAB4gZgAWI/4j/iPwAiBGAD4gMSPCA
EYgJgBWIBgCIB4APiBGADYgTgAuIE4ALiBeAB4j/iP+I/4gSgAmIEYAQiAqAFIgQgA6IEoAM
iBOAC4gUgAqIFIAKQ+dD5UPjQ+FD3kPcQ9lD10PUQ9JDz0PMQ8lDxkPDQ79DvEO5Q7ZDs0Ov
Q6xDqEOlQ6JDn0OcQ5hDlUOSQ49DjEPkQ+FD30PdQ9pD10PVQ9JD0EPNQ8pDx0PFQ8FDvkO7
Q7hDtUOyQ69DrEOpQ6ZDo0OgQ51DmkOYQ5VDkkOPQ4xD4UPeQ9xD2UPWQ9ND0UPOQ8tDyUPG
Q8NDwEO9Q7pDuEO1Q7JDr0OtQ6pDp0OkQ6FDn0OcQ5pDl0OVQ5NDkEOOQ95D20PYQ9ZD00PQ
Q81DykPHQ8VDwkO/Q71DuUO3Q7RDskOvQ61DqkOoQ6VDo0OgQ55DnEOaQ5hDlkOUQ5FDj0Pb
Q9lD1kPTQ9BDzEPJQ8dDxEPBQ75DvEO5Q7ZDtEOxQ69DrUOqQ6hDpkOkQ6JDoEOeQ5xDmkOZ
Q5dDlUOTQ5JD2UPWQ9ND0EPNQ8lDxkPDQ8FDvkO7Q7lDtkOzQ7FDr0OtQ6tDqUOnQ6VDo0Oh
Q6BDnkOdQ5xDmkOZQ5hDlkOVQ9hD1EPRQ85DykPHQ8RDwUO+Q7tDuEO2Q7NDsUOvQ61Dq0Op
Q6dDpkOkQ6NDokOhQ59DnsOdAUOcQ5tDmkOZQ9ZD00PPQ8xDyEPEQ8FDvkO7Q7hDtkOzQ7FD
r0OtQ6tDqUOoQ6ZDpUOkQ6PDogFDocOgAcOfAcOeAUOdQ9VD0UPOQ8pDxkPCQ79DvEO5Q7ZD
tEOxQ69DrUOrQ6pDqEOnQ6bDpQFDpMOjBcOiA0PUQ9BDzEPJQ8VDwUO9Q7pDt0O0Q7JDsEOu
Q6tDqkOpQ6hDp8OmAcOlBMOmAsOnA0PUQ9BDzEPIQ8RDv0O8Q7lDtkOzQ7BDrkOsQ6pDqUOo
w6cBw6YCw6cBw6gBQ6nDqgFDq0Osw60BQ9NDz0PLQ8dDw0O+Q7tDt0O0Q7JDr0OtQ6tDqkOp
Q6jDpwNDqMOpAUOqQ6tDrUOuQ69DsEOxw7MBQ9NDz0PKQ8ZDwkO9Q7pDtkOzQ7FDrkOsQ6tD
qcOoBMOpAUOrQ6xDrUOvQ7FDskO0Q7VDt0O5Q7pD00PPQ8pDxkPBQ71DuUO2Q7NDsEOuQ6xD
qkOpw6gCw6kBQ6pDq0OtQ69DsUOzQ7VDt0O5Q7tDvUO/Q8FD00PPQ8pDxUPBQ7xDuUO1Q7JD
sEOtQ6xDqsOpA0OqQ6tDrEOuQ7BDskO0Q7dDuUO8Q75DwUPDQ8ZDyEPTQ89DykPFQ8FDvEO4
Q7VDskOvQ61DrEOqw6kCQ6pDq0OsQ65DsEOzQ7VDuEO7Q75DwUPDQ8ZDyUPMQ89D1EPPQ8pD
xUPBQ7xDuEO1Q7JDr0OtQ6xDq8OqAkOrQ6xDrkOwQ7JDtkO5Q7xDv0PCQ8VDyUPMQ89D00PW
Q9RDz0PKQ8VDwUO8Q7hDtUOyQ69DrUOsQ6tDqsOrAUOsQ65DsEOyQ7VDuUO8Q79Dw0PHQ8pD
zkPSQ9VD2UPdQ9RDz0PKQ8VDwUO8Q7hDtEOyQ69DrUOsw6sCQ6xDrkOwQ7JDtUO4Q7xDv0PD
Q8dDy0PPQ9ND10PbQ+BD40PVQ89DykPFQ8FDvEO4Q7RDskOvQ67DrANDrUOvQ7FDtEO3Q7pD
v0PDQ8dDy0PQQ9RD2UPdQ+FD5kPqQ9VD0EPKQ8VDwUO8Q7hDtEOyQ69DrkOtw6wBQ61DrkOw
Q7NDtkO5Q71DwUPGQ8pDz0PUQ9lD3UPiQ+dD7EPwQ9VD0EPKQ8VDwUO8Q7hDtEOyQ7BDrsOt
AkOuQ7BDskO0Q7dDu0O/Q8RDyUPOQ9ND2EPdQ+JD50PsQ/JD9kPVQ9BDykPFQ8FDu0O4Q7RD
skOwQ67DrQFDrkOvQ7FDs0O2Q7lDvUPBQ8dDzEPRQ9ZD3EPhQ+dD7EPxQ/dD/EPVQ9BDykPF
Q8BDu0O4Q7RDskOwQ67DrQFDrkOvQ7FDtEO3Q7tDv0PDQ8lDzkPUQ9lD30PlQ+tD8EP2Q/wD
Q9VDz0PKQ8VDwEO7Q7dDtEOyQ7DDrgJDr0OwQ7JDtUO4Q7xDwEPFQ8tD0UPWQ9xD4kPoQ+5D
9EP6gwFD1EPPQ8pDxUPAQ7tDt0O0Q7FDr8OuAkOvQ7FDs0O2Q7lDvUPCQ8dDzUPTQ9lD30Pl
Q+xD8kP4Q/6DAUPUQ89DyUPEQ79DukO3Q7RDsUOvw64CQ69DsUOzQ7dDukO+Q8NDyEPPQ9VD
20PiQ+hD70P1Q/yDAkPUQ85DyUPEQ79DukO2Q7NDsUOvw64CQ69DsUO0Q7dDu0O/Q8RDykPR
Q9dD3UPkQ+tD8kP4gwND00POQ8hDw0O+Q7lDtkOzQ7BDr0OuQ61DrkOwQ7JDtEO4Q7xDwEPG
Q8tD0kPZQ+BD5kPtQ/RD+4MCAEPSQ81DyEPDQ75DuUO1Q7JDsMOuAUOtQ65DsEOyQ7VDuEO9
Q8FDx0PNQ9RD20PiQ+lD8EP3Q/6DAgBD0kPNQ8dDwkO+Q7lDtUOyQ7DDrgNDsEOyQ7ZDuUO+
Q8NDyEPOQ9ZD3UPkQ+tD80P6gwKAAUPSQ81Dx0PCQ75DuUO1Q7JDsEOvw64BQ69DsUOzQ7dD
ukO/Q8RDykPQQ9hD30PnQ+5D9kP9gwKAAYH/gf+B/kMBgR1DAUMGgR1DBUMKgRxDAkMJQw+B
HEMFQw1DEoEbQwJDCEMQQxaBG0MFQwxDFEMagRpDAUMIQw9DF0MegRpDBEMLQxNDG0Migf+B
/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAA
AAAAAAAAAYADiBWACYgWgAiIFoAHiBiABogYgAaIGIAGiBiABogYgAaIGIAGiByAAogcgAFI
dYgcgAGIHQCIHkjIiP+I/4g+gAKIF4AHiBdI2IAGiBiABogYgAaIGIAFiBqABIgagASIGoAE
iBpILYADiB2AAYgdgAGIHQCI/4j/iH6AAYgYgAaIGYAFiBqABIgagASIGoAEiBqABIgagASI
GoAEiB2AAYj/iP+I3YABiBmAAwgAiBmAA4gcgAKIHIABiB4AiB4AiB4AiP+I/4j/iDyAA4gc
gAKIHIABiB4AiB4AiB4AiB4AiP+I/4j/iDyAA4gcgAKIHIABiB4AiB4AiB4AiB4AiP+I/4j/
iDyAA4gcgAKIHIABiB4AiB4AiB4AiB4AiP+I/4j/iDuABIgbgAOIHIACiByAAogcgAKIHQCI
HgCIHkiTiP+I/4j/iBqABYgagASIG4ADiBuAA4gcgAKIHIACiByAAogcgAKI/4hdAEgPiBsA
iP+ImYAIiBiABogZgAWIGoAEiBqABIgagASIGoAEiBqABIgagASIGoAEiNyAAogbgAOIGoAD
iBqAAYj/iIND0kPNQ8dDwkO+Q7lDtkOzQ7HDrwJDsEOyQ7VDuEO8Q8FDxkPMQ9ND20PiQ+pD
8UP5gwKAAkPTQ81DyEPDQ79DukO3Q7RDskOxw7ABQ7FDtEO3Q7pDvkPDQ8lDz0PWQ95D5UPt
Q/VD/YMBgAND1EPPQ8lDxUPAQ7tDuEO1Q7TDsgJDtEO2Q7lDvUPBQ8ZDzEPSQ9lD4kPpQ/FD
+YMCgAND1kPQQ8tDxkPCQ71DukO4Q7bDtQJDt0O5Q7xDwEPFQ8pD0EPWQ91D5kPuQ/ZD/oMB
gARD2EPTQ85DyUPFQ8BDvUO7Q7nDuAFDuUO6Q71DwEPEQ8lDz0PVQ9tD4kPrQ/ND+4MCgARD
2kPVQ9BDzEPIQ8NDwUO+Q73DvAFDvUO/Q8JDxUPJQ85D1EPaQ+FD6EPxQ/mDAoAFQ91D2UPU
Q9BDzEPHQ8VDw8PBAkPCQ8RDx0PKQ89D1EPZQ+BD50PuQ/eDAoAGQ+FD3EPYQ9RD0EPMQ8lD
x8PGAkPHQ8lDzUPRQ9VD2kPgQ+ZD7UP1Q/6DAYAHQ+VD4UPcQ9hD1UPRQ89DzcPMAkPOQ9BD
00PXQ9xD4UPnQ+1D9UP8gwEIgAdD6UPlQ+FD3UPaQ9dD1EPTw9IBQ9ND1EPXQ9tD3kPjQ+lD
70P1Q/yDAYgCgAZD7kPqQ+ZD40PgQ91D28PZAkPaQ9xD3kPiQ+ZD60PxQ/dD/YMBiAOABkPz
Q+9D7EPpQ+ZD40Phw+ACQ+JD40PmQ+pD7kPzQ/mDA4gEgAVD+EP1Q/JD70PsQ+rD6AFD50Po
Q+lD7EPuQ/ND90P8gwKIBoAFQ/5D+kP4Q/VD80PxQ/DD7wFD8EPyQ/RD90P7gwOICIAEgwFD
/kP7Q/lD+MP3AkP4Q/pD/YMEiAiABYMFw/4BgwaICoAFgwyIDIAFgwqIDYAGiAKDA4gRgASI
GYACiP+IhIEZQwBDCEMPQxdDIEMmgRlDBEMMQxRDG0MkQyuBGEMAQwhDEEMYQyBDKUMxgRhD
BUMNQxZDHkMmQy9DNoEXQwJDCkMTQxtDJEMsQzVDPIEWQwBDCEMQQxlDIUMqQzJDO0NDgRZD
BUMOQxdDH0MoQzBDOUNCQ0qBFUMEQwxDFUMeQyZDL0M3Q0BDSUNRgRRDA0MLQxRDHEMlQy5D
NkM/Q0dDUUNYgRNDAUMLQxNDG0MkQy1DNUM+Q0dDT0NYQ2CBEkMBQwlDE0MbQyNDLEM1Qz1D
RkNOQ1ZDYENngRFDA0MKQxFDG0MjQyxDNEM9Q0VDTkNWQ15DaENvgRBDBUMLQxJDGkMkQyxD
NEM9Q0VDTkNWQ15DZkNvQ3aBDkMBQwdDDUMUQxtDI0MsQzRDPUNFQ01DVkNeQ2ZDbkN3Q36B
DEMAQwVDCkMQQxZDHUMkQyxDNUM9Q0VDTUNWQ15DZkNuQ3VDfkOFQwRDAkMAgQdDAUMEQwlD
DkMTQxlDH0MmQy1DNUM+Q0ZDTkNWQ15DZkNuQ3VDfEOFQ4tDCUMHQwVDBMMCAUMBQwJDA0ME
QwdDCkMNQxJDF0McQyJDKEMvQzZDPUNGQ05DVkNeQ2ZDbUN1Q3xDg0OLQ5JDDkMMQwtDCsMJ
A0MLQwxDD0MSQxZDG0MgQyVDK0MxQzhDP0NGQ09DV0NeQ2ZDbUN1Q3xDg0OKQ5JDl0MTQxJD
EUMQww8BQxBDEUMSQxRDF0MaQx5DI0MoQy5DNEM6Q0BDR0NOQ1dDX0NmQ21DdUN8Q4NDiUOQ
Q5dDncMXAUMWwxUBQxZDF0MYQxpDHEMfQyJDJkMsQzFDNkM8Q0JDSUNQQ1ZDX0NmQ21DdEN7
Q4JDiUOPQ5VDnEOhQxzDGwNDHEMdQx9DIUMjQydDKkMuQzRDOUM+Q0RDSkNRQ1dDXkNmQ21D
dEN7Q4JDiEOPQ5VDmkOhQ6bDIANDIUMiQyNDJUMoQypDLkMyQzZDO0NBQ0ZDTENSQ1hDX0Nl
Q21DdEN7Q4FDh0OOQ5RDmUOfQ6RDqcMjAUMkQyVDJkMnQylDK0MuQzFDNUM5Qz1DQ0NIQ01D
U0NZQ19DZkNsQ3RDekOAQ4dDjUOSQ5hDnUOiQ6hDrEMmQydDKEMpQypDLEMuQzFDNEM3QztD
P0NDQ0lDT0NUQ1pDYENmQ2xDckN5Q39DhUOLQ5FDlkOcQ6BDpUOqQ65DKUMqQytDLUMuQzFD
M0M2QzlDPUNBQ0VDSkNPQ1VDWkNgQ2ZDa0NxQ3dDfkOEQ4pDj0OVQ5pDn0OjQ6dDrEOvQytD
LEMuQzBDMkM1QzdDO0M+Q0JDRkNKQ09DVUNaQ2BDZUNrQ3FDdkN8Q4NDiEOOQ5NDmEOdQ6FD
pUOpQ61Dr0MsQy5DMEMyQzVDOEM7Qz5DQkNGQ0pDT0NUQ1pDX0NkQ2pDb0N1Q3tDgEOHQ4xD
kUOWQ5pDnkOiQ6ZDqUOtQ69DLUMvQzJDNEM3QztDPkNCQ0ZDSkNOQ1NDWENeQ2NDaENuQ3ND
eUN+Q4NDikOOQ5NDmEOcQ6BDo0OmQ6lDrEOuQy1DMEMzQzZDOUM9Q0BDRENIQ01DUUNWQ1tD
YUNmQ2xDcUN2Q3xDgUOGQ4xDkEOVQ5lDnUOgQ6NDpkOpQ6tDrUMtQzBDM0M2QzpDPkNCQ0ZD
SkNPQ1RDWUNeQ2RDaUNuQ3RDeUN+Q4NDiEONQ5FDlkOZQ51DoEOjQ6VDp0OpQ6pDLEMwQzND
N0M6Qz9DQ0NHQ0xDUENVQ1pDX0NmQ2tDcEN1Q3pDf0OEQ4lDjkOSQ5ZDmUOcQ59DoUOjQ6XD
pwFDK0MvQzJDNkM6Qz9DQ0NIQ0xDUUNWQ1tDYENnQ2xDcUN2Q3tDgEOEQ4lDjkOSQ5VDmEOb
Q51Dn0OhQ6JDo0Okgf+B/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/wAAAAAAAAAAAAAAAYg/gAOIFoAIiBWACYgSgAyIEoAMiBKADIgHAIgJgAyI
B4ABiAiADIgHgAKICIAGiA1I0oj/iP+IFYACiBuAA4gZgAWIGIAGiBiABoh4gAKIEgCIAYAJ
iBKADIgSgAyIEoAMiBKADIgJAIgHgAyICYABiAaACAiAAogJgAKIBoAHiP+IqgCIHQCIG4AC
iBqABIgZgASIGIAGiBeAB4gXgAeIjIAJCIABiBKACQiAAYgSgAkIgAGIEoAJCIABiBGACgiA
AYgRgAoIgAGIEYAKCIABiAqAAogEgAmIDYADiAQAiP+IkYABiBuAAogagASIGYAEiBiABogX
gAeIFoAIiBaACIiqgAmIFYAIiAIAiBKACYgBAIgRgAqIAQCIEYAKiAEAiBCADAgAiAyAAYgB
gAwIgAGICoARiP+IawCIG4ACiBqABIgZgASIGIAGiBeABogWgAiIFoAIiBaAB4iqgAiIFoAI
iBaACIgDAIgQgAmIAwCIEIAKiAIAiA+AC4gCAIgMAAiADYgBAIgLgBGIDYADSPmI/4hXgAGI
GoADiBqABIgYgAWIF4AHiBaAB4gWgAiIFoAIiBaAB4iqgAeIFoAIiBaACIgWgAiIFYAJiAQA
iA6AC4gDAIgOgAuIAwCIC4APiAIAiAuAEYj/iCwAiBuAAogagAOIGYAFiBeABogWgAiIFYAI
iBaACIgWgAiIFoAHiImAAYgdgAeIF4AHiBaAB4gXgAiIFoAIiBWACYgFAIgOgAqIBACIDIAN
iAMAiAqAEIj/iCyAAogagAOIGIAFiBiABogWgAeIFYAJiBWACIgWgAiIFoAIiBaABoiKgAWI
GYAFiBiABogYgAaIGIAGiBeAB4gXgAiIFUgsgAiIFYAKiAWAAYgQgAeI/4gtgAOIGIAFiBeA
BogWgAeIFYAJiBWACIgWgAiIFoAIiBaAB4gXgAaIaoACiByABYgZgAWIGIAGiBiABYgZgAWI
GIAGiBiAB4gWgAiIFoAJiB2AAoj/iBEAiBlIOYADiBiABYgWgAeIFYAJiBWACIgWgAiIFoAI
iBaACIgWgAeIF4AFiEuAAogcgASIGoAEiBmABYgZgAWIGYAFiBiABogYgAaIGIAGiBeAB4gb
SDGAAoj/iAcAiB4AiAoAiBiABYgWgAeIFYAJiBWACIgWgAiIFoAHiBeAB4gXgAeIF4AGiBiA
BIgsgAKIHIAEiBqABIgZgAWIGYAEiBqABIgagASICQOIDoAFiAmDAYgNgAWICYMCiAyABYgJ
gwOIDYADiAlD/YMDiBpD90P9gwOIGUPxQ/ZD/IMDiBhD60PwQ/ZD+4MDiBdD5UPqQ/BD9UP7
gwOIBEj+iBBD3kPkQ+lD70P0Q/uDA4gVQ9hD3UPjQ+hD7kP1Q/uDA4gUQ9FD1kPcQ+JD50Pu
Q/RD+oMDiBNDykPPQ9VD2kPgQ+dD7UPyQ/hD/oMCiA6AA0PDQ8hDzkPTQ9lD30PlQ+tD8UP2
Q/yDA4gIgAdDu0PBQ8ZDy0PRQ9hD3UPjQ+lD7kP0Q/qDBIgOQ7NDuUO+Q8RDyUPQQ9VD20Ph
Q+ZD7EPxQ/dD/YMEiAxDrEOxQ7ZDu0PBQ8dDzUPTQ9hD3kPjQ+lD7kP0Q/lD/oMFiAlDpEOp
Q65Ds0O5Q79DxEPKQ9BD1UPbQ+BD5UPsQ/FD9UP6Q/6DDUObQ6FDpkOrQ7BDtkO8Q8FDx0PM
Q9JD10PcQ+ND50PsQ/FD9UP5Q/2DC0OTQ5hDnUOjQ6hDrkOzQ7lDvkPDQ8lDzkPTQ9lD3kPj
Q+dD7EPwQ/ND90P6Q/2DCEOMQ5BDlUOaQ59DpUOrQ7BDtUO6Q8BDxUPKQ9BD1UPaQ95D4kPm
Q+pD7UPxQ/RD9kP4Q/lD+8P8BEOEQ4lDjUOSQ5dDnUOiQ6dDrEOyQ7dDvEPBQ8dDzEPQQ9VD
2UPdQ+FD5EPoQ+tD7UPvQ/FD8kPzQ/TD9QJDfUOBQ4ZDikOPQ5VDmkOfQ6RDqUOuQ7NDuEO+
Q8NDx0PMQ9BD1EPXQ9tD30PiQ+RD5kPoQ+pD60Psw+0CQ3ZDekN/Q4NDiEONQ5JDl0OcQ6FD
pUOqQ69DtEO5Q71DwUPFQ8dDykPOQ9JD1kPZQ95D4EPiQ+ND5EPlw+YBQ29Dc0N3Q3pDfkOF
Q4lDjUORQ5ZDmkOeQ6NDqEOtQ69DskO0Q7lDvUPCQ8dDykPPQ9FD1UPZQ9tD3UPeQ99D4EMp
Qy1DMUM1QzlDPkNDQ0dDTENRQ1ZDXENhQ2dDbENxQ3ZDe0OAQ4RDiEONQ5FDlEOXQ5lDm0Od
Q55Dn8OgAUMmQytDL0MzQzdDPUNCQ0dDTENRQ1ZDW0NgQ2dDbENxQ3ZDekN/Q4NDh0OMQ49D
kkOUQ5ZDmEOaw5sBQ5xDm0MjQyhDLEMxQzVDO0NAQ0VDSkNPQ1VDWkNfQ2VDa0NwQ3RDeUN9
Q4FDhUOJQ4xDj0ORQ5NDlUOWw5cDQyBDJEMpQy5DM0M4Qz1DQ0NIQ01DU0NYQ11DZENpQ25D
ckN3Q3tDf0ODQ4dDikOMQ45DkEORw5IDQ5FDHEMhQyVDKkMvQzVDO0NAQ0VDS0NQQ1VDW0Nh
Q2ZDa0NwQ3RDeEN8Q4BDg0OGQ4hDikOMw40BQ47DjQFDjEMYQxxDIUMmQytDMkM3QzxDQkNH
Q01DUkNYQ15DY0NoQ2xDcUN1Q3lDfEOAQ4JDhEOGQ4fDiANDh0OGQxNDGEMdQyJDJ0MuQzND
OEM+Q0NDSUNOQ1RDWkNfQ2RDaUNtQ3FDdUN4Q3tDfkOAQ4FDgsODA0OBQ4BDDkMTQxhDHUMi
QylDLkM0QzpDP0NFQ0pDUENWQ1tDYENkQ2lDbUNwQ3NDd0N5Q3tDfEN9w34CQ31DfEN6QwhD
DUMTQxhDHUMkQylDL0M1QzpDQENFQ0tDUUNWQ1tDYENkQ2hDa0NuQ3JDdEN2Q3fDeANDd0N2
Q3RDA0MIQw1DE0MYQx9DJEMqQzBDNUM7Q0BDRkNMQ1FDVkNaQ19DY0NmQ2lDbENuQ3BDcUNy
w3MBQ3JDcUNwQ24BQwJDB0MNQxJDGUMfQyRDKkMwQzVDO0NAQ0dDTENRQ1VDWUNdQ2FDZENn
Q2lDa0Nsw20CQ2xDa0NqQ2iBAUMCQwdDDEMTQxlDH0MkQypDMEM1QztDQUNGQ0tDT0NUQ1dD
W0NeQ2FDY0NlQ2bDZwNDZkNkQ2KBAkMBQwZDDUMTQxlDHkMkQypDL0M1QztDQENFQ0pDTkNS
Q1VDWENbQ11DX0Ngw2EDQ2BDXkNdgQNDAEMHQw1DEkMYQx5DJEMpQy9DNUM6Qz9DRENIQ0xD
T0NSQ1VDWENZQ1pDW0Ncw1sBQ1pDWUNXgQRDAUMHQwxDEkMYQx1DI0MpQy9DNEM5Qz5DQkNG
Q0lDTENPQ1JDU8NVAcNWAUNVQ1RDU0NRgQVDAEMGQwxDEkMXQx1DEoACQxhDPENAQ0NDRkNK
Q0xDTUNPw1ACw08BQ01DTIEGRhBGHUY3RkdGUEY3RjBGLkY+Rl5GhUalRrFGu0bDRrxGrUas
RqFGlUZhQ0pDSUNHQ0aBB0atRsBGx0bFRsPGvgFGv0bCRsxG5kb2RvpG/Eb6Ru9G7kbrRudG
2UasRpBGVENAgQlG9kbpRvJG5kbZRsdGtka6RslG00bYRtNG1kbRRtlG4EbcRvxG5kbnRsRG
lIEKxrgBRqdGmEaLRnZGkUalRrVGvUa3RqRGhUZtRntGjka9RuFG90b8RuuBC0bmRulG8Ubj
RtFG50bwRvZG+EbyRvFG4katQy9DMEYyRoFGs0bZRvWBDEbgRvZG9EbxxvYBRuBG+kb0RuhG
/EbPRrhGrkaZRqNGlkaXRqmBDkbYRttG4kbTRuJG60bsRudG6sb6AUb3RuVG8EbsRu9G8YEQ
RvZG4UbvRvJG6UbbRt5G20bfRuBG00bdRuZG60btgRJGs0atRsFGzkbdRuBG1kbrRvVG80bm
RvpG94EUxvgBRvpG7kbjRuxG6EbXRtNG1EbHgRhG9kb6RvdG7cbwAUbzgf+B/4GqRtJGvkap
RqZGtUbURuyGCYEGhhsBhliBAoYjAYbrxv4DRvzG/QaGBkb+xv0Bxv4DRv0BRvzG/QLG/AHG
+gFG98b5AUb6xvsCRvxG/YYFgQRG+Mb8AUb3RvzG+gFG+Ub2RvXG9AFG8sbzAUb1RvbG9wHG
+gHG/AFG/oYCgf+B2UH+gRRGe0asRq1GqUatRrZGs0ayRrtGwEa1gQqGAUb8RrBGYEZaRlRG
akZyRpOGCkb3RuyBAoYcRv2GWkbxRtxG1ob/hitG/YYWRvzG+wFG+kb7hhqA/4CXQQdBBYAc
QR9BN0EyQReAH0EPgAlGEEYkgAdGWUaNRpBGl0ahRqNGnEaFRnZGdUZoRhKAA0YyRlhGcUaq
RspG6oYBRu1GpkZJRhRGDUZeRrFG8IYMRrlGUgCGHUbvRvmGa0b5RviGGkb9RvtG+Ub4RvZG
+4b/hjCA/4D/AEYLRiJGVkZzRo9Gqka2RluABEZMRpFGgUaqRmNGQEY7RlJGaEZ2RmRGPkYq
RjdGMkYEgAFGxkbeRvyGBkbLRpZGgkauRvGGAkbSRsBGwkbPRt2GAUb0RtNGsUZbRl5GZUZk
hhJG+kbsRu9G6Eb4RvJG8EbSRrdGoUa4RtBGsYYLRuhG30boRvBG+kb3RvJG5kbSRrRGv0bE
RsVGyka9RptGjkaURrVG3IYGRvhG7EbcRsFGlUZkRlhGZkaJRqNGsEa2Rq1Gn0ZwRmVGdkaQ
RqFGtkaMRnpGh0ayRudG3Ea5RrFGuEbDRsRGvkaZRm5GVEYxRgWAAkYsRlpGcUZ7RnpGd0ZG
Ri9GMEZBRl5GjEaBRohGnkbDRudGaUZuRnNGa0ZjRl9GSEYjgAZGKEZRRmJGakZvRnZGW0Yy
RhNGFkZDRk5GPkZVRo5Gx0bzRlzGWAFGRkY3RjlGL0YPgAJGFUYhRjZGV0Z3RpVGlkaeRqpG
tkatRpZGaEZTRi1GIwBGJUZqRq5G7UaPRorGiQFGjkaYRqFGjsZ+AUaVRq5GvEa+RsZGzEbV
RtdG2EbaRtZGy0a8RqJGeEZJRj2AAUYDRjtGhkbMRs5G0EbWRtvG8AFG7UbnRuhG7oYKRvhG
50bSRsFGrUZ5Rj1GJ0YuRiRG+gZG/Ub3RvZG+YYURuVGykamRoZGbYYdRu9G34YrRvaGGkb+
hhZGd0aFRnpGhUbWhglG/Ub+Bkb4RvJG60bsRuVG30buRvRG+Ub7hgJG/YD/gP+ABUYJRhOA
F0YfRjNGSkZuRoBGkUagRqFGZYAGRgiABUY7RhKABkavRrFGzUbhRulG70b0RudG8kbJRnpG
NUYqRjxGWUZyRnFGd0Y0gAxG60bVRu5G4EbVRs5GxUa2RrJGlEZTgBRGmkZnRj9GDoCqRgdG
DUYjRjtGPEYpRgqAEEYSRiZGTkZrRpVGtUa6RrxGt0bJRsVGzUbORspGuEaeRnlGSEYsRgiA
BEZvxlUBRlhGYUZuRntGgUaIRpBGnEbCRthG30biRttG40bdxuEDRudG7EbmRs1GtUaQRldG
A4ABRphGlEacRpVGi0aVRptGl0amRqpGo0aZRodGlUbVRrtGb0ZPRmZGg0aXRqFGr0bDRtNG
3kbaRvcGRvZGukarRpZGp0avRqdGmUaSRoRGc0ZjRk9GOUYLAEYbRnxGsUaNRlFGbEaFRpLG
ngFGl0ajRp1GgUaFRqNGuka4RtNGJUY5RkBGRUZGRkFGN0YaAEYCRjBGSEZQRmVGdEaHRo5G
ccaFAUaHRo5Gf0Z3Ro5GnEaURpBGq0amRohGc4AERgxGJkY+RlNGS0ZsRmdGQ0YnRguADEYi
RjFGB4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAAAAAAAAGABogRgAyIEIANiBCADYgTgAqIFoAHiB0A
iP+I/4gdAIgMgAGIDwCIC4ACiA6AAYgIgAWIDYACiAaABogOgAKIBYAGiA6AA4gEgAaID4AD
iAKAB4gQgA6IEIANiBGAC4gXgAWIEoALiBKAC4gVgAiIHIABiB0AiP+I/4gMAIgcgAKIGoAE
iA8AiAeABYgQAIgHgASIEIABiAaABIgRgAGIBoADiBGAAogEgASIEoACiAKABYgTgAqIFIAJ
iBiABYgUAIgDgASIFIAJiBuAAogcgAGIHQCI/4j/iAwAiBuAAogagAOIG4ADiBuAAogSAIgH
gAKIEwCIBoACiBQAiAaAAYgUgAGIBIACiBWAAYgCgAKIF4AIiBiABYgZgASIGoADiBuAAogc
gAGIHQCI/4j/iAsAiBqAA4gbgAKIHIABiB0AiLWABogYgASIGoADiBuAAogcgAGIHQCI/4j/
iCoAiByAAYgdAIgdAIjVgAWIGYAEiBqAA4gbgAKIHIABiB0AiP+I/4j/iF6ABYgZgAOIG4AC
iByAAYgdAIj/iP+I/4h+gASIGoADiBuAAYgdAEj9iB1I/Ij/iP+I/4h+gAOIG4ACSP6IGwBI
+kj9iBxI+oj/iP+I/4iegAJI/Uj+iBqAAUj3iBxI9Ej5iKPI/QFI+8j9AUj+yPwByP0ByP4B
iA1I/kj9SPxI/cj7AUj5SPZI+Mj5AUj7SPlI+Ej2yPcBSPjI/AFI/YgKSPvI+AJI+Uj3yPUB
SPRI88j0AUj1SPZI8kjxSPJI9cj4AUj5SPpI/ogISPlI90jzSPVI9MjzAUj0SO9I7kjySO9I
8EjzyO4BSO1I70jwyPQBSPVI+kj+iAdI9kjzSPFI88jwAUjvSPBI78jtA0jwSO1I7EjqSOtI
8EjuSO9I80j2SPuIB0j3SPVI9EjvSPFI8EjtSPFI7kjtSOvI7QFI7kjsSOhI60jqSO5I60jx
SPNI9kj4SPtI/ogFSPdI9Uj0SPJI78juAUjrSO9I7kjtSOpI7EjrSOxI68jsAUjuSPBI8Uj1
SPNI90j4SP2IBUj5yPUBSPRI8cjuAcjvAcjuAUjwSO1I7MjuAUjwSO1I8EjvSPJI8UjzSPVI
+0j9iAVI+cj1AUj0yPIByPAByO8CSPJI78jxAUjyyPABSPJI9EjySPRI80j4SPtI/IgFSPrI
+QFI9kj0SPVI8UjzSPXI8gFI9EjzSPRI9kj0yPIBSPRI9UjzSPRI9Uj5SPtI/ogFSP1I/Mj5
Acj1AUj0SPVI9kj1SPTI9gHI9wHI9QJI9kj1SPbI+AJI+0j9iAZI/Uj8yPkByPgBSPdI+cj4
AUj6SPlI+Mj6AUj5SPhI+kj4SPpI+Mj6AUj9iAlI/Mj7Acj9AUj8yP4ByP0BSP7I/QJI+0j9
SPtI/cj8AUj9iP+Ih0NhQ2RDaENuQ3RDeEN8Q4JDhkOLQ41DkEOTQ5hDm0OdQ55Do0OlQ6pD
sUO3Q7xDv0PGQ8tDz0PTQ9RD10PYQ9lDVkNZQ2BDY0NmQ2tDcMNzAUN2Q3lDfEOBQ4NDhUOH
Q4pDj0OSQ5lDnkOlQ61Ds0O3Q71DwUPHQ8xDzkPPQ9FDTkNRQ1JDUUNSQ1ZDWsNgAUNhQ2RD
Z0NqQ2xDbkNxQ3NDekN+Q4RDjUOWQ5xDoUOoQ61DtUO7Q8BDxUPHQ8hDPkM/wz4BQzxDPsNE
AkNJQ0xDUcNTAUNWQ1dDXUNjQ2lDcUN4Q4JDikOVQ5pDoUOpQ69Ds0O6Q71DvsMvAUMsQypD
J0MqQyxDK0MqQzJDOEM+wzsBQzxDP0NEQ0xDU0NaQ2FDa0N2Q4RDjUOTQ5ZDn0OlQ6xDskO1
QyNDHkMYQxVDFkMaQxbDFAFDG0MjQyhDJkMlQyJDH0MjQy5DO0M/Q0ZDUENdQ2dDd0OCQ4lD
kUOZQ59Dp0OqQxVDEEMJQwVDB0MJQwKAAUMDQwlDCEMLQwdDAUMAQwNDC0MYQx9DJkMyQ0JD
UENgQ21Dd0OCQ41DlUObQ5+AEkMBQwlDF0MnQzhDSkNUQ2FDcEN+Q41Dk0OYgBVDDEMjQzVD
P0NOQ19Db0OAQ4hDkIAWQwRDGkMrQztDUUNkQ3VDgEOIgBdDBEMTQydDPkNWQ2pDeEODgBlD
FEMsQ0xDXkNsQ36AGUMIQydDQ0NWQ2dDdYAZQwZDIEM7Q1FDYENxgBlDA0MVQzBDSUNZQ22A
GkMTQyxDRENXQ2aAGUMAQxVDK0M/Q1ZDaIAZQwVDHkMwQ0NDWUNsgBlDDkMeQzRDRENYQ2pD
BoAXQwZDE0MjQzVDTENcQ25DFEMLQwpDBIADQwOAA0MFQwpDB0MDQwJDAYAEQwpDE0MYQydD
N0NPQ11DbEMlQyBDGkMZQxVDE0MVQxdDGUMYQxdDGkMcQyRDIUMjQylDJ0MpQx9DF0MZQxVD
F0MbQx5DJUMxQz9DUUNhQ3BDOEMyQy/DLgFDMEMyQy5DMMMzAUM3Q0BDQUM9Qz9DRENGQ05D
RUM6QzVDL0MqQy5DLUM0Qz9DSkNWQ2RDckNSQ0hDRENFQ0hDTkNPQ0pDS0NQQ1VDWENbQ19D
XkNcw14BQ2FDXkNYQ0xDREM/Qz1DPkNCQ0tDUkNdQ2tDe0NlQ2ZDYUNiQ2BDY0NkQ2ZDaUNs
Q29DckNuQ3NDcUNww3IBw3MBQ2pDYUNbQ1JDTkNPQ1JDV0NcQ2hDdEN+Q3fDdgFDeEN3Q3lD
fkN/Q4FDgkOBQ4LDhAFDg0OCQ4PDhAFDg0OAQ3RDa0NmQ2PDYAFDY0NqQ3NDe0OFQ4ZDhcOH
AUOGQ4hDjUOLQ43DkALDkgHDkAFDkUOVw5QBQ5BDiUOAQ3lDckNvQ3BDcUN3Q31DhEOOQ5JD
k0OUQ5VDlkOaQ5tDmsOcAkOfQ6FDnUOcw50Bw58BQ51DmUORQ45DiUOCQ31DfEN/Q4VDiUOQ
Q5nDoAHDpAFDpUOoQ6lDqsOpAUOrQ6pDq8OoAUOnQ6jDpwFDpkOiQ5tDl0OTQ5DDjQJDkUOV
Q5tDokOuw7ACQ7JDs0O1w7YCQ7XDtAFDsUOww68Bw64CQ6xDpUOgQ5xDmcOXAUOYQ5pDnkOl
Q61Du0O9Q75DwEO/w8AEQ79DvcO6AkO4Q7bDtQNDrkOqQ6dDo0OiQ6FDokOkQ6dDrUO1w8gB
w8oCQ8tDycPIAUPHQ8ZDxUPDQ8FDwEO/w70Bw7wBQ7tDt0O0Q7JDr0OsQ6pDq0OuQ7FDtkO8
gf+B/4H/gf+BAkbvRvRG+kb5RvhG90b1xvQCRuJG4EbfRuxG7kbtRu7G8AFG8kb0RvVG9kb4
RvpG/Eb+xv0BRvNG8EbtRvXG8wFG8kbxRvBG70buRu1G2YECRtFG5sbnAUbpRupG7MbwAcb0
AUb3RvlG/Mb7AUb0RvNG8UbvRu1G7EbqRuhG5kbnRuhG5UbhRsjGxQFG3UbfRuHG4gFG5Ubm
RupG7UbvRvHG9AFG9sb5AcbvAUbrxucBRuZG40bhRt/G4AFG30bbRtlG10bURtNG1UbYRtlG
20bcRt9G5MbpAUbsRu3G8QFG9Eb1RuxG50blxuMBRt9G3EbZRtZG2EbWRtRG0UbQRsxGy0bH
RslGzEbPRtBG0UbTRtlG3kbkxuUBRulG7EbvRvJG5kbjRuBG3kbdRtlG1UbRRs5GzUbLRshG
w0bCRr9Gu0a4RrlGvEa/RsJGxkbJRs5G00baRt1G4UblRulG60bsRttG2EbVRtRG0kbORshG
w0bCRsBGvEa3RrBGs0awRqxGq0atRq9GsUa0RrpGvUbDRshGzUbTRthG30blRudG60a3RshG
y0bGRsNGvEa5RrZGs0auRqhGp0agRp9GnEaXRphGl0abRpxGokaoRqpGtEa7RsNGyEbPRtZG
30biRuYBRnJGsMa3AUasRqdGpkalRp9GmUaSRoRGf0Z+RnhGdEZ2RnhGfUaERohGj0aYRqNG
ska6RsJGzkbWRtlGyoEBRlRGd0aZxpoBRpZGk0aQRoZGa0YzRihGJUYcRhfGGQFGI0YuRjVG
P0ZPRlxGbUZ6RohGmUaoRpyBBEYtRlFGeEZ8xnkBRmZGHYEZRgdGJkYrRk5GOwCBHIABgZSG
EYENhhOBB4ZjAYYegQQGgRGGB4EUhgqBEYYLgROGCYEVhgaBBUabgRGGA4EGRp9GvEbZgRpG
rkbIRt1G4EbjgRhGwkbTRuTG5gFG5UbTgRdG00brRuzG6wFG6kbKAcb6AUb4hilG6EbjRuaG
z0bKhhOCAoYHRrVGuoYSggOGBUbcRqxGpsanAYYHRnBGU0ZQRlVGUkZLRkpCUEJiQmlCbEJ2
QoFGkEacRqlGsUbARspG0UahRpxGkUaJRo1Gk4YERu9GSUYlRiJGKUYkRhtCH0IoQjdCQEJG
QlBCZEZ5RolGmEakRrVGw0bKRp1GkUaIRntGc0ZrRm9Ga0Z3RvBG7kZnRiXGFQHGGAFGEUIR
QhZCI0IwQjlCRkJYRm5GfUaNRplGrUa+RsVGl0aKRn1GcUZmRlxGVkZGRkFGT0ZNRjBGF0YN
Rg7GDwFGCUIHQg1CGUIlQjNGQEZORmFGcEaERpZGpka0RsFGlEaDRnNGaEZfRlVGT0ZCRjZG
M0YqRiRGHEYRRg3GDwFGDUIJQg5CFkIlQjJCOUZFRlpGaUaARpNGoEasRrpGjUZ+Rm1GYEZY
RlNGTUZARjlGMMYpAUYhRhpGE0YRRhVGEkIQQhNCGUIjQjNCPUJFRldGaUaARpBGm0aoQrSG
B0b8RuhG8EbuRuJGyEbFRrNGkkaLRnRCUEIKRhdCI0IwQj5GT0ZeRnBGfEaOQp1GrYYTRqtG
NUJCQkVCQUZSRl9GZEZ7RpJGqUanhp+BAYYGgQ2GCIEThguBEYYMgRGGC4EBRoGBEIYIgQNG
jwaBEYYEgQRGlEbRhgGBGUalRteGA4EYRs+GBYEWRtFG7IYFRtmG9IIDhhqCBYYBggGGFIIG
BoIDhhKCDIYRgggGggOGEYINhhGCDoYQgggGggSGEIIOhgxG/kb8RvoGgg6GEgJCrEI2QkNC
RkJCQlNCYEJpQnxCk0KqQqiGEYIMhhKCBIYBggSGE4IEBoIEhhSCBAaCA4YVggOGAoIBhgRG
bkbthgZG+kbpRuNG6UbXRtBG1kbFRr1Gwka3RqFGrEbshgiAAUYcRhNGdUaLRk1GDkYJgAdG
G0asRvSGC4AQRsCGDEbzgA9GK4YLRuBGcka+gA9GKYYIRulGl0ZZRoiGAYAQRruGBEbYRpdG
SABGZUbzhgKAEEYURqNG60bURoFGM4ABRktG6oYEgBZGMkazhgaAFEYERo2GCEafRplGgEbq
hgZG+UbkRsxGrkatRsVG10biRtxGy0anRpJGjEaWRqHGrwFGtUa7RsFGtkbyRuxG5Eb0hgJG
/UbxRudG00a8RopGLkY2Rn9GpEbDRtxG40bcRshGvka3RrBGr0axxqsBRqdGrEavhgFG/Ub+
hgFG90bwRu5G5UbXRstGwka0RrlG0UbdRulG90b6xvsBxvUBRu9G5EbjRuRG30bSRtxG30b8
hhdG/oYDRv1G/oYSRvlG+kb7hhJG/kb3RudG4EbqhgLG/AFG90b5RvpG+0b8RvdG+Eb6RvtG
+Ub2Rv2GBEbxRuJG8EbxRuJG1kbKRsVGykbbRu9G7EbmRudG7EbuRvZG5kbcRtpG30blRvSG
CEbrRtlG6EbzRu9G4kbXRtZG3UblRuxG7kboRu9G+Eb5QvnC9gFC+IIBhglG9EbxRvRG9Uby
Ru9G6EbpRutG7kbxRvLG9AFG+EL+ggUGggOGA0b+RvlG9kb1RvjG9QFG80bwxvMCRvlG+Eb7
QvpC/YILhgLG/QHG/AEGRvpG+Eb9RvdG9UbyRvNG+Eb2QvVC9EL4Qv6CCoYHxv0BRvxG9Ub0
xu8CRvRC70LyQvRC+UL7Qv2CCIYGRv5G/Ub2RvVG80buxuwCRu3C6wFC8EL2wvkBQvyCB4YF
Rv5G+Mb2AUb0RvLG6wHG6QJC6ELlQupC7kLzQvdC+oIHBkb+Rv1G/Eb7RvNG8UbwRu5G60bq
RulG6EbkRuNG5EblwuQBQuxC60LwQvRC+IIHRvlG90bvRu5G7UbmRuNG4kbgRuJG3kbdRuBG
30bdRtpG3ULdQuFC6kLpQu1C80L8ggdG8kbwRu5G50bhRuBG2kbZRtpG1EbSRtHG0AFGzkbM
RtBC0ULUQtdC2kLpQu9C9UL7ggaGEQJC1UKYQqRCsEK8QtpC9YIFhhCCAkLcQsvC1wFCz0Lk
Qu9C8YIDhhCCDIYSggyGEoILhgJGuYYQggQGggSGAkajRp5GtkarRvcGRsdGqEamRp1GlEaX
RphGm0akRqdGo0aMQmxCYUJOQlhGkUbFBoIBhgRGr0asRqhGp0ajRqJGoUaoxqwBRq1GsEay
RrVGuUa8RrZGl0ZjRphG4oYKRr5GuUa2xrcBRrlGu0a6Rr1GvkbERsdGy0bMRs1Gz0bCRpWG
C0b5RshGzkbJRsVGxkbHRspGyUbMRs9G0EbVxtgBxtsBRtxGxUa/hglG1kbChgFG1kbVRtZG
1UbXRtZG10bbRt5G4EbhRuLG4wFG50blRtBGvoYGRtVGtEa9RvSGAkbcxtsBRtxG3sbfAUbk
RuZG58boAUbqRuxG7UbsRuFGy4YDRr1GtUbARstG7IYERuJG4cbjAUblRufG6AHG7AFG78bw
AUbxRvDG8gFG5kbVRsVGw0bMRtVG2kbqhgZG50boRupG60bsxu8BRvBG8UbyRvNG9Ub0xvYB
RvdG9kb3RvVG6kboRudG6IYIRu9G7kbvRvFG8kb0RvXG9wJG+Mb5A0b4RvlG+kb5RvVG8oYK
gANGCUYuRjlGQ0ZERi9GGoAYRiVGOkYjgBhGBEYPgAFGE0YCgBpGEUYdRiBGH0YdRhJGBUYf
Ri1GH0YFAEYDRh1GKEYgRgxGEEYRRgZGEEYkRh5GBQBGCEYNRgmAAkY2RmBGaUZaRkxGXUZr
Rl9GXkZgRmhGPUYYRi5GU0Y9RjRGEIADRglGKkY4RipGOUZARkRGLkYwRlZGk0acRppGdEZT
RllGT0YxRgaAFUYeRohGj0Z2RgmAFkYERi1GUkZ4RpVGJkYzRkJGC4ATQgBCLUZcQn5CmEK1
RsRGzkYzRiNGHYAQQhJCIEImQjNCTEJmQoFClkKkQrRCxEbSRiBGDUYBgBBCDUIeQiNCMEJG
Ql9CdUKHQpZCp0K4QsVGE0YIRgGAEUIDQglCG0IvQktCaEJ4QopCnkKxQr9GLMYkAUYXRg7G
BgFGAYAOQgNCGEI5QlRCakJ8QpJCpkK2RkVGP0Y8Ri5GH0YQRgSAEEIEQiVCO0JWQm9ChkKd
Qq5GQkYzRitGHkYOgBNCF0IvQktCZkJ+QpFCpEYJgBdCDkIoQkRCYkJzQoZCnIAYQgxCK0JB
QlxCb0KEQpdGHkYdxhsBRhzGCgKAEEIFQiVCP0JXQmlCfkKQRq5GrEaqRqtGsMafAUakRptG
ikaURpVGjkZ3Rn1GdUZeQlhCTkIsgAVCIEI6QlBCZEJ6QoxG9kb0RvJG80b9xu8BRvpG9Ebk
Ru9G9EbwRtnG5gFG1ULVQtBCqEIxQiTCLgFCJ0I3QkFCQkJRQl5Ca0J7Rt5G90b9RtpG6sbh
AUbwRu5G4kbvRv1G+EbshgFG+IIBQtdCo0K0QrxCuUKxQsFCyELHQs5C1ULbRtlGfkbFRu0G
RvfG+gFG+EbzxvIBRulG90bwRulG+kbzQutC/EL7QuhC+gJC+ELvQv0CQvxC+kL3RvNG8UaD
RtNG+0bwRvtG/kbnRvNG+Eb2RuxG5UbzRuhG4UbvRuRC3ELpQuRCzkLgQuFC10LOQthC2ULQ
QsVCukazRq5GkUaMRqpGn0a/RtZGl0afRqBGm0aPRolGkkaFRn9GiEZ7QnVCfEJ1QmJCbkJt
QmBCWUJfQlxCVkKORsRG3EbwRpxGmUaWRozGhwFGhEaIRoxGj0aORoxGj0aZRp9GoEabRn1C
SUINgAJGH0JbQohCo0LIRvFG+MbyAUasRqdGpUakRp3GmwFGoEalRqZGp0aqRq1GsUa1RrhG
skaKRkxGDUI2RmNGf0ayRtVG40bvBkb3RtZGxkamRrpGs0a0RrNGtca0AUa1RrhGu0a8RsBG
yEbFxskBRrtGhUZXRpdGu0bLRulG/kb7RuxG7kbYRqBGnEalRrBGyUbERsFGw0bERsbGxwFG
ykbMRtJG00bXRthG2kbYRrpGhkarxvMBRvdG+0boRsBGskaQRo9Go0atRrZGv8bTAUbSRtHG
0wFG1EbXRtpG3kbcRuFG4kbjxuQBRsVGnEapRvFG2kbORq1GekZ3Ro5GqEayRrpGvEbBRsZG
3EbbxtoBxt0BRt5G40bkRuXG6ALG6wFG7EbfRsNGlUaSRn5GgkaaRqhGs0bARsVGx0bFRsbG
ywFG4UbfRuFG4kbjxuYBRudG6kbsxu4CxvABxvIBRuFGzEa7RrhGxUbNRtJG1EbSRtFG0EbO
RtHG1AHG5gFG50bqRutG7cbuAUbvRvFG88b0AUb1RvZG9cb2AUbxRuRG38bkAkbgRttG2UbY
RtlG28bcAUbtxu4CRvFG8kb0xvUBRvZG90b4RvlG+Eb5RvjG+QJG9UbyRu5G60bpRubG4wLG
4gFG4UbigP+A/4BtRgJGAQBCAUIDgA9GA4ARQgGAAkIDgH9GAoD/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A4wAAAAAAAAAAAAAA
AYAIiBKACogUgAiIFoADiBuAA4gbgAOIG4ADiByAAogcSBCAAYgdgAGIHgCI/4jfgAKIHIAC
iByAAogcgAKIGIAGiBiABogYgAaIGIAKiBWAB4gXgAKIHIACiByAAogcgAKIHYABiB2AAYge
AIgeAIj/iN+AAYgdgAGIHYABiB2AAYgdgAGIHYABiBqABIgagASIGoAGiBmAAYgdgAGIHYAB
iB2AAYgdSLgAiB4AiB4AiP+I/wCIHgCIHgCIHgCIHgCIHgCIHgCIHgCIHIACiByAAYgeAIge
AIgeAIj/iP+I/4ieAIj/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+I
/4j/iP+I/8PSA0PRQ9JD0UPQQ89DzkPNQ8tDykPIQ8ZDxUPEQ8JDwcPAAUO+Q7pDuEO1Q7ND
skOzQ7VDuEO7Q8HD2APD1wFD1kPVQ9RD00PRQ9BDzkPMQ8tDyUPIQ8ZDxUPEw8MBQ8BDvkO7
w7kBQ7hDukO9Q8BDxsPdA8PcAUPbQ9pD2UPXQ9ZD1EPTQ9FDz0PNQ8xDykPJQ8hDx0PGQ8RD
w0PBQ75Dv0PAQ79DwUPGQ8rD4gHD4QJD4EPfQ95D3UPcQ9pD2UPXQ9VD00PRQ89DzkPMQ8tD
ykPJQ8hDx8PGAUPHw8YBQ8hDy0PPw+YDw+UBQ+RD40PhQ+BD30PdQ9tD2UPXQ9VD00PRQ9BD
zkPNQ8zDywLDygFDy0PMQ85D0UPTw+oDQ+nD6AFD50PlQ+RD4kPhQ99D3EPaQ9hD1kPVQ9ND
0UPQQ89DzsPNAsPOAUPPQ9FD00PVw+0EQ+xD60PqQ+lD50PmQ+RD4kPgQ91D20PZQ9hD1kPU
Q9ND0cPQAcPPAUPQQ9FD0kPTQ9ZD2MPwBEPvQ+5D7UPsQ+pD6EPnQ+VD4kPgQ95D3EPaQ9hD
10PVQ9RD08PSAUPRw9IBQ9ND1UPXQ9nD8wHD8gJD8UPwQ+9D7kPsQ+tD6UPnQ+VD40PgQ95D
3EPbQ9lD10PWQ9XD1AFD08PUAUPVQ9ZD2EPaw/QEQ/ND8kPxQ/BD7kPtQ+tD6UPnQ+RD4kPg
Q95D3UPbQ9lD2EPXQ9bD1QJD1kPXQ9hD2kPcQ/bD9QND9EPzQ/JD8UPwQ+5D7EPqQ+hD5kPk
Q+JD4EPeQ9xD20PZQ9jD1wRD2EPZQ9tD3cP2A8P1AUP0Q/ND8kPwQ+9D7UPrQ+lD50PlQ+ND
4UPfQ95D3EPbQ9pD2cPYAkPZQ9pD20PdQ97D9gPD9QFD9EPzQ/JD8EPvQ+1D60PpQ+dD5kPk
Q+JD4EPfQ91D3EPbw9oEQ9tD3EPeQ+DD9QRD9EPzQ/JD8UPwQ+5D7UPrQ+lD6EPmQ+RD4kPh
Q99D3kPdQ9zD2wPD3AFD3UPfQ+HD9APD8wFD8kPxQ/BD70PuQ+xD60PpQ+dD5kPkQ+JD4UPg
Q9/D3QHD3AND3UPeQ99D4EPiw/IDw/EBQ/BD70PuQ+1D7EPrQ+pD6EPmQ+VD5EPiQ+FD4EPf
Q97D3QRD3kPfQ+BD4kPjw/ADw+8BQ+5D7UPsQ+tD6kPpQ+hD50PlQ+RD40PiQ+FD4EPfw94F
Q99D4EPhQ+ND5MPtA8PsAcPrAUPqQ+lD6EPnQ+ZD5UPkQ+ND4kPhQ+DD3wHD3gPD3wFD4EPh
Q+JD5EPmw+oCw+kCw+gBQ+dD5sPlAUPkQ+ND4kPhw+ABw98Bw94Dw98BQ+BD4UPiQ+ND5UPn
w+YEw+UBw+QBQ+PD4gFD4cPgAcPfAcPeBcPfAUPgQ+FD4kPjQ+RD5kPow+IEw+EBw+ACw98B
w94Cw90Fw94Bw98BQ+BD4UPjQ+RD5UPnQ+nD3gPD3QPD3ALD2wbD3AJD3UPeQ99D4EPhQ+JD
40PlQ+dD6UPqw9oBw9kEw9gHw9kCQ9rD2wFD3UPeQ99D4EPhQ+ND5EPmQ+hD6kPsw9UDw9QH
w9UBw9YBQ9fD2AFD2UPbQ9xD3UPfQ+BD4kPjQ+VD50PpQ+tD7UPRw9AJw9EBQ9JD00PUQ9VD
1kPXQ9hD2kPbQ91D30PgQ+JD5EPmQ+hD6kPsQ+7DzAHDywbDzAFDzUPOQ89D0EPRQ9JD1EPV
Q9dD2UPbQ91D30PhQ+ND5UPnQ+lD60PtQ+/DxwPDxgHDxwLDyAFDyUPKQ8xDzUPOQ9BD0kPU
Q9ZD2EPaQ9xD30PhQ+ND5UPoQ+pD7EPuQ/BDw8PCBkPDQ8RDxUPGQ8dDyUPKQ8xDzkPQQ9JD
1EPXQ9pD3EPfQ+FD5EPmQ+hD60PtQ/BD8sO+B0O/Q8BDwUPCQ8RDxkPIQ8pDzEPOQ9FD00PW
Q9lD3EPfQ+FD5EPnQ+lD7EPuQ/FD88O6AsO5AcO6AkO7Q7xDvkO/Q8FDw0PFQ8hDykPNQ89D
0kPVQ9lD3EPfQ+JD5UPnQ+pD7UPvQ/JD9MO2BkO3Q7hDuUO6Q7xDvkPBQ8NDxkPIQ8tDzkPR
Q9VD2UPcQ99D4kPlQ+hD60PuQ/BD80P1w7MBw7IDQ7NDtEO1Q7ZDt0O5Q7tDvkPBQ8RDx0PK
Q81D0UPUQ9hD3EPfQ+ND5kPpQ+xD70PyQ/VD94H/gf+B/4H/gRVG7EbtRvRG8kbwRu9G4kbU
gRZG+Ub7xvgBRvVG9EbggRcGRv5G/Ub7RvhG8UbngReGAkb+Rv1G9YEVhgdG/IEKhhKBCYYU
gQqGFIEKhgyBEoYBgf+B3YYSgQyGHIEChkyBAYZwgRVG7oYFRuxGzoEUxvsBhgRG8UbYgRWG
BkbtgRaGBUb6RuyBDYYORvyBB4YWgQiGFYEJhhSBCoYSgQyGBIH/gcGGAgEGgROGFwGGAoED
hh2BAYa/gBNGV0bmhghGZYASRpyGCEaLRgmAEkaAhgdGw0Y1gAhGBkYKRjBGRkZJRlpGZkZr
RmlGiUacRruGB0Z/gARGJEZSRnxGoEa+RulG/kb8hg9G3UY+gAWGFkapRhKABoYVRquACIYU
RtlGCoAIhhJG8kaXRiCACYYERv1G0UbPRrpGjkaQRo1GhEZ1RmpGYUZCRjpGG4AMRsZGnkZ/
RlpGMEYBgP+AgEYIRhFGEkYJRgiAE0aNRqFGrEbERuNG90bthgJG/gZG+0bKRrxGnkaQRsZG
oUZgRjRGKEYeRgxGBUYVRjNGHYADhhdG/IYCRu5GoEYTAIYdRvZGyIa/RvXG9gLG9wFG+sb7
Bkb8RvtG/Mb7AoYLRvlG+kb5xvwBRvvG/QLG/gHG/QLG/gLG/QGGCkb+Ru7G/gFG/cb+AoYB
xv4ChhFG8MbiAYYbRvVG2UbCRsiGGUb4RvRG2ka6QqhCtoYYRv1G+EbpRrtGnkKaQrKGF8b+
AUbuRtZGsEadQpxCuIYYRvZG4kbURrpGskK5Qs+GGEbuRtxG00bQQtVC20Lkhg+CAYYDggJG
70bgRthG2sLpAULthg2CBIYBggNC90brRuJG4UbmwuQBhg2CBQaCBEL6RvRG70bsQutC5YYN
ggUGggWGAUb8QvdC9YYNggSGAYIEhgKCAoYOggKGA4IChgKCA4YbggOGG4IDhhyCAob/hkxG
+kbZhnBG80b1xvQBxvcBRvlG+kb7RvrG+wNG/Eb7RvzG+wJG+Eb1RvFG7UbsxuoBRuhG50bo
RudG6cb5Akb7RvxG+0b8Rv1G/Mb9BMb+Asb9Akb6xvcBRvNG8sbvAUbuRuxG6kbjRtvG/QPG
/gEGxv4EhgFG/oYERv5G+0b4RvdG9Ub0RvNG8kbxRtpGxkbAhhPG/gFG+0b6RvhG90b1RvRG
2Ua3RqhCqYYUxv4BRv3G+gFG+EbgRrdGl0KMQpmGFcb+Acb9AUboRsVGnUKGQn1CjYYXRv5G
8EbeRrhGl8KDAUKXhhdG/EbnRtlGvUajQppCnEKvhhdG+kbsRu9G6Ua8QrhCwELMhg6CA4YB
ggJC90LpRupG8UbnQu1C50Lrhg2CBQaCA0LsQupG70bzQuhC7kLlhgyCC0L5Qu1G60bqRutC
7kLyhgyCDUb5RvVC70LtQuuGDYIFBoIFBoICQvyGDYIEhgKCA4YBggOGDwKGCoIDhhuCA4Yb
ggOGHYIBhv+GIEb8RuxG+0b5RtlG6kbWRrlGlUaGRnpGY0ZJRi9GrkbzRtlGaEasRt9G6kb9
RvVG70bpBkbvRuRG80b1RuUGRt9GyUbYRu1G4kb2hgFG9EbuRuhG3EbNRrtGrkb2RvdGxUbw
RvpG/Eb3RvNG70biRspG5EbcRuRG30aURvNGzkaORmBGh0aSRqxGx0bjRvZG+0b+hgFG/Ubz
RuUGRvVG70bnRuBGz0bDRsFG4UbYRs1Gv0bARtZGcEb5RvdG30azRnZGYUZvRmNGc0bfRvJG
50b5RtVG40b3Rv1G30bmRutGxUbPRtJG0UbSRstGykbFRshGyka3RmKAykYBRgKAAUYCgAhG
CkYGgBxGBUYXRhNGAkYGAEIAgBhGC8YdAUYLRhNCC0IRQgmAF0ILQh1GGEYRRhpCFUIaQhaA
F0IGQhZCF0YTRhtCGEITQhuAGEILQhZGHEYXRhZCE0IbgBlCA0YJRg1CFEIWQhqAHUICQgiA
/4B/RgKAD0YBgA5GAYATRgFGA0YCAEYCAEYBgAJGAoAYRgKABEYBgAXGAQGAIsYCAYACRgOA
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gC0AAAAAAAAAAAAAAAGAAogYgAOIG4ADiByAAogdgAGIHYABiB2AAYj/iAyAAYgbgASI
GYAHiBaABogXgAWIGIAFiBqAA4gXAIgDSMqIE4ABiAIAiBmAAYgBgAGIGYAFiBiABogYgAaI
F4AGiBeAB4gWgAiIFoAIiBaAB4g6gAKIHIACiByAAogdgAGIHYABiB2AAYgdgAGIHYABiB2A
AYgeAIgeAIgeAIgdgAGIHIACiByAAYgLgAaICYACiAqACYgFgAOICoAGiAuAAogIgAWIDoAC
iAiAA4gQgAGICgCIEYABiB2AAYgdgAGIAQCIGoADiBqABIgagASIGYAFiBiABogXgAeIF4AH
iB2AAYg7gAGIHYABiByAAogdgAGIHYABiB2AAYgdgAGIHIACiBuAA4gagASIGoAEiBqABIga
gASIGUg0gASIEgCIBYAFiApIu4gFgAOIAYAHiAmACYgEgAaICIAGiAuAA4gJgASIDYACiAqA
AYgQgAGIHgCIHgCIHYABiB2AAYgdAAgAiBuAAQgAiBqAAggAiBmAAwgAiBmAAwgAiB4AiB6A
AYg8AIgeAIgdgAGIHYABiB2AAYgdgAGIHYABiByAAogbgAOIGYAFiBiABogXgAeIFoAIiBWA
CYgUgAqIE4ALiAmAAYgGAIgFgAWICYACiA+AAogKgAGIEIABiAsAiBEAiB4AiJwAiKEAiD0A
iB4AiB4AiB4AiB4AiB2AAYgdgAGIHIACiBuAA4gagASIGYAFiBiABogXgAeIFoAIiBWACYgV
gAmIGoAEiByAAogeAIj/iP+IXgCIHgCIHYABiB2AAYgcgAKIG4ADiBqABIgZgAWIGIAGiBeA
B4gXgAeIG4ADiB0AiP+I/4jfAIgeAIgdgAGIHIACiBuAA4gbgAOIGoAEiBmAA4j/iP+I/4j/
iP+I/4j/iP+I/4j/iP+I/4j/iP+IAUOww68EQ7BDsUOyQ7NDtUO3Q7lDvEO/Q8JDxkPJQ81D
0EPUQ9lD3EPgQ+ND50PqQ+1D8EPzQ/ZD+MOtAcOsAsOtAUOuQ69DsUOzQ7VDuEO7Q75DwUPF
Q8lDzEPQQ9RD2UPdQ+FD5EPoQ+tD70PyQ/RD90P5w6sBw6oDQ6tDrEOtQ69DsUO0Q7ZDukO9
Q8FDxEPIQ8xD0EPUQ9lD3UPhQ+VD6UPsQ/BD80P2Q/lD+8OpAsOoAUOpQ6pDq0OsQ65DsEOy
Q7VDuUO8Q8BDxEPIQ8xD0UPVQ9pD3kPiQ+ZD6kPuQ/FD9EP3Q/pD/MOoAcOnAkOoQ6lDqkOr
Q61Dr0OyQ7VDuUO8Q8BDxEPIQ81D0UPWQ9tD30PjQ+hD60PvQ/ND9kP4Q/tD/UOow6cEQ6hD
qUOrQ61Dr0OyQ7VDuUO9Q8FDxUPJQ85D0kPXQ9xD4UPlQ+lD7UPxQ/RD90P6Q/0DQ6jDpwRD
qEOpQ6tDrUOvQ7JDtUO6Q71DwUPGQ8pDz0PTQ9hD3UPiQ+ZD60PvQ/JD9kP5Q/xD/gNDqcOo
AUOnw6gBQ6lDqkOsQ65DsEOzQ7ZDu0O/Q8NDx0PMQ9BD1UPaQ99D5EPoQ+xD8EP0Q/dD+kP9
gwFDqsOpBEOqQ6tDrUOvQ7JDtUO4Q7xDwEPEQ8lDzUPSQ9dD20PhQ+ZD6kPuQ/JD9kP5Q/yD
AkOsw6sEQ6xDrUOvQ7FDtEO3Q7pDvkPCQ8ZDy0PPQ9RD2UPeQ+ND6EPsQ/BD9EP4Q/tD/oMC
w64Bw60CQ65Dr0OwQ7JDtEO2Q7lDvEPBQ8VDyUPNQ9JD10PbQ+BD5kPqQ+5D8kP2Q/pD/YMD
w7EBw7ACQ7FDskOzQ7VDt0O5Q7xDv0PEQ8hDzEPQQ9VD2UPeQ+ND6EPtQ/FD9UP5Q/yDBEO1
w7QEQ7VDt0O4Q7pDvUPAQ8NDx0PLQ89D1EPYQ91D4UPmQ+tD70PzQ/dD+0P+gwTDuQHDuALD
uQFDu0O8Q75DwUPEQ8dDy0PPQ9ND10PcQ+BD5EPpQ+5D8kP2Q/pD/YMFQ77DvQRDvkO/Q8FD
w0PFQ8hDy0PPQ9ND10PbQ99D5EPoQ+xD8UP1Q/lD/YMGQ8PDwgFDwcPCAUPDQ8RDxkPIQ8pD
zUPQQ9RD10PbQ99D40PnQ+xD8EP1Q/hD/IMHQ8jDxwRDyEPJQ8tDzUPPQ9FD1EPYQ9xD4EPj
Q+dD60PvQ/ND+EP8gwjDzQHDzALDzQFDzkPQQ9JD1EPXQ9lD3UPhQ+RD6EPsQ/BD80P3Q/yD
CUPTw9IEQ9ND1EPVQ9dD2UPcQ95D4kPlQ+lD7EPwQ/RD90P7gwpD2cPYAcPXAcPYAUPZQ9tD
3EPfQ+FD5EPnQ+pD7kPxQ/RD+EP7gwvD3gHD3QND3kPfQ+BD4kPkQ+ZD6EPsQ+9D8kP1Q/lD
/IMJiALD4wHD4gND40PkQ+VD50PpQ+tD7UPwQ/ND9kP5Q/2DCIgEw+gBw+cDQ+hD6UPqQ+tD
7UPvQ/JD9UP3Q/pD/YMIiAVD7cPsBUPtQ+5D8EPxQ/ND9UP4Q/tD/oMHiAfD8QHD8ARD8UPy
Q/ND9UP3Q/lD/EP+gwiIB0P1w/QBw/MCw/QBQ/VD90P4Q/pD/EP+gwiICMP4AcP3AcP2AcP3
AUP4Q/lD+0P8Q/6DCYgIQ/vD+gHD+QRD+kP7Q/1D/oMKiAjD/QFD/MP7BEP8Q/1D/oMLiAeD
AUP+w/0Bw/wDQ/1D/oMOiAODBMP+AcP9BEP+gxhD/sP9BUP+gxSB/4FeQwCBHUMAQwKBHEMA
QwJDA4EbQwBDAkMEQwWBGkMAQwJDA0MFQwaBGUMAQwFDBEMFQwdDCIEZQwJDBEMGQwfDCQGB
GEMCQwRDBkMIQwlDCkMLgRZDAEMCQwRDB0MIQwpDC8MMAYEVQwBDAkMFQwdDCUMLQwxDDcMO
AYEUQwBDA0MFQwhDCkMLQw1DDsMPAoETQwBDA0MGQwhDCkMMQw5DD8MQAUMRQxCBEkMAQwND
BkMIQwpDDEMOQw9DEEMRwxIBQxGBEUMAQwNDBUMIQwpDDEMOQxBDEcMSBIEQQwBDA0MFQwdD
CkMMQw5DD0MRwxIBwxMBwxIBgQ9DAEMCQwVDB0MJQwtDDUMPQxBDEUMSwxMCQxJDEYEOQwBD
AkMEQwZDCEMKQwxDDkMPQxBDEcMSA0MRQxCBDkMBQwNDBUMHQwhDCkMMQw5DD0MQwxEBQxLD
EQFDEEMPgQ1DAEMBQwNDBUMHQwhDCkMMQw1DDkMPwxADQw9DDkMNgQ1DAEMBQwNDBUMGQwhD
CUMLQwxDDcMOBEMNQwxDC4ENQwBDAUMCQwRDBUMHQwhDCUMKQwvDDARDC0MKQwiBDkMAQwFD
AkMDQwVDBkMHQwjDCQHDCgHDCQFDCEMHQwWGioEGhheBCIYKgQGGB4EMhgSBBYYGgRiGBYEZ
hgSBGoYCgRyGAoEchgGB/4H/gX2GbEb4hh2BAUbzRvjG+gGGGIEGRvRG+oYHxvwBRvuGCEb4
gQpG8Eb3RvZG9EbwRvNG9UbtgQOGB4EXhgRG94EZhgNG7YEahgJG84EbhgFG8IEcBkb7RveB
HEb5gf+B/4FehotGe0ZFRn5Gs0bUhhhG90YxgAVGnkbthghG6UbFRs+GCEZ1gAlGqkb3hgJG
9UbURrZGO4AChgZG5kYvgA1GEEYigAaGBEbVRiWAGIYDRqGAGoYBRu9GY4AbhgFGkIAchgFG
YoAcRvNGkYAdRhyA/4D/gD6GPkbzhhVG9kbsRuNG30b0hhBG5ka/Rr1GwUbbRuuGA0b7RvhG
9Eb6hglG+YYFRpeABUaURt9G9Ub6RvRG7kbtRvNG70boRttGy0bORtSGCEbvRkuACEZVRp9G
vkbARr1GuEacRohGYUY9gAGGB0aFgAxGMkZMRl1GQYAFRuuGA0b3Ro+AGEbuhgFG+EajRhyA
GUbPRtdGi4AcRo9GYoAdRkeAHkYvgP+A/4B+RtZG6wZG4kbeRtRG40bbRtNG0UbfRvxG9Ub3
RuxGz0bFRtNG1kbSRtlGzkbURtVG2UbORsVGukaVRoFGZUYGRvhG+QZG+gZG94YCRvqGAUb3
RtlG1kbVRtJG00bIRtJG0Ua3RpRGfUZnRklGYEZ9RklGB4ABRt9G1UbeRubG4wFG6EbrRu5G
90b5RuFGlUZkRmBGa0ZwRopGmkaDRltGJ4AERgtGPEYzRhwARpJGc0ZDxkUBRlNGa0a1RuZG
7UbbRlSABkZbRl5GLoAERiFGJUYrRjFGHEbCRqZGX4ABRkJGnUbXRrJGmkYpgBRGf0alRpdG
OEZURphGqEaMRj6AFkYCRotGrkZ8RqNGokZkRgqAGEZQRopGckZNgBtGFUYQgP+A/4D+RgKA
HkYCAEYBAMYCAgDGAgGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gNMAAAAAAAAAAAAAAAEAiP+IsIADiBqABIgagASI
GoAEiBqABIgdgAGIaQCIFgCIBoABiBWAAogEgAKIFYAKiBSAC4gTgAqIFIAJiBWABohfAIj/
iK+AA4gbgAOIG4ADiBuAA4gbgAOIHIADiB4AiEkAiB6AAYgVAIgGgAKIFIACiASAA4gTgAyI
EoALiBOAB4gBSJGIFACIZgCI/4jPgAOIG4ADiBuAA4gagASIGoAEiB4AiEoAiB6AAYgUAIgH
gAKIFACIBoADiBOAAYgFgASIEoAMiBIAiIYAiP+Iz4ADiBqAA4gbgAOIG4ADiBuABIgdgAGI
aoABiB2AAogcgASIEQCIB4AFiBBIfIgLSCaI/4j/iGqAA4gbgAOIG4ADiBuAA4gagASIHgCI
a4ABiB2AA4gbgASIGoAFiP+I/4iJgAOIG4ADiBqABIgagASIGoAEiB2AAYhrgAKIHIADiBuA
BIgagAWI/4j/iImAA4gagAOIG4ADiBuAA4gagASIGoABCIABiG2AAYgcgAOIG4AEiBqABYgf
AIj/iP+IZ4ADiBuAA4gagASIGoAEiBqAA4gagASIboABiB2AAogbgASIGoAFiB6AAoj/iP+I
ZoADiBqABIgagAOIGoAEiBqABIgagASIGgCIU4ABiByAA4gagARIVogZgAaIGIAIiB0AiP+I
/4gmgAOIGoADiBqABIgagASIGoAEiBmABYgZgAOIG4ABiByAAYgdAIgWAIgdgAKIBACIFYAE
iAIAiBaACIgVgAmIGoADiB2AAYhWgwJD/kP9w/wEQ/1D/oMVQ/5D/UP8w/sFQ/xD/UP+gxND
/kP8Q/tD+sP5BMP6AUP7Q/xD/YMQQ/5D/EP7Q/lD+MP3AkP2w/cCQ/hD+UP6Q/tD/EP9Q/6D
CUP+Q/xD/kP8Q/pD+UP3Q/ZD9cP0BUP1w/YBQ/dD+EP5Q/pD+8P8AcP9A8P8AUP7Q/lD+EP8
Q/pD+EP3Q/VD80Pyw/EBw/ADw/EBQ/JD80P0w/UBQ/ZD98P4BUP3Q/ZD9UPzQ/pD+EP2Q/RD
8kPwQ+9D7sPtAcPsAsPtAcPuAUPvQ/DD8QFD8sPzAkP0w/MBw/IBQ/BD70P4Q/VD80PxQ+9D
7UPsQ+tD6kPpw+gDw+kBw+oBQ+tD7MPtAcPuAcPvAsPuAUPtQ+xD6kP1Q/ND8EPuQ+xD6kPo
Q+dD5kPlw+QFw+UBQ+bD5wFD6MPpAcPqAsPpAUPoQ+dD5kPzQ/BD7UPrQ+lD5kPkQ+ND4kPh
Q+DD3wTD4AFD4cPiAUPjw+QBw+UEQ+RD40PiQ/BD7UPqQ+hD5UPjQ+FD30PeQ9zD2wHD2gPD
2wFD3MPdAUPew98Bw+AFQ99D3kPtQ+pD50PlQ+JD30PdQ9tD2UPYQ9fD1gHD1QHD1gJD18PY
AUPZQ9rD2wHD3ARD20PaQ+tD6EPkQ+FD30PcQ9lD10PVQ9RD00PSw9EEw9IBQ9PD1AFD1UPW
w9cBw9gDw9cBQ+hD5UPiQ95D20PYQ9ZD00PSQ9BDz0POQ83DzAPDzQFDzkPPQ9BD0cPSAUPT
w9QFQ+ZD4kPfQ9tD2EPVQ9JD0EPOQ8xDy8PJAcPIBEPJQ8pDy0PMQ81DzsPPAUPQw9ECQ9JD
0UPkQ+BD3EPZQ9VD0kPPQ8xDykPIQ8dDxkPFw8QEQ8VDxkPHQ8hDyUPKQ8tDzEPNw84Bw88C
Q+JD3kPaQ9ZD00PPQ8xDyUPHQ8VDw0PCQ8HDwAPDwQFDwkPDQ8RDxkPHQ8hDyUPKQ8tDzMPN
AkPgQ9xD2EPUQ9FDzEPJQ8dDxEPCQ8BDv0O+w70EQ75Dv0PAQ8FDw0PEQ8VDx0PIQ8lDykPL
w8wBQ99D20PWQ9JDz0PKQ8dDxEPCQ79DvkO8Q7vDugPDuwFDvEO9Q79DwEPCQ8NDxUPGQ8hD
yUPKw8sBQ95D2kPVQ9FDzUPJQ8VDwkPAQ71Du0O6Q7lDuMO3AcO4AUO5Q7pDu0O9Q75DwEPC
Q8NDxUPGQ8hDyUPKQ8tD3UPZQ9RD0EPMQ8hDxEPBQ75DvEO6Q7hDt8O2AUO1w7YBQ7dDuEO6
Q7tDvUO/Q8FDwkPEQ8ZDyEPJQ8tDzEPdQ9lD1EPQQ8xDx0PDQ8BDvUO7Q7lDt0O2Q7XDtAHD
tQFDtkO3Q7lDu0O8Q75DwEPCQ8RDxkPIQ8lDy0PMQ95D2UPUQ9BDzEPHQ8NDwEO9Q7pDuEO2
Q7XDtAPDtQFDt0O4Q7pDvEO+Q8BDwkPFQ8dDyUPKQ8xDzkPfQ9pD1UPQQ8xDx0PDQ8BDvUO6
Q7hDtkO1Q7TDswFDtEO1Q7ZDt0O4Q7tDvUO/Q8FDw0PGQ8hDykPMQ85D0EPgQ9tD1kPSQ81D
yEPEQ8FDvkO7Q7lDt0O1w7QDQ7VDtkO4Q7lDvEO+Q8BDwkPFQ8dDykPMQ85D0EPSQ+JD3UPY
Q9NDz0PKQ8ZDwkO/Q7xDukO4Q7dDtsO1AcO2AUO4Q7lDu0O9Q79DwkPEQ8dDyUPMQ85D0UPT
Q9VD5UPgQ9tD1kPRQ8xDyEPEQ8FDvkO8Q7pDuMO3A0O4Q7lDu0O9Q79DwkPEQ8dDyUPMQ89D
0UPUQ9ZD2EPoQ+ND3UPYQ9RDzkPKQ8dDw0PAQ75DvEO7Q7rDuQFDukO7Q7xDvkO/Q8JDxEPH
Q8pDzEPPQ9JD1UPXQ9pD3EPrQ+ZD4UPcQ9dD0kPNQ8pDxkPEQ8FDv0O+Q73DvAFDvUO+Q79D
wUPDQ8VDyEPKQ81D0EPTQ9ZD2EPbQ95D4EPvQ+pD5UPgQ9tD1UPRQ81DykPHQ8VDw0PBw8AC
w8EBQ8NDxEPGQ8lDzEPOQ9FD1EPXQ9pD3UPfQ+JD5UP0Q+9D6UPkQ99D2kPVQ9JDzkPLQ8lD
x0PGQ8XDxAFDxUPGQ8dDyUPLQ81D0EPTQ9VD2EPbQ95D4UPkQ+dD6UP5Q/ND7kPpQ+RD3kPa
Q9ZD00PQQ85DzEPKw8kDQ8pDzEPNQ89D0kPVQ9dD2kPdQ+BD40PmQ+lD7EPvQwCBD0MAQwFD
AkMDwwUBwwYBQwfDBgJDBUMDQwKBEkMAwwEBQwLDAwRDAkMBQwCBF8MAA4H/gf+B/4H/gf+B
/4H/gf+B/4H/gf+BpID/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAA
AAAAAAAAAYj/iJ8AiB6AAogcgAKIHIADiBuABIgagASIGoAFiBmABYgZgAWIGYAFiBKADIgT
gAuIE4ALiBSACogVgAmIFoAIiBeACIgYgAWIGYAFiP+ImQCIHoABiB2AAogcgAOIG4AEiBqA
BYgZgAWIGYAGiBiABogYgAaIGIAGiBiABogSgAyIEoAMiBOAC4gUgAqIFYAJiBaACIgYgAeI
GIAFiP+ImACIHoACiByAA4gbgASIGoAFiBmABogYgAaIGIAGiBiAB4gXgAeIF4AHiBeAB4gR
gA2IEYANiBKADIgTgAuIFIAKiBYACIAGiBiABogZgAaI/4iWgAGIHYACiByABIgagAWIGYAG
iBiABogYgAeIF4AHiBiABogYgAaIGIAGiBiABogYgAaIEoADiAKABYgTgAKIAYAGiBSAAYgB
gAaIFQCIAYAHiBiABogYgAaIGYAFiP+IloABiB2AA4gbgAWIGYAGiBiAB4gXgAeIGIAHiBeA
B4gYgAaIGIAGiBmABYgZgAWIGYAFiBGAA4gDgAWIEoACiAOABYgTgAGIA4AFiBQAiAKABogZ
gAWIGYAGiBmABYj/iJWAAogcgASIGoAFiBmAB4gYgAeIF4AHiBiABogZgAaIGIAGiBmABYgZ
gAWIGYAFiBmABYgRgAKIBIAFiBGAAogEgAWIEoABiASABYgTAIgEgAWIGYAFiBmABYgagAWI
/4h0AIgegAKIHIAEiBqABogZgAZIJYgYgAaIGYAGiBiABogZgAWIGoAFiBmABYgZgAWIGYAF
iBqABIgQgAKIBoAEiBGAAYgGgASIEgCIBoAEiBqABIgZgAWIGYAFiBqABIj/iHQAiB6AA4gb
gAWIGoAGiBmABogZgAaIGYAGiBmABYgZgAWIGoAEiBqABIgbgAOIG4ADiBuAA4gRgAGIB4AD
iBIAiAeAA4gTAIgGgAOIG4ADiBuABIgZgAWIGoAEiP+IcwCIHoADiByABYgagAaIGYAGiBmA
BogZgAaIGYAFiBmABYgagASIGoAEiBuAA4gbgAOIEIABiAiAA4gRgAGICIACiBGAAYgIgAKI
EgCICIACiByAAogcgAOIGoAEiBmABYj/iJSAAogdgASIG4AFiBqABYgZgAaIGYAFiBqABYgZ
gAWIGoAEiBqABIgbgAOIG4ADiBCAAYgJgAKIEQCICYACiBEAiAmAAogdgAGIHYABiB2AAYgc
gAOIG4ADiBFD/kP5Q/ND7kPpQ+RD30PcQ9hD1UPTQ9FDz8POA0PPQ9FD0kPUQ9dD2kPdQ99D
4kPlQ+hD60PuQ/FD9AND/kP5Q/RD70PpQ+VD4UPeQ9tD2EPWQ9VD1MPTAUPUQ9VD1kPYQ9pD
3UPfQ+JD5UPoQ+tD7kPxQ/RD90P5gwJD+kP1Q+9D60PnQ+RD4UPeQ9xD20Paw9kBQ9pD20Pc
Q95D4EPiQ+VD6EPrQ+5D8UP0Q/dD+UP9gwRD+0P1Q/FD7UPqQ+dD5EPiQ+FD4MPfAUPgQ+FD
4kPjQ+VD6EPrQ+5D8EPzQ/ZD+UP8gwIIgwND+0P3Q/ND8EPtQ+pD6EPnQ+bD5QFD5kPnQ+hD
6UPrQ+5D8UPzQ/ZD+UP8gwSIAYMDQ/1D+UP2Q/ND8EPuQ+1D7MPrAUPsQ+1D7kPwQ/FD9EP3
Q/lD/IMGiAKDBEP8Q/lD90P1Q/ND8sPxAUPyQ/ND9EP2Q/hD+kP9gweIBIMFQ/1D+0P6w/gD
Q/lD+kP8Q/6DB4gHgwjD/gGDCogLgxGID4MMiBWDBogQAIgfgAOIG4AFiBmABogZgAaIGYAF
iBqABIgagASIG4AEiBqABIgbgAOIEACICYADiBAAiAqAAogcgAKIHYABiB2AAYgdgAGIHgCI
HgCIHYACiBBDAoEeQwdDAoEdQw1DCEMDgRxDE0MOQwlDBIEbQxpDFEMPQwpDBUMAgRZDAEMC
QwRDIEMaQxVDEEMLQwZDAYETQwFDA0MFQwhDCkMmQyFDG0MWQxFDDEMIQwRDAIEOQwBDAkME
QwdDCUMLQw5DEEMsQydDIkMdQxhDEkMORgpGB0MEQwGBCUMAQwFDA0MFQwhDCkMMQw9DEUMT
QxVDM0MtQyhDI0MeQxlDFUYRRg1DCkMHQwVDA0MCQwHDAAHDAQFDAkMEQwVDB0MJQwxDDkMQ
QxJDFUMXQxlDG0M5QzRDL0MqQyVDH0MbRhdGFEMRQw5DDEMKQwjDBwNDCEMJQwpDDEMOQxBD
EkMUQxZDGUMbQx1DH0MhQ0BDO0M2QzFDLEMmQyJGHkYbQxhDFUMTQxFDD8MOAUMNww4BQw9D
EEMSQxRDFkMYQxpDHEMfQyFDI0MlQydDR0NBQzxDN0MzQy1DKUYlRiJDHkMcQxlDGEMWQxXD
FAJDFUMWQxdDGUMaQxxDHkMgQyNDJUMnQylDK0MtQ01DSENDQz5DOUM0QzBGLEYpQyVDI0Mg
Qx5DHUMcwxsCwxwBQx1DH0MhQyNDJUMnQylDK0MtQy9DMUMzQ1RDT0NKQ0VDQEM7QzdGM0Yw
QyxDKkMnQyVDJEMjwyIDQyNDJEMlQydDKUMrQy1DL0MxQzNDNUM3QzlDW0NWQ1FDTENHQ0JD
PkY6RjZDM0MxQy5DLEMqwykBwygBwykBQypDLEMtQy9DMUMzQzVDN0M5QztDPUM/Q2FDXENX
Q1JDTkNJQ0RDQUM9QzpDN0M1QzNDMUMwwy8DwzABQzJDM0M1QzZDOEM6QzxDPkNAQ0JDRENn
Q2JDXUNZQ1RDT0NLQ0dDRENBQz5DPEM6QzjDNgHDNQLDNgFDOEM5QzpDPEM+Q0BDQUNDQ0VD
R0NJQ2xDaENjQ19DWkNVQ1FDTUNKQ0dDRENCQ0BDPsM8AcM7A0M8Qz1DPkM/Q0FDQ0NEQ0ZD
SENKQ0xDTkNyQ21DaUNkQ2BDW0NXQ1NDUENNQ0pDSENGQ0RDQsNBAcNAAkNBQ0JDQ0NEQ0ZD
R0NJQ0tDTENOQ1BDUkN2Q3JDbkNpQ2VDYENcQ1lDVkNSQ1BDTUNLQ0lDSMNGAcNFAsNGAUNH
Q0hDSkNLQ01DTkNQQ1JDVENWQ3tDdkNyQ25DakNlQ2FDXkNaQ1dDVUNSQ1BDTkNMQ0vDSgHD
SQHDSgFDS0NMQ01DT0NQQ1JDU0NVQ1dDWEN+Q3pDdkNyQ25DaUNmQ2JDX0NcQ1lDV0NUQ1JD
UENPQ07DTQPDTgFDT0NQQ1FDU0NUQ1ZDV0NZQ1tDgUN9Q3lDdUNxQ21DaUNmQ2NDYENdQ1pD
WENWQ1RDU8NRAcNQA8NRAUNSQ1NDVUNWQ1dDWUNbQ1xDg0N/Q3tDeEN0Q3BDbENpQ2ZDY0Ng
Q11DW0NZQ1dDVUNUQ1PDUgRDU0NUQ1VDVkNXQ1hDWkNcQ11DhEOBQ31DeUN2Q3JDbkNrQ2hD
ZUNiQ2BDXUNbQ1lDV0NWQ1VDVMNTA8NUAUNVQ1ZDV0NYQ1pDXENdQ4VDgUN+Q3pDd0NzQ3BD
bUNqQ2dDZENhQ19DXENaQ1hDV0NWQ1VDVMNTA0NUw1UBQ1dDWENZQ1tDXEOEQ4FDfkN7Q3dD
dENwQ21DakNnQ2VDYkNgQ11DW0NZQ1dDVkNVQ1TDUwHDUgHDUwFDVENVQ1ZDV0NZQ1tDg0OA
Q31DekN3Q3NDcENtQ2pDZ0NlQ2JDX0NdQ1pDWENXQ1VDVENTQ1LDUQRDUkNTQ1RDVUNWQ1hD
gUN+Q3tDeEN2Q3JDb0NsQ2lDZkNkQ2FDXkNbQ1lDV0NVQ1NDUkNRQ1BDT8NOA8NPAUNQQ1FD
U0NUQ35DfEN5Q3ZDc0NwQ21DakNoQ2VDYkNfQ11DWkNXQ1VDU0NRQ09DTkNNQ0zDSwFDSsNL
AkNMQ01DT0NQQ3tDeEN2Q3NDcENtQ2tDaENlQ2JDX0NdQ1pDV0NUQ1JDUENOQ0xDSkNJQ0hD
R8NGA8NHAUNIQ0pDS0N2Q3RDcUNvQ21DakNnQ2RDYkNfQ1xDWUNXQ1NDUUNOQ0xDSkNIQ0ZD
RENDQ0LDQQFDQMNBAcNCAUNEQ0WB/4H/gf+B/4H/gf+B/4H/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/AP//AP//AP//Af/5gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//
j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//
j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//
j/8AAP8AAP8AAP8AAfmIEQCIjACIHgCIF0jmgAQIAIgYgAaIGIAGiBiABogYgAaIGYAEiBuA
A4gcgAKIHgCIpYACiBmABYgZSAiABYgZgAWIGYAFiBmABogXgAeIFIAHiBeABIgagAOIG4AC
iByAAYj/iBiABIgagASIGoAEiBqABIgagASIG4ADiByAAogeAIilgAKIGYAFiBmABYgZgAaI
GIAGiBeAB4gVgAqIFIAGiBiAA4gbgAKIHIABiB2AAYj/iBmAA4gbgAOIG4ADiBuAA4gbgAOI
G4ADiByAAogeAIimgAGIG4ADiBmABYgZgAaIF4AHiBWACYgVgAqIFIAGiBiAA4gbgAKIHIAB
iB0AiP+IO4ACiB2AAYgdgAGIHYABiB2AAYgdgAGIHgCIpgCIHIADiBiABogYgAeIFUg+gAiI
FYAJiBWACYgVgAaIGIADiBuAAYgdAIgeAIj/iD0AiB4AiB4AiB4AiB4AiB4AiB4AiMSAA4gZ
gAWIF4AHiBaACYgVgAmIFYAJiBWACYgVgAOIG4ABiB0AiB4AiP+I/4jDgAOIGoAEiBeAB4gW
gAmIFYAJiBWACYgVgAmIFYAEiBqAAogcgAGIHQCI/4j/iMSAAogagASIFgAIgAeIFYAJiBWA
CYgVgAmIFYAJiBWAB4gXgAOIG4ABiB0AiP+I/4jjgAOIGYAGiBWACYgVgAmIFYAJiBWACYgV
gAiIFoAFiBmAA4gbgAGI/4j/iOKAA4gagAWIF4AHiBWACYgVgAmIFYAJiBWACIgWgAiIFoAF
iBmAA4j/iP+I5ACIGYAFiBiABogVgAmIFYAJiBWACYgVgAiIFoAIiBaACIgWgAeIF0OJQ4dD
hEOCQ39DfUN6Q3hDdkN0Q3JDcENvQ21Da0NpQ2hDZkNkQ2NDYkNhw2ABQ2FDY0NlQ2hDbUNx
Q3dDf0OKQ4hDhUODQ4FDfkN8Q3pDeEN2Q3RDckNwQ25DbENqQ2hDZ0NlQ2NDYsNgA0NiQ2RD
Z0NrQ29DdUN8Q4tDiUOHQ4VDg0OBQ35DfEN6Q3hDdkN0Q3JDcENuQ2xDakNoQ2ZDZENiQ2HD
YAJDYUNjQ2ZDakNuQ3NDe0ONQ4tDiUOIQ4ZDhEOBQ39DfkN8Q3pDeEN1Q3NDcUNvQ21DakNo
Q2ZDZENiw2ECQ2JDZENmQ2pDbkNzQ3pDkEOOQ41Di0OJQ4hDhUOEQ4JDgEN+Q3xDeUN3Q3VD
ckNwQ21Da0NpQ2dDZUNjw2IBQ2NDZUNnQ2pDbkNzQ3lDk0OSQ5FDj0OOQ4xDikOIQ4dDhUOD
Q4BDfkN8Q3lDd0N0Q3FDb0NsQ2pDaENmw2UCQ2dDaUNsQ29DdEN6Q5hDl0OVQ5RDk0ORQ5BD
jkOMQ4pDiEOGQ4RDgUN+Q3xDeUN2Q3NDcUNuQ2xDakNpw2gBQ2lDa0NuQ3FDdUN7w5wBQ5tD
mkOZQ5dDlkOUQ5JDkUOPQ4xDikOHQ4RDgUN/Q3xDeUN2Q3NDcENuQ23DbAFDbUNuQ3FDdEN3
Q31DosOhAUOgQ59DnkOdQ5tDmUOYQ5ZDk0ORQ45Di0OIQ4VDgkN/Q3tDeEN2Q3RDckNxQ3BD
cUNyQ3RDd0N6Q4DDpwNDpkOlQ6RDo0OhQ59DnUObQ5hDlkOSQ49DjEOJQ4VDgkN/Q3xDeUN3
Q3ZDdUN2Q3dDeEN7Q35Dg8OuA8OtAUOsQ6pDqUOnQ6VDo0OgQ55DmkOXQ5NDkEOMQ4lDhkOC
Q4BDfUN8w3sBQ3xDfUN/Q4JDh0O0w7UEQ7RDs0OxQ7BDrkOrQ6lDpkOiQ59Dm0OYQ5RDkEON
Q4pDh0OEQ4LDgQJDg0OEQ4dDi0O7Q7zDvQNDvEO7Q7pDuUO3Q7RDskOvQ6tDp0OkQ6BDnEOY
Q5VDkUOOQ4tDiUOIQ4fDiAFDikOMQ5BDwkPDQ8TDxQFDxkPFQ8RDw0PCQ8BDvUO7Q7hDtEOw
Q6xDqUOkQ6BDnUOZQ5ZDk0ORQ4/DjgFDj0OQQ5JDlUPKQ8tDzEPNw84CQ81DzEPLQ8lDx0PE
Q8FDvUO5Q7VDsUOtQ6lDpUOhQ55DmkOYQ5fDlQJDlkOYQ5tD0UPTQ9TD1gHD1wHD1gFD1EPS
Q9BDzUPKQ8ZDwkO+Q7pDtkOyQ61DqkOmQ6JDoEOeQ53DnAFDnUOeQ6FD2EPaQ9xD3kPfw+AB
w98BQ91D3EPZQ9dD1EPPQ8xDx0PDQ79DukO2Q7JDrkOrQ6hDpsOkAUOjQ6RDpUOnQ99D4kPk
Q+ZD50PoQ+nD6AFD50PlQ+ND4EPdQ9lD1UPQQ8xDx0PDQ79DukO3Q7NDsEOuQ6xDq0Oqw6sB
Q61D50PpQ+xD7kPvw/EDQ+9D7kPsQ+lD5kPhQ91D2UPVQ9BDzEPHQ8NDv0O7Q7hDtUO0w7IB
Q7FDskOzQ+1D8EPzQ/ZD98P5AUP6Q/lD+EP3Q/RD8kPvQ+pD5kPiQ91D2UPUQ89Dy0PHQ8ND
wEO9Q7tDukO5Q7hDuUO6Q/RD90P6Q/2DBkP9Q/pD90PzQ+9D6kPmQ+FD3EPXQ9NDz0PLQ8dD
xUPCQ8FDwMO/AUPAQ/pD/oMLQ/tD90PyQ+1D6UPkQ99D20PXQ9JDz0PMQ8pDyEPHw8YCgw5D
/kP6Q/VD8EPrQ+dD4kPeQ9lD1kPTQ9BDz0PNw8wCgwQIgAMIgwVD/EP3Q/JD7kPpQ+VD4EPd
Q9pD10PVQ9PD0gKDAoAGiAKDBEP+Q/lD9EPwQ+tD50PjQ+BD3UPbQ9rD2AFD14MBgAeIBIME
Q/tD9kPyQ+1D6UPmQ+ND4UPfQ97D3QEDgAiIBYMEQ/xD+EPzQ+9D7EPpQ+dD5UPjw+IBgAmI
B4MDQ/1D+UP1Q/JD70PsQ+pD6UPoQ+eACIgJgwND/kP6Q/dD9EPyQ/BD7kPtQ+yACIgKgwRD
/UP6Q/dD9UPzQ/JD8YAIiAuDBUP9Q/pD+EP3Q/aACIgMgwZD/kP8Q/uB/4H/gYNDAEMCQwPD
BAFDA0MCQwCBFUMCQwVDB0MJwwsDQwlDCEMFQwKBEUMBQwVDCEMLQw5DEMMSA0MRQw9DDUMK
QwZDAoEPQwZDCkMOQxFDFEMWQxjDGQJDGEMWQxRDEUMNQwlDBUMAgQ1DC0MPQxNDF0MaQxxD
HsMfAkMeQx1DGkMXQxNDEEMLQwdDAoEMQxBDFEMYQxxDH0MiQyTDJQJDJEMjQyBDHkMaQxZD
EkMNQwlDBEMAgQpDFEMZQx1DIUMkQydDKUMqwysBQypDKEMmQyRDIEMcQxdDE0MOQwpDBUMB
gQlDGEMdQyJDJkMpQyxDLsMwAkMvQy5DLEMpQyVDIUMdQxlDFEMPQwtDB0MCgQhDHEMhQyZD
KkMuQzFDM8M1A0MzQzFDL0MrQydDI0MeQxpDFUMQQwxDCEMDQwCBBkMgQyVDKkMvQzJDNUM4
QzrDOwFDOkM5QzdDNEMwQyxDKEMkQx9DGkMWQxFDDUMJQwVDAkMAgQRDJEMpQy9DM0M3QzpD
PUM/w0ABQz9DPkM8QzlDNkMyQy5DKUMlQyBDG0MXQxNDDkMLQwdDBUMCQwCBAkMoQy5DM0M4
QzxDP0NCQ0TDRQJDRENCQz9DO0M4QzNDL0MqQyZDIUMdQxlDFEMQQw1DCkMIQwVDBEMCQwGB
/4H/gf+B/4H/gf+B/4H/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/AAAA
AAAAAAAAAAABgAGIHIACiBqABIgZgASIGYAFiBiABogYgAaIGIAGiBiABogYgAQISAkAiGmA
AYgdgAKI/4j/iECAEIgdgAGIG4ADiBqABIgZgAWIGYAFiBmABYgZgAWIGYAFiIqAAYgcgAOI
HgBIu4j/iP+IAYANiBCAD4gdAIgcgAKIG4ADiBuAA4gbgAOIG4ADiBuAA4gbgAOIi4ABiByA
AogdgAKI/4jjgAyIEIAOiBCADYgfAIgdgAGIHYABiB2AAYgdgAGIHYABiB2AAYirAIgdgAKI
G4ADiP+IxIAMiBCADogQgA2IEoALiEAAiB4AiB4AiB4AiB4AiB4AiKsAiB2AAYgcgAOIHYAB
iP+IZ4ADiBeADYgPgA+IEIAOiBGAC4gTgAqI/4iNSPsAiB2AAYgcgAKIG4AEiP+IRIAJiBOA
DogPgA+IEIAOiBCADYgSgAuIE4AKiP+IjQCIHYACiBuAA4gagASIHYACiP+IAoADiAOABYgQ
gA+ID4APiA+AD4gQgA6IEIANiBKACogUgAWIBwCI/4hpAIgdgAGIHIACiBuABIgZgAWIFoAI
iB6AAYhhAIgegAGIHYACiByAA4gHgAOIDoAQiA6AEIgPgA+ID4APiBCADogQgA2IEoADiBuA
AYgLgAKIHIABiB0AiB4AiOgAiB4AiB2AAogbgAOIGoAEiBaACYgUgAqIE4ABiAaAAogegAGI
HgCIHwBIvIgdgAOIG4AEiBqABogGgAOIDYARiA6AEIgOgBCID4APiA+AB4gFgAGIEIADiBuA
AogrgAWIGYADiBuAAogcgAKIHIABiB2AAYgdgAGIHYABiB2AAYgdgAKIBQCIFYACiASAAogV
gAKIAoADiBaACIgWgAiIFYAKiBOAC4gTgAuIE4ACiASABIgcgAKIHYACiB2AAogBAIgZgAaI
GYAGiBmABogGgAOIDYARiA6AEIgOgBCIDoAGiBmAA4gbgAKIHQCILYAIiA6DB4AHiBCDBoAH
SFOIEoMDgAdInIgVA4AIiBaACIgWgAiIFoAIiBaACYgVgAmIFYAJiBWACogUgAqIFIAKiBSA
CogUgAuIE4ALiBOAA0gDgAaIHIADiByAAogdgAaIGIAHiBiAB4gYgAiIBYADiA2AEYgNgAeI
F4AFiBqAA4gbgAKIHQCITkMtQzNDOEM9Q0FDRUNIQ0rDSwJDSkNIQ0VDQUM+QzlDNUMwQyxD
J0MjQx9DGkMWQxNDEEMOQwtDCUMIQwZDMkM4Qz5DQkNHQ0pDTkNQw1ECQ1BDTkNLQ0hDRENA
QztDN0MyQy5DKUMlQyBDHUMZQxZDFEMRQw9DDkMMQzdDPkNDQ0hDTUNQQ1RDVkNXQ1hDV0NW
Q1RDUkNOQ0tDRkNCQz1DOUM0QzBDLEMnQyRDIEMdQxpDGEMWQxRDEkM9Q0NDSUNOQ1NDV0Na
Q1zDXgJDXUNbQ1lDVUNRQ01DSUNEQ0BDO0M3QzNDLkMrQydDJEMhQx9DHEMbQxhDQ0NKQ1BD
VUNZQ11DYUNjQ2TDZQFDZENiQ2BDXENYQ1RDUENMQ0dDQ0M+QzpDNkMyQy9DK0MpQyZDJEMi
Qx9DSkNQQ1ZDXENgQ2RDaENqQ2vDbAFDa0NpQ2dDY0NgQ1xDV0NTQ09DSkNGQ0JDPUM6QzZD
M0MwQy1DK0MpQydDUUNXQ11DY0NnQ2tDb0Nxw3MCQ3JDcUNuQ2tDZ0NjQ19DW0NWQ1JDTkNK
Q0VDQUM+QztDOEM1QzNDMEMuQ1hDXkNkQ2pDbkNyQ3ZDeMN6AkN5Q3hDdkNyQ29Da0NnQ2JD
XkNaQ1ZDUUNNQ0lDRkNDQ0BDPUM7QzhDNkNfQ2ZDbENxQ3ZDekN9Q39DgcOCAUOBQ39DfUN5
Q3ZDckNuQ2pDZkNhQ11DWUNVQ1FDTkNLQ0hDRUNDQ0BDPkNnQ21Dc0N4Q31DgUOEQ4dDiMOJ
AUOIQ4ZDhEOBQ31DekN2Q3JDbUNpQ2VDYUNdQ1lDVkNTQ1BDTUNLQ0hDRkNuQ3VDekOAQ4RD
iEOLQ45Dj8OQAUOPQ41Di0OIQ4VDgUN9Q3lDdUNxQ21DaUNlQ2FDXkNbQ1hDVUNTQ1BDTUN2
Q3xDgkOHQ4tDj0OSQ5TDlgNDlEOSQ49DjEOIQ4RDgEN8Q3hDdENxQ2xDaUNmQ2NDYENdQ1pD
WENVQ31Dg0OJQ45DkkOVQ5lDm0Ocw50BQ5xDmkOYQ5VDkkOPQ4tDh0ODQ39DfEN4Q3RDcENt
Q2pDZ0NlQ2JDYENdQ4RDikOPQ5RDmEOcQ59DoUOiw6MBQ6JDoEOeQ5tDmEOVQ5FDjkOKQ4ZD
gkN/Q3tDeEN1Q3JDb0NsQ2pDZ0NkQ4tDkUOWQ5pDnkOiQ6VDp8OoAkOnQ6ZDpEOhQ55Dm0OX
Q5RDkEOMQ4lDhUOBQ35De0N4Q3ZDc0NxQ25DbEORQ5dDnEOgQ6RDp0OqQ6zDrQJDrEOrQ6lD
pkOjQ6BDnEOZQ5VDkkOPQ4tDiEOFQ4JDf0N8Q3pDd0N1Q3JDl0OdQ6FDpUOpQ6xDr0OwQ7FD
skOxQ7BDr0OtQ6pDqEOkQ6FDnkOaQ5dDlEORQ41DikOHQ4VDgkOAQ35De0N5Q51DokOmQ6pD
rkOwQ7NDtMO1AkO0Q7NDsUOuQ6tDqEOlQ6JDn0OcQ5hDlUOSQ49DjUOKQ4hDhUODQ4FDfkOi
Q6dDq0OuQ7FDtEO2Q7fDuAJDt0O1Q7RDsUOuQ6xDqUOlQ6JDn0OcQ5lDlkOUQ5FDj0OMQ4pD
iEOGQ4RDpkOrQ65DskO1Q7dDucO6A0O5Q7hDtkOzQ7FDrkOrQ6hDpUOiQ59DnUOaQ5dDlUOT
Q5BDjkOMQ4tDiEOqQ65DskO1Q7dDuUO7w7wCQ7tDukO5Q7dDtUOyQ7BDrUOqQ6dDpEOiQ59D
nEOaQ5hDlkOUQ5JDkEOOQ4xDrUOxQ7RDt0O5Q7pDvMO9AkO8Q7tDuUO4Q7VDs0OwQ65Dq0Oo
Q6ZDo0OhQ55DnEOaQ5hDlkOVQ5NDkUOPQ69Ds0O1Q7hDukO7Q7zDvQHDvAFDu0O5Q7dDtUOz
Q7BDrkOrQ6lDpkOkQ6JDn0OdQ5tDmkOYQ5dDlUOUQ5JDsUO0Q7ZDuEO6Q7vDvALDuwFDuUO4
Q7ZDtEOyQ7BDrUOrQ6lDpkOkQ6JDoEOeQ5xDmkOZQ5hDlkOVQ5RDskO0Q7ZDuEO5Q7rDuwHD
ugFDuUO4Q7ZDtEOyQ7BDrkOsQ6pDp0OlQ6NDoUOfQ51DnEOaQ5lDmEOXQ5ZDlUOyQ7RDtkO3
Q7jDuQJDuEO3Q7ZDtUOzQ7JDsEOuQ6xDqkOnQ6VDo0OhQ6BDnkOcQ5tDmkOZQ5hDl0OWQ5VD
sUOzQ7RDtcO2A0O1Q7RDs0OxQ7BDrkOsQ6pDqEOmQ6VDo0OhQ59DnUOcQ5pDmUOYw5cBQ5bD
lQFDsEOxQ7LDswNDskOxQ7BDr0OtQ6xDqkOoQ6ZDpUOjQ6FDn0OdQ5xDmkOZQ5hDl0OWw5UB
w5QCQ67DrwHDsAHDrwFDrkOtQ6xDqkOpQ6dDpUOjQ6JDoEOeQ51Dm0OZQ5hDl0OVQ5TDkwHD
kgRDq8OsA0OrQ6pDqUOoQ6ZDpUOjQ6JDoEOeQ51Dm0OZQ5hDlkOVQ5NDkkORw5ABw48EQ5DD
qANDp0OmQ6VDpEOiQ6FDn0OeQ5xDmkOYQ5dDlUOUQ5JDkUOQQ45DjcOMAcOLA8OMAUONw6QC
Q6NDokOhQ59DnkOcQ5tDmUOXQ5ZDlEOSQ5FDj0OOQ41Di0OKQ4lDiMOHAcOGAcOHAcOIAUOJ
gf+B/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAA
AAAAAAAAAAAAAYgQgA6IEIAPiBCADogRgA2IEoAKSFUAiBSACAgAiBWABwgAiP+I7QCIHYAB
iB6AAYjjSDmAAogYgAyIEoAMiBOACogVgAmIF4AHiBiABoj/iP+IL4ABiB4AiOMAiByAC4gU
gAqIFYAIiBeAB4gYgAaI/4j/iE+AAYgegAGI/4gCgAmIFoAIiBeAB4gYgAOI/4j/iHKAAYge
AIgfAIjigAmIFoAHiBiAAYj/iP+IlIABiB8AiOIAiB+ACIgXgAGI/4j/iJRIxgCIHoABiP+I
JIABiP+I/4i0gAKIHgCI/4gDAIj/iP+ItIADiB6AAYgfAIjiAIgegAGI/4j/iI+AB4gcgAOI
HoABiP+IAwCIHoABiP+I/4htgAeIF4AIiB2AAogfAIj/iAQAiB6AAYj/iP+IT4ADiBmABogG
gwuIBYAHiAKDEIgKAIMUiAeDGIgDgw3D/gHD/QSDBwiDD8P5A0P4w/kBQ/pD/EP+gwQIgwZD
/kP9Q/uDBcP1AsP0AcP1AUP3Q/hD+kP9gwhD/kP8Q/pD+UP3Q/aDBcPxBUPyQ/ND9UP3Q/pD
/YMDw/sBQ/pD+UP3Q/ZD9UPzQ/JD8YMFw+0EQ+5D70PwQ/JD9EP3Q/tD/oMCw/QBQ/ND8kPx
Q/BD70PuQ+3D7AGDA8PqBUPrQ+xD7kPwQ/JD9UP4Q/yDAsPtAsPsAUPrQ+rD6QFD6MPnAsPm
AsPnAsPoAUPpQ+pD7EPuQ/BD80P3Q/uDAsPnAsPmAsPlAcPkAsPjA8PkAsPlAUPmQ+dD6EPq
Q+xD70PyQ/ZD+kP+gwFD4MPhBcPgBcPhAkPiw+MBQ+RD5UPmQ+dD6UPsQ+5D8UP1Q/lD/oMB
Q6DDnwFDnkOcQ5tDmUOYQ5ZDlEOSQ5FDj0ONQ4xDikOJQ4hDhkOFQ4RDg0OCw4EDw4IBQ4ND
hEOFQ5tDmkOZQ5hDl0OVQ5NDkUOPQ41DjEOKQ4hDh0OFQ4NDgkOBQ4BDf0N+Q31DfMN7AsN8
AUN9Q35Df0OBQ5ZDlUOUQ5JDkEOPQ4xDikOIQ4dDhUODQ4FDf0N+Q3xDe0N6Q3lDeEN3Q3bD
dQNDdkN3Q3hDeUN6Q3xDkEOPQ45DjEOKQ4hDhkOEQ4FDf0N9Q3xDekN4Q3ZDdUN0Q3NDckNx
Q3DDbwRDcENxQ3JDc0N1Q3dDi0OJQ4dDhkOEQ4FDf0N9Q3pDeEN2Q3RDc0NxQ29DbkNtQ2xD
a0Nqw2kBw2gCQ2lDakNrQ2xDbkNwQ3JDhUODQ4FDf0N9Q3tDeEN2Q3NDcUNvQ21Da0NqQ2hD
Z0NmQ2VDZENjw2IBw2EBw2IBQ2NDZENmQ2hDakNtQ39DfUN7Q3lDdkN0Q3FDb0NsQ2pDaENm
Q2RDY0NhQ2BDX0NeQ11DXMNbBENcQ11DXkNgQ2JDZENnQ3lDd0N1Q3JDcENtQ2pDaENlQ2ND
YUNfQ11DXENaQ1lDWENXQ1bDVQHDVALDVQFDV0NYQ1pDXENfQ2JDckNwQ25DbENpQ2dDZENh
Q19DXENaQ1hDVkNVQ1NDUkNRQ1DDTwHDTgFDTcNOAUNPQ1BDUkNUQ1ZDWUNdQ2xDakNoQ2ZD
Y0NgQ11DW0NYQ1ZDVENSQ1BDTkNNQ0vDSgFDScNIAcNHAkNIQ0lDSkNMQ05DUUNUQ1dDZkNk
Q2JDYENdQ1pDV0NVQ1JDUENNQ0tDSkNIQ0ZDRUNEw0MBQ0LDQQNDQkNDQ0VDRkNJQ0tDTkNS
Q2FDXkNcQ1pDV0NUQ1FDT0NMQ0pDR0NFQ0RDQkNAQz9DPsM9AUM8wzsDQzxDPUM/Q0FDQ0NG
Q0lDTUNbQ1lDVkNUQ1FDT0NLQ0lDRkNEQ0JDQEM+QzxDO0M5wzgBRjfGNgFGNUM1wzYBQzhD
OUM7Qz5DQUNEQ0hDVUNTQ1FDTkNMQ0lDRkNDQ0FDPkM8QzpDOEM3QzVDNEMzRjLGMQHGMAJD
MEMxQzJDNEM2QzlDO0M/Q0NDT0NNQ0tDSUNGQ0NDQEM+QztDOUM3QzRDM0MxQy9DLsMtAUYs
xisBxioBQytDLEMtQy9DMUMzQzZDOkM+Q0pDSENFQ0NDQEM+QztDOEM2QzNDMUMvQy1DLEMq
QylDKEMnxiYBxiUCQyVDJkMoQylDLEMuQzFDNUM5Q0RDQkNAQz1DO0M4QzVDM0MwQy5DLEMq
QyhDJkMlwyMBQyJDIcYgAcYfAUMgQyFDIkMkQyZDKUMsQzBDNUM+QzxDOkM4QzVDM0MvQy1D
KkMoQyZDJEMiQyFDH0MeQx3DHAFDG8YaAUMaQxtDHEMdQx9DIUMkQydDK0MwRltDNkM0QzJD
L0MtQypDJ0MlQyNDIEMeQx1DG0MaQxlDGEMXwxYBwxUDQxZDGEMaQxxDH0MiQyZDK0bHRpRG
ZEMsQylDJ0MkQyJDH0MdQxtDGUMXQxZDFEMTwxIBQxHDEAFDD8MQAUMRQxNDFUMXQxpDHkMh
QydG/EbxRtJGn0ZnRiFDHkMcQxlDF0MVQxNDEkMQQw9DDkMNwwwBwwsBwwoBQwtDDEMOQxBD
EkMWQxlDHUMiRtBG8Eb8RvNG1EabRk9DFkMUQxJDEEMOQwxDC0MKQwlDCMMHAcMGAUMFwwYB
QwdDCUMLQw5DEUMVQxlDHkbsRtxGyEbqRvlG60bDRoNGMUMMQwpDCUMHQwbDBAFDA8MCAcMB
A0MCQwNDBUMHQwpDDUMQQxVDGkbzRvhG8kb3RvhG90b4Rt5GpEaORn5GSkMhQy1DD4EJQwBD
A0MFQwlDDUMRQxZG5Ub5RvtG/Eb7RudG/Eb5RvNG6kbZgQ9DAkMFQwlDDUMTRrZGv0bDRsVG
xka9RupG94ETQwJDBkMKQxBG7kbeRslGmoEXQwBDA0MIQw2BHEMBQwVDC4EdQwNDCYEdRj5D
CIEdRsFGjIEdRvVG6YH/gf+BPwaBHoYCgRyGBIEahgaBGIYHgReGCoEUhgyBEoYOgRCGEoEM
hhaBCIYagQSGHYEBhj+B/4H/gT9G+Ub3gR2GAUbpRsyBG4YDRttGpoEZhgVGtYEYhgZG0UaF
gRaGCEbcRtNGhoEThgtG3UabgRGGDUbtRs9Gm4EOhhBG1EbERnxGO4EKhhRGqkaKRioAgQaG
F0b5RpxGkEaNRr6BAoYcRu4GAYY/gP+A/4AfRpFGH4AdhgFGiUYvgBuGA0Y5gBqGBEaTgBmG
BUbZgBiGB0akRgyAFYYJRu5GrYAThgxGsoARhg1G3EaoRkqADoYDxvwBhgpGikZSRgSAC4YT
RrtGKYAJhhVG9kbcRptGJoABRk1Ga0Y6AIYeRuyGP4D/gP+AH0YigB5G5EZpRhKAHEb2Ru5G
ukYugBuGAkbqRq5GEIAZhgVGbYAYhgZGxEZOgBaGCEbkRqFGGIATRqBGsUbHRsVG0UbfRupG
/IYBRvxG9kargBJGLkY+RkNGOUY+Rk9GdUacRqlGu0bIRtdG3UbQRkWAEEZdRlRGPIADRidG
NEZCRj9GXkaNRrNGvUafRh6ADkbaRtFGu0aXRmlGPEY0RjpGMkYZgAFGCkZGRqJGzUbSRsJG
jkYLgAuGA0b6RulG3EbJRq5GiUZDRhhGEkZIRqFG2UbuRvRG80bURq1GdUY2gAiGCEb1RtxG
okaRRrJG1kbyhgZG4kagRl9GOkYhRjZGc0ZBRiqGDEb8RvWGCUb8RvJG0EbRRuFG6EbnhhdG
5UbTRttG2UbWRttG50bwgP+A/4CgRjNGX0YwRixGKYAZRixGc0ZxRnBGbUZiRkVGD4AYRhBG
M0YuRj1GTUZTRlRGP0YOgJVGeUY0RgqAHEbTRs1Gwka1RqdGmUZ2Rj1GBoAJRglGFkYXRgSA
CEaORshG0kbjRvFG9EbpRsdGtkaoRnKABMZhAUZuRoRGj0aYRodGRIAHRhpGbEarRvJG70bj
RvsGRvdG3Ua3RqVGlEaBRoNGlkaGRqpGrEa4RqhGsEZugP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gAgAAAAAAAAA
AAAAAAGAA4gRgAgIgAWID4AQiA6ACEhXgAiIC4AJSC+ACYgKgAqIAoAHiAmAA4gMgAWIG4AD
iByAA4gcgAKIHYABiB2AAYgeAIj/iDIAiB4AiB6AAYgdgAKIHIACiByAA4gbgAOIG4ADiBuA
A4gVgAQIgAOIFYAFiBSABIgFgAOID4AJiAGABYgNgAmIAYAHiAuACYgFgASICoAGiAEAiAiA
AogJgAGIEYACiB2AAogdgAKIHIACiB2AAYgeAIgeAIj/iDIAiB6AAYgdgAKIHIACiByAA4gb
gAOIG4ADiBuABIgagASIFkjTgAEIgASIFYAEiBOAAYgdgAiIAoADiA6ACYgHAIgMgAmICQCI
CoACiBGAAYgIgAGIE4ABiAcAiBWAAYgdgAKIHYABiB2AAYgeAIgeAIj/iFOAAYgcgAKIHIAD
iBuAA4gbgASIGoAEiBqABIgagASIGoAEiBWABIgSgAGIHYAEiBmACYgVgAWIGYACiBuAAogV
AIgFgAGIFwCIBIABiBeAAYgEAIgXgAGIHgCIHgCI/4h0AIgdgAKIHIACiByAA4gagASIGoAE
iBqABIgagAWIGYAFiCuAAYgdgASIGoAJiBSABYgZgAOIGoADiBuAAogXAIgCgAOIF4AHiBiA
BogYgAKIAYABiBkAiB4AiB4AiP+IVACIHYACiByAAogcgAKIG4AEiBqABIgagASIGoAEiCqA
AogcgASIGoAJiBSABYgZgASIGYAEiBmABIgYgAaIGIAGiBiABogZgAWIGYAFiBmABogYgAGI
/4h0AIgdgAKIHIACiByAAogcgAKIG0hEgAKIG4ADiCqAAogbgAWIGYAJiBSABogYgAWIGIAF
iBiABogXgAaIGIAGiBmABYgZgAWIGYAFiBmABogZgAWIGYABiB0AiP+IVIABiB2AAYgdgAKI
HIACiByAAogcgAKIKIADiBuABogXgAmIFYAHiBaABogXgAaIGIAGiBiABogYgAWIGYAFiBmA
BYgZgAVIe4gYgAaIGYAFiBmABIgagASIG4ABiB0AiP+IE0j+SP1I/ogcSP6AAYgdgAGIHYAB
iB2AAYgdgAGIFYACiA+AA4gagAiIFoAIiBWACYgUgAiIFoAHiBeABogYgAaIF0j+gAaIF0j+
gAaIF0j+gAaIGEj+gAWIGYAFiBmABYgZgASIGoAEiBqABIgbgAOIG4ABiP+IE0j+SPxI/ogc
SP0ASP6IHYABiB2AAYgWAIgFgAGIEoAEiA6ABYgZgAiIFYAIiBaACIgWgAiIFoAHiBZI/oAG
iBdI/oAFiBhI/YAFiBhI/YAFiBhI/IAFiBhI/oAFiBhI/oAFiBhI/oAFiBmABIgagASIGoAE
iBqABIgbgAOIG4ADiBwAiLVI/YgdSP0ASP2IHEj8AEj+iBxI/QCIFYABiAYAiBOAA4gGAIgR
gAVD2sPbAcPcA8PdA8PeAkPfw+ABQ+FD4kPjQ+RD5UPnQ+lD60PuQ/FD9UP5Q/6DAUPTQ9RD
1UPWQ9dD2MPZAcPaAcPbAUPcQ93D3gFD30PgQ+FD4kPjQ+VD5kPpQ+tD7kPyQ/ZD+kP+gwFD
ykPNw88CQ9FD00PUQ9ZD18PZAUPaQ9tD3UPeQ99D4EPhQ+JD5EPlQ+dD6kPsQ+9D80P3Q/uD
AkPBQ8JDxUPIQ8lDzEPOQ9FD0kPUQ9VD10PZQ9pD3EPdQ99D4EPhQ+ND5EPmQ+hD60PuQ/FD
9EP4Q/yDAkO4Q7pDvEO/Q8JDxUPKQ8xDz0PRQ9ND1UPYQ9pD3EPdQ99D4UPiQ+RD5UPnQ+pD
7EPvQ/ND9kP6Q/6DAkOsQ69DtUO4Q71DwEPEQ8hDzEPPQ9FD1EPXQ9lD3EPeQ+BD4kPjQ+VD
50PpQ+xD70PyQ/VD+UP9gwNDo0OmQ69DsUO3Q7tDv0PEQ8pDzkPRQ9RD1kPZQ9xD30PhQ+ND
5UPnQ+lD7EPuQ/FD9UP4Q/yDBEObQ55DpkOrQ7NDt0O7Q8BDx0PMQ9BD00PXQ9pD3UPhQ+ND
5UPnQ+pD7EPuQ/FD9UP4Q/uDBAhDlEOZQ6BDp0OuQ7RDukPAQ8RDzEPRQ9RD2EPbQ95D40Pl
Q+hD6kPtQ+9D8kP0Q/hD+4MFCEOOQ5VDm0OjQ6xDskO4Q75DxUPMQ9JD1UPZQ9xD4EPlQ+hD
60PtQ/BD8kP1Q/hD/IMFiAFDikOTQ5hDokOrQ7JDuEO+Q8VDzUPSQ9dD20PfQ+JD50PrQ+5D
8UPzQ/ZD+UP8gwWIAkOHQ5JDmEOgQ6tDskO6Q79DxkPPQ9VD2UPdQ+FD5UPqQ+5D8UP0Q/dD
+kP9gwWIA0ODQ49DmUOjQ61DtEO7Q8JDyUPQQ9dD3EPhQ+VD6UPvQ/JD9UP4Q/uDBYgFQ35D
iUOaQ6RDrUO0Q71Dw0PNQ9VD2kPfQ+ND6EPtQ/JD9kP5Q/yDBYgGQ3pDiUOXQ6ZDr0O2Q79D
x0POQ9ZD3UPiQ+dD60PxQ/ZD+UP9gwWIB0N3Q4pDmUOkQ7BDuUPCQ8lD0kPaQ+BD5UPrQ/BD
9kP6Q/2DBYgIQ3dDikOZQ6dDs0O7Q8ZDz0PWQ9xD4kPpQ+9D9EP5Q/2DBIgKQ3tDjkObQ6pD
t0O/Q8pD00PZQ+BD5kPsQ/JD+EP9gwSIC0N9Q5FDokOvQ71DxEPNQ9ZD3UPjQ+lD8EP2Q/uD
BIgMQ35DkkOmQ7RDv0PIQ9JD2UPhQ+dD7UPzQ/mDBACIDEOCQ5VDpEO2Q8RDzEPUQ9xD40Pq
Q/BD9kP8gwOAAogLQ4FDlEOmQ7ZDxEPOQ9dD3kPmQ+xD80P5gwSAAYgMQ4VDlUOkQ7dDxEPQ
Q9lD4UPoQ+9D9UP7gwOAAYgNQ4dDlkOnQ7hDxUPSQ9tD40PrQ/FD94MDiBBDjEObQ6pDu0PF
Q9RD30PmQ+1D9EP6gwOIEEOTQ6FDr0O9Q8hD1EPhQ+lD70P2Q/yDA4gQQ5tDp0O0Q8FDzEPV
Q+RD60PyQ/iDA4gPgAFDo0OuQ7pDxEPPQ9hD5kPqQ/ND+oMDiA+AAUOrQ7VDvkPJQ9ND3kPp
Q+5D9UP8gwOIDoACQ7NDukPGQ89D2EPhQ+tD70P3Q/yDA4gMgARDu0PDQ8pD00PaQ+RD7UPy
Q/hD/oMDiAqABkPCQ8lD0EPXQ99D50PuQ/ND+UP+gwOICoAGgR1G3UbsgR1Gv0bPgR1G9Ubv
gR1G+kb1gRxG+0bpRvCBHEbCRsZG9YEbRsFGaUasRvaBGkb0RvBGqUahRvSBGUb1RvxG+kbg
RuxG2YEYRqpG0kb6RuzG+AFG9YEXRvVG1EaoRu1G+UbkRvZG7IEVRu5G1sbvAUaZRuFG+Ea7
RuNG+oEURr5G6kbSRthG+ka7RtdG+UbURrRG64ESRqhGWEbRRvdGvEbARvlG0UbURvJGzEbZ
RvOBEUb5RvBGsUblRvJGoUajRvBG4kbjRvJG1kbdRvmBEEaPRtNG30b5RvVG6EafRpBG40bt
RvhG6EbxRs1G/IEPQwFGHEZsRrhG4Eb7RvpG80bvRuhG9kbiRtpG+0a6Ru6BDkMBQwVGCkYe
RqRG5kbzRtZG6UbwRvVG+0bTRtZG+0a+RtWBDUMBRh5GcUacRqlGxkb3RtZG00bORsFG0Ebw
RuFG8UbuRuBG6YEMRllGd0avRtFG6EbtRvJG9Ub7RvxG9UboRvfG+wFG/EbuRt1G5oEMRspG
10b4RvlG8EbbRulG5kbwRvpG+0boRu9G/EbtRt5G+EbVRoiBC0btRvlG8kbgRsRGrka3Ru5G
+UbtRttGz0brRvpG+0bURvlG3UaTQ0iBC0brRtNGrUZxRlNGQEa/RvJG9EbGRphG6UbzRuZG
7EbtRu5GpENJRnqBCka4RopGYkYlQxVDGUZMRsVG8kbrRsxGyUb1RtxG90boRvFGtkZeRqdG
5IEKRjVDAEMIQxJDF0McRlBGysbxAUbeRs1G6kbORvdG7UbcRnVGoUbyRvWBCYABQwFDCkMU
QxlDHkZhRtdG+UbmRuxG00bxRtJG9kbvRq5GcEbbRvtG1YEJgAFDBUMOQxZDG0MfRmtG3Ub5
RttG9kbZRvBG1Ub0RtZGbEa2RvFG70acgQmAAUMIQxFDF0McQyFGdkbjRvdGzEb6Rt9G90bm
RvVGqEZ4RtFG+EbHRmGBCQBDA0MNQxJDGEMdQyJGgUbnRvNGr0bbRtxG88byAUabRrXG7gFG
kUNTgQkAQwlDDkMTQxlDHUMiRplG7kblRoZG50btRvtG7EbwRpZG4UbzRspGVkNTgQlDBEMJ
Qw5DE0MZQx5DIkarRu1G1kZ0RshG+0b4RtZGr0bHRvlG4EaUw1MBgQhDAEMEQwlDDkMTQxlD
HkZBRr1G7kbRRl9GjUbgRvhG5UaoRvNG5Ua1w1IBQ1PG/gOGG8b8A8b9Acb+A4YVRvlG+Eb5
xvoBRvvG/AHG/QHG/gGGE8b2A0b3xvkBxvsBxv0CRv6GBIEChgpG8sbzAUb0xvYCRvhG+8b8
Acb9AUb+hgcBhghG7UbuRu9G8UbzRvTG9gFG+Eb6xvwBxv0BRv6GEMbrAUbuRu9G8MbzAUb1
RvdG+Ub7xvwBRv3G/gGGD0boxukBRuxG70bwRvNG6kbsRvFG9Ub4RvzG/QFG/oYPRs9G0UbT
RthG20bhRtmBBEb1RvxG/Ub8gQSGCoEMRvlG/cb+AYEDhgqBDEb5Rv3G/gGBA4YKgQxG9kb9
Rv6GAYEChgqBDUb5Rv6GAoEBhgqBCEblRvJG9IECRv2GD4EHRt9G9Ub5RvpG84EBRvyGD4EH
RupG90b5RvaBBIYOgQZG3Eb1RvdG+kbygQWGDYEFRtdG80b3RvlG74EHhg6BAkbSRvFG9Eb2
Ru6BBYYTRsVG70b0RvVG8YEDRvtG/oYURthG80b2RvdG8oEBRvZG+oYWRuhG8Ub3xvgBRvVG
90b8hhIBhgNG50bvRvfG+AFG+kb7RvyGAUb+hgEBhgsBhgJG9UbfRulG70b1xvgBxvsDRvqB
AoYPAUa9RuJG60bvRvRG+Eb5RvZG9IEFhg4BRplG2kbmRutG8Eb0RvhG74EHhg4BRrxG4Ebo
RutG7kbzRuqBCIYORrxG3kbjRuhG7EbjRuGBCYYORt1G40boRupG3oELhg0BRuRG6EbrRu5G
5IELhg0BRtdG6kbtRvFG6YELhgyBAkbjRvNG9EbvgQuGC4EChv+GBkbyRvNG9kb3RvuGA0b+
hg5G4EbjRuVG50bqRuxG8EbxRvJG9Eb3RvlG+4YSRtdG3UbjRuVG50brRu9G8UbyRvRG90b5
RvuGEkbSRtpG4EbmRuhG60bvRvFG80b0RvZG+Ub7hhJG0EbVRttG4kbnRupG70bwRvJG9Ub3
RvlG+0b8hhFGyUbQRtdG3kbmRuxG7kbvRvGGAkb7RvxG/YYQRsJGzUbURt5G40bqRu5G74YE
RvxG/YYQRr5GyUbURtlG40bpRu1G8YYDRvvG/QFG/oYPRrtGxUbNRthG40bpRu6GBEb6RvxG
/oYQRppGlEanRrxGykbqhgRG9Ub3RvlG/YYTgQFG64YDRu6BA0b6hhNG0IYDRuqBAUb2Rv1G
+oYYRvcBRvFG+4YcRvmGQUb5RvhG+4EBhhhG+0b1gQSGDgFGzoYGRvGBBoYORq6GBUb1Ru+B
B4YURuaBCUb4hgxG9YYERtWBCkbwhgxG84YDRu+BCkb0hgxG9wGGA0bxgQqGDUbsAUbqhgJG
9YEKhgxG+YEBhv+Gn4IBhh2CAYYdggGGHYIBhh1Cs0a/RstG5IYeRsdGrIYFRnBGN0aMRtSG
GkaVRsCGHEbshhNG9kb4hhxG9EbRRsiGHEbTRrNGxoYORshGloYLRs5GuUbBhgtGyEZ2RiEA
RoSGCkb7RtxGyEbSRqiGCEbkRleAA0aVhgpG/UbwRuVG6YYIRo5GAoAERneGDEb4Ru2GBkbG
RlGABkZkhgxG80bfhgVGikYEgAdGbYYLRvxG4UZ4hgRGkYAJRtWGC0bsRr0AhgRGg4AJRvyG
C0beRnAAhgRGr4AIRiCGDEa0gAFGy0b1hhNG/EbrRtdGvUbERrRGska9Rs1G6ka+RuSGE0b3
RuZG2kbPRtdG00bQxssBRtxG4YYURvlG9kbvRutG9Eb3RvZG7UbsRu+GEUb1RvxG4kbvRvyG
HkbuhugChh6CAYYdggKGHIIChhyCAoYbRvqCAYYbRvRG0IYBRspG4YYYRudGv0ajhhtG5UaY
RmFGWYYaRupGo0YGgAGGFUb5hgNG30ZVgAKGFEbuRuSGA0beRj2AAoYURupG7YYDRrWAA4YO
RvKGBEb2RvSGAkbdRneAA4YLRulGy0bYRu6GA0b5RuNG6oYBRvtGx0ZXgAOGCkbfRtBGx0bS
RtmGA0bsRupG7YYBRuhGm0YvgAOGCEb7RvJG4UbPRsFGtEa9hgNG10beRulG/QZG1kZ6RiZG
EIAChgdG+Ub8RvlG50bPRsNGpEahhgJG7Ua5RspG30b4Rv1Gz0ZrRihGFIAChgVG8kb3RvtG
/Eb9RuxG1UbExqYBhgJG7UatRslG1EbnRvdGwkZmRkNGBoAChgVG9Eb4RvzG/QFG80bhRstG
wkbqhgNGrUarRrRGyEbPRrJGeUZVgAOGBUb5RvxG/cb+AQZG6EbWRsiGBEaQRkhGV0aMRqNG
mEaTRm2ABUZxRtpG8EbjRvhG90buBkb8xvUBRv0GRvVG7EbaRs9GskaURlOAC0YsRoxGz0ba
Rt9G7kbTRupG30bjRuVG5EbiRvgGRvNGx0apRodGNYAKRgtGcEaxRuNG98b4AUbjRoFGaEZ4
RsVG+kb9RuxG40bQRppGYUYbgApGIUZnRpVGq0bNRtFGyka3RqdGREZURrxG80b5RslGhEZv
RlJGM4ADRhxGTEZLRjtGREZPRmBGTkYtRnVGmka9RtZG1EbeRtNGzUbIRq5Gv0bmRvhGxkaV
Rp5Gr0aZRoZGU0YOgAFGhUbMRuVGy0ayRtxG30a1RppGS0aGRqlGxEbFRt9G5kbuRvRG4kbz
BkbwRuNG70b1RvxG9UbuRuJG2kbhRrBG00bJRuyGAUb2RsdGwkbhRq9Gvka2RtZG4EbfRt1G
60buRuxG6EbkRuBG1wZG90b1RvZG+4YCRveGAUb6RvtG9EbGRm5Gskb5RtRG0Ea/Rs1GxUaz
RrJGsEalRplGi0Z+RnlG2kb4RrNGnUagRq9Gu0bMRtkGRvRG/gZG+Eb6RvZGrkamRvpG2Ebb
Rt5G30bjRuRG6EbrRu1G8EbyRvRG+Eb7Bkb8Rv1G/oYERvhG4kbdRvqGAUbmRvFG3kbTRtpG
3UbhRuNG50brRu9G8EbyRvVG+Eb6RvvG/AFG/Ub+hgRG+EbyRrBG1wZG8kb+Rv1G+0bKRtVG
2kbeRuJG5kbqRu5G8EbyRvVG90b6RvvG/AFG/Ub+hgRG50b7RtlGrUbyBkbqRvtG8kbBRsxG
1UbaRuFG5UbpRuxG70byRvVG90b6RvvG/AFG/Ub+RvtG+IYCRtxG9Eb1Rp5G5kb+RsBG6QZC
uULERs5G1UbdRuRG6UbsRu5G8Ub0RvhG+kb7RvxG/Ub7RupG1kbFRshG5UbpRr1GxUbtRqdG
x0bwRr9Gp0bdQrFCvELJRtJG2EbiRuhG60buRvFG80b3RvpG+8b8AUbiRsJGm0Z/RopGqEbJ
RoFGikbXRqJGp0bJRp9GqkbRQqtCt0LHRtBG2UbhRuhG7UbuRvFG9Ub3RvrG/AFG8UbKRp5G
b0ZYRl9GgkaoRkVGSkasRqtGsUa4Rp1GokbLQqZCtkLARs5G2EbhRuhG7EbvRvFG9Eb4RvlG
+0byRuVGyUaRRmlGWkZuRpxGtEZURkhGpkbARslGuka2RnZGcEKiQrNCwUbNRtpG4UboRutG
8EbzRvVG+Eb6RvZG5UbaRslGq0aTRpZGr0bURuZG1MbQAUbdRrpGo0axRigAQp9Crka8RsxG
2EbgRuhG7kbvRvNG9sb5AUbrRtpG0UbLRtBG1EbdRupG9kb3RuZG4kbWRthGkkZ9RmiAAUKV
RqVGt0bIRtdG5EbpRvRG8kb0xvgBRvRG5EbVRs5G1EbfRu8GRvVGx0a7RplGeUZ2RoVGTkYM
gAJG2UbWRrZGyUbXRuJG60bxRvNG9sb4AUbmRtZGzUbRRtpG60b8RuxGy0a3RqBGjEZoRmdG
WIAERvhG/kbyRspG2UbkRupG8kb0RvVG+EbzRuNG00bRRtNG5Ub2RvFG0kaTRm1GXkZgxlcB
RiaABEbiRv1G60bORtlG40brRvJG9Ub2RvlG7UbfRtZGz0bZRuwGRutGw0ZrRgkARgdGZkZ6
RhWABAZG7kbFRs5G20bmRuxG8Ub2RvdG+EboRtXGzQFG30b1BkbyRrdGPIABRjFGnUZ9RhmA
BEbQRr5GyEbQRttG5EbrRvJG9kb3RvFG4UbPRsVGzEbkhgJGsUYigAFGdUaZRo2ABUa2RsJG
y0bSRtpG5EbrRvBG9kb3RutG3EbJRsRG0kbrBkb8RvJGpUYcgAFGOUZiRiyABUa9RsRGzUbU
Rt5G5UbqRvBG9Ub4RuVG20bDRr1GzkbkRudG4UbjRoOAAkYIRjKABkbERslG0EbYRuJG50br
RvFG9Ub5RulG2EbDRr5GwUbMRslGu0a6RlmAC0bIRs1G1UbdRuNG6EbtRvJG9kb7Ru1G3EbG
RrZGo0aoRqRGhkZwgAxG0EbVRttG4EblRupG70bzRvZG+0b2RuRGyEa0RpBGf0aKRmtGRYAM
RtpG3EbgRuZG6UbvRvJG9kb7xvwBRudGz0a8RpJGdUZ7Rn5GToAMRt9G4UblRuhG7EbwRvRG
+Eb7xv0BRvBG3UbFRqxGlUaRRqFGgoAMRuRG50bqRu1G8kb1RvnG/AHG/gFG+0bjRtBGvka3
RrJGu0asRiiAxcYCAYAWRgFGAkYDAEYDRgKAHEYBgAFGA4AgRgNGAYAdRgGAH0YBgCFGAoD/
gD9GA4D/gCZGAgBGAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+AFAAAAAAAAAAAAAAAAYADiBWACYgVgAmIFYAJiBaACIgXgAaI
GYAFiBmABYgagAOIHQCI/4g9AIgdgAGIHYABiByAAogbgAOIG4ADiBqABIgagASIGYAFiBmA
BAgAiBiABAiAAYgXgAQIgAKIFoAECIACiBaABAiABIgVgAmIFYAJiBWACYgVgAiIF4AHiBiA
BogYgAWIGoAEiBsACACI/4hcAIgdgAGIHQCIHYABiB2AAYgcgAGIHYABiB2AAYgcgAKIHIAC
iAGAAYgYgAKIAYACiBeAAogBgAKIF4ACiAGABIgVgAmIFYAJiBWACYgVgAmIFoAIiBeABogY
gAaIGYABCIABiBsAiAEAiP+I/4hYAIgeAIgeAIgCgAKIGACIAoACiBgAiAKABYgVgAmIFYAJ
iBWACYgVgAmIFYAIiBaAAwiAA4gXgAIIgAOIGIABiAGAAYgaAIj/iP+Iv4ACiB2ABIgVgAMI
gASIFYADCIAEiBWAAwiABIgVgAMIgASIFYADCIAEiBWAA4gBgAOIFoACiAKAAYgYgAGIAwCI
GQCI/4j/iOGAA4gVgAOIAYADiBWAA4gBgAOIFYADiAGAA4gVgAOIAoACiBWAA4gCgAKIFYAD
iAKAAogWgAKIA4ABiBeAAYgeAIj/iP+I44ACiBSAA4gCgAOIFIADiAKAA4gUgAOIAoADiBSA
A4gDgAKIFIADiAOAAogUgAOIBIABiBWAAogEgAGIFoABiB4AiP+I/4jkgAGIFIADiASAAYgU
gAOIBIABiBSAA4gEgAGIFIADiASAAYgUgAOIBIABiBSAA4gFAIgUgAOIHIACiB2AAYgeAIj/
iP+IxYABiBKABIgFgAGIEoAEiAWAAYgTgAOIBYABiBOAA4gFgAGIE4ADiAWAAYgTgAOIBgCI
E4ADiAYAiBSAAogdgAGIHgCI/4j/iMYAiBGABYgGAIgSgASIBgCIEoAEiAYAiBKABIgGAIgS
gASIBgCIEoAEiAYAiBKABIgagASIHIACiB2AAYj/iP+Iv0PFQ8xD00PaQ+JD6EPvQ/RD+UP+
gwOICoAGQ8lD0EPXQ95D5EPpQ+9D9EP5gwSIC4AFQ85D1EPbQ+BD5UPqQ/BD9UP6gwSIC4AF
Q9RD2EPdQ+JD5kPrQ/BD9UP6gwSIC4AFQ9ZD2kPfQ+ND50PrQ/FD9UP6gwSIC4AFQ9lD3EPg
Q+ND50PsQ/FD9kP6gwSIDIAEQ9pD3UPhQ+RD6EPsQ/FD9kP7gwSIC4AFQ9xD30PiQ+VD6UPt
Q/JD9kP7gwSIC4AFQ91D4EPjQ+ZD6kPuQ/JD90P7gwSIDIAEQ95D4UPkQ+dD6kPuQ/ND90P7
gwSIDoACQ99D4kPlQ+hD60PvQ/ND90P8gwSIEUPgQ+ND5kPpQ+xD70P0Q/hD/IMEiBFD4kPk
Q+dD6kPtQ/BD9EP4Q/yDBIgRQ+ND5UPoQ+pD7UPxQ/VD+EP8gwWIEEPkQ+ZD6UPrQ+5D8UP1
Q/lD/IMFiBBD5UPnQ+pD7EPvQ/JD9kP5Q/yDBogPQ+ZD6EPrQ+1D8EPzQ/ZD+UP8gwaID0Pn
Q+pD7EPuQ/FD80P3Q/lD/IMHiA5D6UPrQ+1D70PyQ/RD90P6Q/yDCIgNQ+pD7EPuQ/BD8kP1
Q/hD+kP8gwmICwND60PtQ+9D8UPzQ/VD+EP6Q/yDC4gHgwJD7EPuQ/BD8kP0Q/ZD+UP7Q/1D
/oMVQ+1D70PxQ/ND9UP3Q/lD+0P9Q/6DFEP+Q+9D8EPyQ/RD9kP4Q/pD+0P9Q/6DE0P8Q/dD
8EPyQ/ND9UP3Q/hD+kP7Q/1D/oMQQ/5D+0P4Q/RD8EPxQ/ND9EP2Q/hD+UP7Q/xD/cP+AYML
Q/5D/UP8Q/pD90P0Q/FD7UPoQ/JD9EP2Q/dD+UP6Q/tD/MP9AcP+BsP9AkP8w/sBQ/lD+EP2
Q/RD8UPuQ+pD5kPhQ/ND9UP3Q/hD+UP7w/wBw/0Fw/wBQ/vD+gFD+UP4Q/dD9kP0Q/JD8EPt
Q+pD50PjQ99D2kP1Q/ZD+EP5Q/pD+0P8w/0Dw/wBQ/tD+kP5Q/hD90P2Q/VD9EPzQ/FD70Pt
Q+pD50PkQ+FD3UPZQ9ND9kP4Q/lD+kP7Q/zD/QPD/AFD+0P6Q/hD90P2Q/RD80PxQ/BD7kPs
Q+pD50PlQ+JD3kPaQ9ZD0kPNQ/dD+UP6Q/tD/MP9A8P8AUP7Q/pD+EP3Q/VD80PyQ/BD7kPs
Q+pD6EPlQ+JD30PcQ9hD1EPQQ8xDxkP4Q/pD+0P8Q/3D/gHD/QFD/EP7Q/pD+UP3Q/VD80Px
Q+9D7UPrQ+hD5kPjQ+BD3UPaQ9ZD00PPQ8pDxkPAgQhDAEMEQwlDDkMTQxlDHkZfRspG9EbA
Rj5DOUaSRs9Gv0b0Rt9GzkZpQ1HDUgGBCEMAQwRDCUMOQxNDGUMeRoFG3kb0RqpDNUM5Rm1G
tEb0RuBGzEZiQ1BDUcNSAYEIQwBDBUMKQw5DE0MZQx5Gn0bzRulGhEM1RnFGwEb2RuVGykZj
Q05DT8NRAoEIQwBDBUMKQw5DE0MZRj9GxEb8RtJGVUZKRrVG9UbrRsZGZENLQ01DT8NQAoEI
QwBDBUMKQw5DE0MZRllG1Eb7RsFGOUaeRuBG+ka/RmBDSENLQ01DTsNPAoEIQwBDBUMKQw5D
E0MZRnFG30b1RqxGVUbGRvxG1UaDQ0RDR0NKQ0xDTcNOAoEIQwBDBUMKQw5DE0MYRoJG5kbv
RptGh0bkRvZGtENAQ0NDRkNJQ0tDTMNNAUNMgQhDAEMFQwlDDkMTQxhGkUbrRuhGikaxRvdG
40aKQz9DQkNFQ0dDSUNKw0sBQ0qBCEMAQwVDCUMOQxJDGEaNRuVG4EaBRtJG/EbGRldDPkNB
Q0NDRkNHQ0hDSUNIQ0eBCEMAQwVDCUMNQxJDF0aORuZG4UaCRuJG+EatQzhDPEM/Q0FDQ0NF
w0YBQ0VDRIEIQwBDBEMJQw1DEUMWRpZG7UbnRqNG7UbrRo9DNkM6Qz1DP0NBQ0LDQwFDQkNB
gQhDAEMEQwhDDEMQQxVGnEbyRupGwkb4RtZGakM0QzhDOkM8Qz5DP0NAwz8BQz2BCEMAQwRD
CEMMQxBDFEafRvRG6kbSRvxGxEZBQzJDNUM3QzlDO8M8AkM7QzmBCEMAQwRDB0MLQw9DE0aO
RupG60beRvpGtUMsQy9DMkM0QzZDN8M4AUM3QzZDNIEIRhhDA0MHQwpDDkMSRn5G2UbiRs1G
7UauQylDLEMvQzFDMkMzwzQBQzNDMUMvgQhGKkMDQwZDCUMNQxFGfkbjRu1G0EbxRr1GQUMp
QytDLUMuwy8CQy5DLEMpgQhGRUMCQwVDCUMMQw9GiUbqRu9GwUb2RspGW0MlQyhDKUMqQyvD
KgFDKUMnQyOBCEZjQwJDBUMIQwpDDkaSxu8BRq5G9kbeRnNDIkMkwyUBQyZDJUMkQyNDIUMd
gQlDAUMEQwZDCUMMRolG60byRptG8EbqRohDHkMfQyDDIQFDIEMfQx1DG0MXgQlDAUMDQwVD
CEMKRnpG4UbvRp5G50bzRqBGGsMbAUMcQxtDGkMZQxdDFEMQgQlDAEMCQwRDBkMIRm5G1Ebk
RptGzEb8RstGScMWA0MVQxNDEUMOQwqBCUMAQwFDA0MFQwdGcEbcRvFGpkaoRuxG30Z5wxEC
QxBDD0MNQwpDB0MDgQpDAEMCQwNDBUZrRt5G+Ua0RpZG5kbaRptGGEMMQwtDCkMJQwZDBEMA
gQtDAEMBQwJDA0ZWRtJG+0bCRl1G1kb8Rr9GOUMHQwZDBEMCQwCBDsMAAUMBRj9GxEb6Rs9G
WkafRu9G5EZ/QwFDAIHmRutG9kb4RvSBCoYDgQGGBoEDRu5G+Eb6RvmBCoYDgQGGBYEERuxG
+kb7RvyBCoYDAYYFgQZG+Ub9Rv4GgQmGAwGGBIEHRvxG/oYBgQiGAwGGBIEIRv6GAoEIhgiB
CYYEgQeGB4ELhgOBB4YHgQuGA4EHhgeBDIYDgQaGBoENhgOBBoYGgQ2GA4EGhgaBDoYDgQWG
BYEPhgOBBYYFgQ+GA4EFhgWBD4YDgQWGBYEPhgOBBYYGgQ+GA4EEhgaBD4YDgQSGBoEPhgOB
BIYGgQ+GA4EEhgaBD4YDgQSGB4EOhgOBBIYHgQ6GA4EEhgeBDoYDgQWGB4ENhgOBBYYHgQcG
gQEGgQGGA4EFhgeBB4YJgQWGAwGGA4EGhg0BhgmBBoYYgQaGGIEGhhiBBkbVhgJG94EKRvyG
A0b4hgVG+YEDRvWGAkb4gQlG+IYCRvMBRvWGBEb6gQNG94YCRv2BCIYEAUb7hgRG8oEERvOG
Akb+gQiGBEb3hgNG/AaBBUb2hgOBCIYIRvuBCEb+hgOBB4YHRveBCYYEgQeGB0bzgQmGBYEG
hgZG9YELhgSBBoYGRvKBC4YEgQaGBkbvgQuGBIEGhgVG+4ENhgSBBIYGRvuBDYYEgQSGBkb7
gQ2GBIEFhgVG+4EOhgSBBIYFRvWBDoYEgQSGBUb0gQ6GBIEEhgVG9IEOhgSBBIYGgQ6GBIEE
hgVG/IEPhgOBBEb8hgVG9YENhgSBBEb4hgVG/IEOhgOBBEb3hgaBDoYDgQRG94YHgQ2GA4EE
RviGB4EMhgSBBEb3hgeBDIYEgQRG+IYHRvWBBoYJgQWGB0b4gQaGC4EDhgdG+4EGhg5G+IYH
RvuBBoYYRvqBBYYYRvyBBYYYRvyBBYYERuOACEZfhgRG8Ub0hgRG6UYkgAFGwoYERhiAB0a4
hgNG/EZvRt5G/IYCRvVGmIACRp+GBEZmgAZGL4YERoVG3EbsRvmGAkZwgANGV4YERrOABkZk
hgVG+0b0hgFG+0aigARCEoIChgFG90YJgAVGj4YIRvRGkIAGQtGCAYYCRlmABUa4hgdG8UaA
RhOABkKLggKGAUaqgAVG1oYGRvVGxkYGgAdCLIIChgJGGIAERvSGBUb9RuJGOIAJQryCBEJj
gARG8YYFRvpG0IAKQnaCBEKsgARG84YFRvdGroAKQjKCBELzQgKAAkYDRv2GBUb6RjaAC0bT
hgGCAkJKgAJGC4YHgAxGkQaCA0KGgAJGEIYGRuaADEZOBoIDRtWAA0bthgVGzoANRvYGggGG
AUYwgAJG3IYFRsmADUKlggGGAkZSgAJG0oYFRt+ADUJ7ggKGAUZwgAJG44YFRumADUJNggGG
AkaegAJG6oYGgA1GKQKGA0bKgAJG1IYGRlaADEYIRvuGA0bKgAJGsIYGRsuADEYGhgRG3IAC
RpmGB0YMgAxG8IYDRvSAAkaJhgdGioAMRuqGA0bfgAJGdoYHRvyADEbuhgNG44ACRkmGCEY1
gApGBYYERuWAAkYbhghGkoAGRohGcUZcRnhGYYYERuKAA0b3hgdG7IAGhglG20YwgAJGq4YI
gAaGC0blRpFGGkaAhghGRIAFhhhGlIAFhhhG+oAFhhlGJ4AEhhlGToAEhgVG+Mb5AUb0RvgG
RvRG40bThgRGMIABRhVGYkaDRpZGL4ADhgVG+kbpRt5G2UbcRu8GRvJG4IYDRvCAA0YoRlpG
UoAERv6GBUbpRtJGyUbORt8GRv6GBEbRgANGDUYbgAVC8oIChgJG8kbSRsZGy0bdhgZG5UYE
gApC5YIDhgFG9UbbRs1G1EbohgZG1kY7gApC5oIDhgFG/EbgRtpG5Eb1hgZGxUZIgApC44IE
hgFG7UbpRvWGB0arRjaACkLhQviCBUL6QvkChgZG+EaRRieACkLnQvSCCYYFRuxGjUYbgApC
70L6ggmGBUbtRp1GMYAKQuhC60L9ggmGBEb6RrtGY4AKQuZC50L3ggmGBUb1Ro6ACkLxQu5C
9oIJhgZGvoAKggFC/IIIhgdG3IAKggiGCkb2gAqCB4YMRiGACYIIhgtGdoAJggiGC0aggAmG
AoIEhgxGxIAJhgSCAYYFRviGBkbzRgKACIYMRvSGB0Z6gAiGDEbxhgdG2IAIhgxG7IYIRliA
B4YMRuqGCEargAeGC0b8RueGCEb7gAeGC0b4RulG8IYHRvhGG4AGhgtG+UboRtyGBEbphgFG
6EY8gAaGE0amRu0GRupGeIAGhg1GuYYERtNG4AZG80aogAYGRvpG+4YQRuVG3sb7AUbSRi6A
BUboRs9GzUbghgtG9UbqRvaGAUbthgFG9EZrgAVG80bPRr9G64YKRuFGsUatRt2GAUb5hgJG
ooAFRupG7UbsRulG6kboRulG6EbmRuJG5sbwAUbeRsrGxgFG00awRlaAC8bYAcbaAkbbRtxG
3kbvRutG6EbfRvFG7kbaRstGykbIRplGN4ALRsVGykLPRtFG1EbXRtlG8UbsRuhG80bvRupG
+0brRtlGzUbDRnuADEK3QsVCzULTQthG20bpRudG7kbrRulG4kbpBkb4RuFG0UbMRl6ADEKy
QsdC1ELbQt1C3sbqAUbfRtpG40bkRvKGAUb0RtxGvEZKgAxCrkLLQtNC20LrQu/G7wFG48bl
AUboRvuGAkblRrRGN4AMQrpCz0LXQulC7kLwQuZC50LsQuhG50b2hgNG8ka0RgSADELIQtNC
80LqQvFC6ULrQuXC6wFC+QKGA0b0RqKADULUQttC90LzQvZC8kLtQvBC94IChgNG9EaOgA1C
6ULtQu5C9kL6ggeGAkbrRoGADULqQvJC8ELxQvaCB4YCRuJGeYANQuhC8ELuQu9C9IIIBkb3
RtpGiEYsgAxC7ELyQvBC8UL2ggeGAUbxRtZGo0Z0RjCAC0L4QvFC8kL2QvyCB4YBRu5G1Ua7
Rp9GaYALgguGAUb8RuhG1UbCRrpGloALggiGBEb1RuFGzEbBRsZGqkYCgAqCCIYERvJG3UbL
RslG1kbGRiuACoIIhgRG6kbXRspGzkbdRuJGXYAKhgKCBYYDRvxG5UbORsZG1UbnRu5GjIAK
hgOCA4YERvZG3kbKRsdG2EbtRupGroAKhgxG7kbYRsZGxUbWRu1G5kbDRj6ACYYMRu1G00bB
RsZG20boRt9Gr0ZvgAmGDEboRtNGvkbHRutG6EbeRqlGhUYFgAiGC0b5RuNGz0bFRs5G7kbs
RtdGmka/RlOACIYLRvdG4kbNRsVG0UbvRupGy0ZURqFGdoAIhgtG9EbkRs9GyEbVRuVG4Ea9
RhxGY0ZcgAiGC0b0RuNG0kbMRtpG4UbaRqAARgVGN4AIRuxG2EbWRumGB0b0RtpGt0a2RsRG
zEbTRnaAAUYSgAhGz0akRppGw0bxRvZG80bxRu1GzEbDRp1GgUY3gAFGCUZgRpRGMoALRiWA
AUYiRnBG2kbyxvgBRvVG+kboRs5Go0ZaRl5GUEYtRk1GK4AQRnZGpkbxRtdGrUa3RspGz0a9
RoFGYYACRkqAAUYQRjqAC0YxRrNG1UbjRr5Gp0abRrJGwUabRkiAA0YNRjwARjJGa4AORgZG
EkYNRhBGCIAZRhVGDEYcRhZGGUYPRgWAF0YURhpGEUYWRhlGG0YSRhiAF0YVRhlGHEYeRhZG
GEYmRhuAFUIUQhZCGUYcRiRGKEYnxiUBRhKAFMISAUIZQhhGF0YVRiBGHUYfRh1GCYASQgxC
BkINQhlCFUIgQh5CG0IWQhpCHEYNgBRCBEINQhdCHkIZQhfCHQFCF0IKgBRCDEIHQgtCEUIe
QhpCFkITQgxCAoAVwhoBQhNCEkIPQghCAYAYQhdCG0IQQg9CCoAaQhhCEEISQhFCDEICgBlC
HEIZQhBCD0IKAEICgBhCDkIRQg9CCkIEgBxCAYBDQgKAHkICgP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gNcAAAAAAAAAAAAA
AAGAA4gVgAQIgAOIFYAECIADiBWABAiAA4gVgAOIAYADiBWAA4gBgAKIFoACiAKAAogWgAGI
BACIF4ABiB0AiP+IhIACiByAAYgdgAGIHQCIHgCIHgCIGIAECACIGIAECACIGIAECACIGIAE
CACIGIAEiBqACYgWgAKIAYAEiBWAAogBgASIFYABiAKABIgVgAGIAoAEiBWAAYgCgAOIFgCI
A4ADiBuAA4gbgAKIHIACiByAAYgdAIj+gAKIHIACiByAAYgdAIgeAIiZgAKIHIACiByAAogc
gAKIHIADCIADiBcAiAKABIgWAIgCgASIGoAFiBmABYgZgASIGoAEiBqABIgagASIGoADiBuA
A4gbgAKIHIACiByAAYgdgAGIHYABiB2AA0hSiBqAA4gbgAKIHIABiB0AiB4AiPoAiB4AiB4A
iB6AAYgBgAOIG4AEiBqABIgagAWIGYAFiBmABogYgAaIGIAGiBiABogYgAaIGIAGiBiABogY
gAWIGYAFiBmABIgagAOIG4ACiByAAogcgAGIHQCI/4iaAIgCgAKIHIADiBuABIgagAWIGYAF
iBmABogYgAaIGIAGiBiABogYgAaIGIAFiBmABYgZgASIGoAEiBqAA4gbgAKIHIABiB0AiP+I
/wCIHYACiByAA4gbgASIGoAEiBqABIgagASIGoAEiBqABIgagASIGoADiBuAA4gbgAKIHIAB
iB0AiP+I/4h/gAGIHYABiB2AAogcgAKIG4ADiBuAA4gbgAKIHIACiByAAYgdgAGIHQCI/4j/
iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iF5D+kP7w/0Bw/4DQ/1D/EP7Q/lD+EP2Q/ND8UPv
Q+xD6kPnQ+VD4kPfQ9xD2EPVQ9FDzUPJQ8VDwEO6Q/tD/cP+AYMCQ/5D/UP8Q/pD+UP3Q/RD
8kPvQ+xD6kPnQ+RD4UPeQ9tD10PUQ9BDzEPIQ8RDv0O7Q7VD/EP+gwRD/kP9Q/xD+kP4Q/ZD
80PwQ+1D6kPnQ+RD4UPeQ9tD2EPTQ9BDzEPIQ8NDv0O6Q7ZDsEP+gwZD/UP8Q/pD90P1Q/JD
70PsQ+hD5UPiQ95D20PYQ9RD0EPMQ8hDw0O/Q7tDtkOxQ6yDB0P+Q/xD+UP3Q/RD8UPtQ+pD
50PjQ99D3EPYQ9VD0UPMQ8hDxEO/Q7tDtkOyQ61Dp4MHQ/5D/EP5Q/ZD80PwQ+xD6UPlQ+FD
3UPaQ9ZD0kPOQ8lDxUPAQ7xDt0OzQ65DqUOkgwdD/kP8Q/lD9kPzQ+9D60PnQ+ND30PbQ9dD
00PPQ8tDxkPCQ71DuUO0Q69Dq0OmQ6GDB0P+Q/xD+UP2Q/JD70PqQ+ZD4kPeQ9pD1kPRQ81D
yUPDQ79DukO2Q7FDrEOoQ6NDnoMHQ/5D/EP5Q/VD8kPuQ+lD5UPhQ91D2EPUQ9BDy0PHQ8FD
vUO4Q7NDr0OqQ6VDoUOcgwdD/kP8Q/lD9UPxQ+5D6UPkQ+BD20PXQ9JDzkPJQ8VDv0O7Q7ZD
sUOsQ6hDo0OfQ5qDCEP8Q/lD9UPxQ+1D6EPkQ99D2kPWQ9FDzUPIQ8NDvkO5Q7RDr0OrQ6ZD
okOdQ5iDCEP8Q/lD9UPxQ+1D6EPjQ95D2kPVQ9BDzEPHQ8JDvEO3Q7NDrkOpQ6VDoEOcQ5eD
CEP8Q/lD9UPxQ+xD50PjQ95D2UPUQ9BDy0PGQ8FDu0O2Q7JDrUOoQ6RDoEObQ5eDCEP8Q/lD
9UPxQ+xD50PiQ91D2UPUQ89DykPFQ8BDu0O2Q7FDrEOoQ6NDn0ObQ5eDCEP8Q/lD9UPxQ+xD
50PiQ91D2EPTQ89DykPFQ8BDukO1Q7BDrEOnQ6NDn0ObQ5eDCEP9Q/lD9UPxQ+xD50PiQ91D
2EPTQ85DyUPEQ8BDukO1Q7BDrEOnQ6NDn0ObQ5eDCEP9Q/lD9UPxQ+xD50PiQ91D2EPTQ85D
yUPEQ79DukO1Q7BDrEOnQ6NDn0ObQ5eDCEP9Q/lD9UPxQ+xD50PiQ91D2EPTQ85DyUPEQ79D
ukO1Q7BDrEOnQ6NDn0OcQ5iDCEP9Q/lD9UPxQ+xD50PiQ91D2EPTQ85DyUPEQ79DukO1Q7BD
rEOoQ6RDoEOcQ5mDCEP+Q/pD9UPxQ+xD50PiQ91D2EPTQ85DyUPEQ79DukO1Q7BDrEOoQ6RD
oEOdQ5kIgwdD/kP6Q/VD8UPsQ+ZD4kPdQ9hD00POQ8lDxEO/Q7pDtUOwQ6xDqEOkQ6FDnUOa
iAGDBkP+Q/lD9UPxQ+xD5kPhQ9xD10PTQ85DyUPEQ79DuUO1Q7BDrEOoQ6RDoUOeQ5qIAYMG
Q/1D+UP1Q/BD60PmQ+FD3EPXQ9JDzUPIQ8NDvkO5Q7RDsEOsQ6hDpEOhQ55Dm4gBgwZD/UP4
Q/RD70PqQ+VD4EPbQ9ZD0UPMQ8dDwkO+Q7hDs0OvQ6tDp0OkQ6BDnkObiAGDBkP7Q/dD80Pu
Q+lD40PfQ9pD1UPQQ8tDxkPBQ7xDt0OyQ65DqkOmQ6NDoEOdQ5sIgwZD/kP6Q/ZD8UPsQ+hD
4kPdQ9hD00POQ8lDxEPAQ7tDtUOxQ61DqUOlQ6JDn0OcQ5oIgwZD/UP4Q/RD70PrQ+ZD4EPb
Q9ZD0UPMQ8dDwkO+Q7lDs0OvQ6tDp0OkQ6FDnkObQ5mDBkP+Q/pD9kPyQ+1D6EPkQ95D2UPU
Q89DykPFQ8BDu0O3Q7FDrUOpQ6VDokOfQ5xDmkOYgwZD/EP4Q/RD70PqQ+ZD4UPbQ9ZD0UPM
Q8dDwkO+Q7lDtEOvQ6tDp0OjQ6BDnUObQ5lDl4MFQ/1D+UP1Q/FD7EPoQ+ND3kPYQ9NDzkPJ
Q8RDwEO7Q7ZDsUOsQ6hDpEOhQ51Dm0OZQ5dDloMFQ/pD9kPyQ+5D6UPkQ+BD20PVQ9BDy0PG
Q8FDvEO4Q7NDrkOpQ6VDoUOeQ5tDmEOWQ5VDlIMEQ/tD90PzQ+9D6kPmQ+FD3EPYQ9JDzUPI
Q8NDvkO5Q7RDr0OrQ6ZDokOeQ5tDmEOWQ5RDk0OSgeFDAMYAAYEbwwABRgFGAEYngRlDAEMB
QwJDAUYBRgCBGcMCAUMDQwJGAkYBRgCBGMMDAUMEwwMBRgFGAIEYQwTDBQFDBEMDRgJGAIEY
QwXDBgFDBUMERgNGAIEYwwcCQwZDBUYDRgGBGMMIAkMHQwZGBEYBgRjDCQJDCEMGRgVGAkMA
gRfDCwFDCkMJRgdGBUYCRgCBF8MMAUMLQwpGCEYGRgNGAIEXQw5DDUMMQwpGCUYGRgNGAIEX
Qw9DDkMNRgtGCUYHRgRDAYEXQxBDD0MNQwxGCkYHQwRDAYEXQxBDD0MOQwxDCkMHQwRDAYEX
QxFDD0MOQwxDCkMHQwNDAIEXQxFDD0MNQwtDCUMGQwJDAIEXQxBDD0MNQwpDCEMFQwGBGEMP
Qw1DC0MJQwZDA0MAgRhDDkMMQwpDB0MFQwKBGUMMQwpDCEMFQwJDAIEZQwlDB0MFQwJDAIEa
QwZDBEMCQwCBG0MDQwGBHYYZgQWGGIEGhhiBBoYIgQKGDIEGhgiBAYYNgQeGB4EBhgIBhgiB
DIYDgQaGBoENhgWBBIYFgQ+GBYEChgWBEYYMgROGCYEXhgaBGYYEgRwGgf+B/4FRhhmBBYYZ
gQWGCEb4RvuGDoEFhgdG84EBhg6BBYYIRveGDUb5gQYGRvzG+AGGBAGGDUb6gQpG9YYEAYYC
AUb8hgZG6YEMRviGBYEChgZG+4ENRvOGBgGGB4EPRvmGBUb8hgWBEoYKRvuBFYYHRvWBF4YF
RuaBGoYCRvuB/4H/gU+GGUZogASGGUZkgASGCUb4hg5GTIAEhghGPoYPRi+ABIYIRn6GDkaJ
gAVG20bsRviGBUZ8hg1G9EYSgAhGM4YFRt6GAkbbRvmGB4ALRlqGBUbORshGmkYvhgdGGIAM
RuiGBkZ3hgdGXoANRhOGDUb3RmSAD0ZOhgtGnUYwgBFGakbjhghGb4AURghGhoYGRiOAF0ZO
Rs+GA0Y0gBpGS0aCRmZGDYD/gP+AL0bpRslGzUbuhglG9EbCRpFGh0bEhgVGzYAFRu1G5kbu
hgRG+0bbRtmGAkb4RsxGsUakRsiGBUapgAUGRviGBEbzRrpGO0ZKRstG+wZG+0btRuBG50bu
hgVGioAFhgdGnkYURueGAkb2RvyGB0bkRkaABUbzhgZGykZQhgRG9IYGRvZGmYAGRiBGcEaU
RqlG+YYCRtFGP4YERqNG+YYFRrqAC0ZJRvGGAUb1RmJGqoYCRqdGPUa+RvGGA0bxRjKADEaR
RuRG8kbFRnsARmxGlUZqAEZ5RuaGBEZwgA5Gg8asAUafRnhGXkYUAEZchgVGpoAPRg5GZkaK
RrNGzEbbRuNG5oYERvNGd0YQgBBGKEZnRq5G7IYFRuJGhEYVgBNGM0aJRu2GBEbBRj6AFkY1
RsWGA0bXRiOAGEYCRndG2AZGrEZCgBxGMoD/gP+ANUZDRqxG0Ea9RpVGeEZuRnVGYEYugARG
NUabRkxGSEZrRguACUYQRphGuEa2RnOAA0ZGRjaABEZLRtRGrUZiRm+ACkZGRnVGokZhgANG
RUZtRkOABEaQBka9Rm9GYYAHRilGG0ZERoFGxgZGqEYpgAFGXEbgBkbfRlmAAUY4Rl1Gkkbn
RrxGeUYTgAhGC0YiRmNGqEbXRsdGfYABRp+GAkacAEYxRmpGZEYuRoNGqUZpgA1GgEbMRluA
AUaMhgJGiYABRgxGKEZhRsNGokYfgA5GUkY7gAFGKUakRtFGo0YngAJGMEagRuJGgoAVRhiA
A0Y2RoRGpkaNRjeAGEYJRn1GhkZ5RlxGNYAZRktGhEZnRhKAF0YZRmhGb0ZmRkRGBYAZRlxG
v0awRnmAGkYfRmRGlUZ+RhuAHMYuAYD/gP+ApUYCgA9GAYAERgpGL0YJgBxGRkZuRkSAHEY1
RlxGM4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+AUQAAAAAAAAAAAAAAAYgZgAWIGYAFiBmABYgYgAOIAQCI/4j/iBwA
iB6AAYgcgAKIG4ADCACIGIAECACIF4AFCACIFoAGCACIFYAHCACIFYAHiBeABogYgAWIGYAE
iB6AA4gbgAOIG4AEiBmABYgZgAWI/4j/iDuAAYgcgAKIG4ADiBqABIgZgAWIGIAGiBeAB4gX
gAeIF4AGiBiABYgfgAGIHYACiBuAA4gbgASIGoAEiBqAAggAiP+I/4gbAIgdgAGIHIACiBuA
A4gagASIGYAFiBiABogXgAeIF4AHiBiABYgfAIgegAGIHYABiB2AAogcgAOIG4ADiBsASMiI
/4j/iDsAiB2AAYgcgAKIG4ADiBqABYgYgAaIF4AHiBiAB4hfAIgegAGIHYACiByAAogcgAKI
/4j/iHgAiB2AAYgbgAOIGoAEiBmABogYgAaIogCIHoABiB2AAYgdgAGI/4j/iHcAiB2AAYgc
gAKIGoAEiBmABoijAIgegAGIHYABiB2AAYj/iP+IlgCIHYABiBuAA4gagASIxgCIHYABiB2A
AYgdgAGI/4j/iLSAAYgbgAOIpwCIHgCIHYABiB2AAYgcgAKI/4j/iNOAAYioAIgdgAGIHIAC
iBuAA4gZSCeABIgZgAGI/4j/iLcAiAqDAkP+Q/tD+EPzQ+9D60PnQ+JD3kPZQ9RDzkPJQ8RD
v0O6Q7ZDsUOsQ6dDokOeQ5tDmEOVQ5NDkkORQ5CDAUP9Q/tD90P0Q+9D60PnQ+ND3kPaQ9VD
0EPLQ8ZDwUO8Q7dDskOtQ6hDpEOfQ5tDmEOVQ5JDkEOPw44BQ/5D/EP5Q/dD80PwQ+xD6EPj
Q99D20PWQ9FDzUPHQ8JDvUO4Q7NDrkOpQ6VDoEObQ5hDlEOSQ49DjcOMAkP6Q/hD9UPyQ+9D
7EPoQ+RD4EPbQ9dD0kPOQ8lDw0O+Q7lDtEOwQ6tDpkOhQ51DmEOUQ5FDjkOMQ4tDikOJQ4pD
9kP0Q/FD7kPrQ+hD5EPgQ9xD2EPTQ89DykPFQ8BDu0O2Q7FDrEOnQ6JDnkOZQ5RDkUOOQ4tD
iUOIw4cBQ4hD8UPvQ+1D6kPnQ+RD4EPcQ9hD1EPQQ8tDxkPCQ7xDt0OyQ61DqEOkQ59DmkOW
Q5FDjkOLQ4hDhsOFAkOGQ+1D60PpQ+ZD40PgQ9xD2EPUQ9BDzEPIQ8NDvkO5Q7RDr0OqQ6VD
oEObQ5dDk0OOQ4pDiEOFQ4RDg0OCQ4NDhEPpQ+dD5UPiQ99D3EPYQ9VD0UPNQ8lDxEPAQ7tD
tkOxQ6xDp0OiQ51DmEOUQ49Di0OIQ4VDg0OBw4ABQ4FDg0PkQ+ND4UPeQ9xD2UPVQ9FDzkPK
Q8ZDwUO9Q7hDs0OuQ6lDpEOfQ5pDlkORQ41DiEOFQ4JDgEN/w34BQ39DgUPgQ99D3UPbQ9hD
1UPSQ85Dy0PHQ8NDv0O6Q7ZDsEOrQ6dDokOdQ5hDk0OOQ4pDhkODQ4BDfkN9Q3xDfUN+Q4BD
3UPbQ9lD10PVQ9JDz0PMQ8hDxEPAQ7xDuEO0Q65DqUOkQ59Dm0OWQ5FDjEOIQ4RDgUN+Q3zD
ewJDfUN/Q9lD2EPWQ9RD0kPQQ8xDyUPGQ8JDvkO6Q7ZDskOsQ6dDo0OeQ5lDlEOPQ4tDhkOC
Q39DfUN7w3oCQ3xDf0PWQ9VD00PSQ9BDzUPKQ8dDxEPBQ71DuUO1Q7BDq0OmQ6FDnEOXQ5ND
jkOJQ4VDgUN+Q3xDesN5AUN6Q3tDfkPTQ9JD0UPPQ85Dy0PJQ8ZDw0O/Q7xDuEO0Q69DqkOl
Q6BDm0OXQ5JDjUOIQ4RDgEN9Q3vDeQJDekN7Q35D0UPQQ89DzkPMQ8pDx0PFQ8JDvkO7Q7dD
s0OvQ6lDpUOgQ5tDlkORQ4xDiEOEQ4BDfUN7w3kCQ3pDfEN/Q89DzkPNQ8xDy0PJQ8ZDxEPB
Q75Du0O3Q7NDr0OpQ6VDoEObQ5ZDkUOMQ4hDhEOAQ31De8N5AkN6Q3xDgMPNAUPMQ8tDykPJ
Q8ZDxEPBQ75Du0O3Q7NDr0OqQ6VDoEOcQ5dDkkONQ4lDhUOAQ35De8N6AkN7Q31DgcPMAkPL
Q8pDyEPGQ8RDwkO/Q7tDuEO0Q7BDq0OmQ6FDnUOYQ5NDjkOKQ4ZDgUN/Q33DewJDfUN/Q4LD
zAJDy0PKQ8lDx0PFQ8NDwEO9Q7lDtUOxQ6xDqEOjQ55DmUOUQ5BDi0OHQ4NDgEN+w30CQ35D
gUOEw8wDQ8tDykPIQ8ZDxEPBQ75Du0O3Q7NDrkOqQ6VDoEObQ5ZDkkONQ4lDhUOCQ4DDfwJD
gUODQ4dDzMPNAkPMQ8tDykPIQ8ZDw0PBQ71DukO2Q7FDrEOnQ6NDnkOZQ5RDkEOMQ4dDhUOD
Q4JDgUOCQ4NDhUOJQ83DzgNDzUPMQ8pDyEPGQ8NDwEO8Q7hDs0OvQ6pDpUOgQ5xDl0OSQ45D
ikOIQ4ZDhUOEQ4VDhkOIQ4xDz8PQAUPRw9ABQ89DzUPLQ8lDxkPDQ8BDvEO3Q7JDrkOpQ6RD
n0OaQ5ZDkkOOQ4tDicOIAkOJQ4xDkEPRQ9LD0wND0kPQQ85DzEPKQ8dDw0O/Q7pDtkOxQ6xD
p0OjQ55DmUOVQ5FDj0ONQ4xDi0OMQ41Dj0OTQ9RD1cPWA0PVQ9RD0kPQQ81DykPHQ8NDvkO6
Q7VDsEOsQ6dDokOdQ5lDlUOTQ5FDkEOPQ5BDkUOTQ5dD10PYQ9nD2gJD2UPYQ9ZD1EPSQ89D
y0PIQ8NDvkO6Q7VDsEOrQ6ZDokOeQ5pDl0OVw5QCQ5VDl0ObQ9pD28PdAcPeAUPdQ9xD2kPZ
Q9ZD00PQQ8xDx0PDQ75DuUO1Q7BDq0OmQ6JDnkOcQ5rDmAJDmkOcQ59D3kPfQ+HD4gND4UPf
Q91D20PYQ9VD0UPMQ8hDw0O+Q7lDtUOwQ6tDp0OjQ6FDn8OdAkOeQ6BDpEPiQ+RD5UPmw+cB
Q+ZD5UPkQ+JD4EPdQ9pD1kPRQ81DyEPDQ79DukO1Q7BDrEOoQ6ZDpMOiAkOjQ6VDqUPnQ+hD
6sPrAUPsQ+tD6kPpQ+dD5UPiQ99D20PXQ9JDzkPJQ8RDv0O6Q7ZDskOuQ6tDqcOnAkOoQ6pD
rUPsQ+1D70Pww/EBw/ABQ+5D7UPqQ+hD5EPhQ9xD2EPTQ85DyUPEQ8BDu0O3Q7NDsEOuQ63D
rAFDrUOvQ7JD8UPzQ/RD9cP2AkP1Q/RD8kPwQ+1D6kPmQ+FD3UPYQ9RDz0PKQ8VDwUO9Q7hD
tkOzQ7JDscOyAUO0Q7dDAIH/gf+B/4H/gf+B/4H/gf+B/4H/gf+B/oD/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAAAAAAAYgWgAKIHQCI/4g3AIgeAIgegAGI
HYABiB2AAogcgASIGoAFiBqAB4gYgAmIFoAIiBeACIgBAIgUgAqIFYAJiBaACIgXgAeIGIAG
iB4AiB4AiB8AiFOABIgbgAGIHQCI/4gYAIgegAGIHYACiByAAogcgASIGoAFiBmAB4gYgAmI
FoAJiBaACYgWgAmIFoAJiBaACIgXgAeIGIAHiB4AiB4AiB4AiHSABIgagAOIG4ABiB0AiLoA
iB4AiB2AAYgdgAKIHIADiBuABIgagAWIGYAHiBeACogVgAmIFoAJiBaACYgWgAmIFoAJiBaA
CIgYgAaI9IAGiBiABIgagAOIG4ACiBwAiHuAAYgdgAGIHYABiByAAogcgAOIG4AEiBqABYgZ
gAeIF4AJiBaACYgWgAmIFoAJiBaACYgWgAmIF4AHiBxIuIABiP+IE4AHiBeABogYgAWIGYAD
iBuAAogbgAKIHIACiBuAAogcgAKIHIACiBuAA4gbgASIGoAEiBqABogYgAiIFoAKiBSACogV
gAqIFYAJiBaACYgXgAiIGIAHiP+IUoAGiBiAB4gXgAeIFoAHiBeABYgZgAWIGYAEiBqAA4gb
gAOIGoAEiBqABYgZgAaIGIAGiBiAB4gXgAiIFoALiBSACogVgAqIFoAIiBiAB4gagAWI/4hy
gAWIGYAFiBmABogXgAeIF4AHiBeABogYgAWIGYAFiBiABogYgAaIGIAGiBiABogYgAaIGIAH
iBeACIgXgAuIFYAJiBaACYgXgAiIGYAFiP+IkoADiBuABIgZgAWIGYAGiBiAB4gXgAaIGIAF
iBiABogYgAaIGIAGiBiABogXgAeIF4AHiBiABogagAWIGoAHSOiIGIAJiBeAB4gbgAOI/4iy
gAKIHIACiBuABIgagAWIGYAGiBiABogXgAaIGIAGiBiABogXgAaIGIAGiBiABogagAWIGoAE
iBuABIgcgASIHIAHiBuAA4j/iNKAAYgcgAKIHIADiBuAA4gbgASIGYAGiBiABogYgAaIF4AG
iBiABogZgAWIGoAEiByAAogdgAGIHwCIRACI4QCIHgCIHgCIvkP2Q/hD+cP7AUP8w/sBQ/lD
+EP1Q/ND70PsQ+dD40PeQ9lD1EPPQ8tDxkPCQ75Du0O5w7cCQ7hDuUO8Q/xD/YMGQ/1D+0P4
Q/VD8UPtQ+hD5EPfQ9pD1UPQQ8xDyEPEQ8FDvkO9w7wBQ71DvkPBgwpD/kP7Q/dD8kPuQ+lD
5EPgQ9tD1kPRQ81DyUPGQ8TDwgFDwUPCQ8RDxoMMQ/1D+EP0Q+9D6kPlQ+BD3EPXQ9NDz0PM
Q8lDyMPHAkPJQ8uDDUP9Q/lD9UPwQ+tD5kPhQ91D2UPUQ9FDz0PNw8wBQ81DzkPQgwGIBoMG
Q/pD9UPwQ+xD50PiQ95D2kPXQ9RD00PSQ9FD0kPTQ9WICoMFQ/tD9kPxQ+1D6EPkQ+BD3UPa
Q9jD1wJD2EPbiAyDBEP8Q/dD8kPuQ+pD5kPjQ+BD3sPdAkPeQ+CIDYMEQ/1D+UP0Q/BD7EPp
Q+ZD5cPjAkPkQ+aID4MEQ/tD90PyQ+9D7UPrQ+pD6cPqAUPsiBCDBEP+Q/lD9kP0Q/JD8cPw
AUPxQ/OIEoMEQ/5D+0P6w/gCQ/lD+ogTgwuIFYMJiBiDBojfAIgeAIgegAGIHYABiB4AiB8A
iB4AiHyBX0MAQwJDA8MEAUMFQwRDA0MCQwCBFUMGQwfDCQHDCgJDCUMIQwZDBEMBgRNDDEMN
Qw5DD8MQAUMPQw5DDUMLQwlDB0MEQwCBEUMRQxNDFMMVA0MUQxNDEUMPQwxDCUMGQwGBEEMX
QxjDGgHDGwHDGgFDGEMXQxRDEkMPQwtDB0MDgQ9DHUMeQx9DIMMhAUMgQx9DHkMcQxpDGEMV
QxFDDUMJQwRDAIENQyNDJEMlQybDJwFDJkMlQyRDIkMgQx5DG0MXQxNDD0MLQwZDAoEMQylD
KkMrQyzDLQFDLEMrQypDKEMmQyRDIUMeQxlDFUMRQw1DCEMEQwCBCkMvQzBDMUMywzMBQzJD
MUMwQy9DLUMqQydDJEMgQxxDGEMTQw9DC0MGQwKBCUM1QzZDN0M4wzkBQzhDN0M2QzVDM0Mw
Qy5DK0MmQyNDH0MaQxZDEkMOQwpDBkMCQwCBBkM7QzxDPcM+AUM/wz4BQzxDO0M5QzdDNEMx
Qy1DKUMlQyFDHUMZQxVDEUMOQwpDCEMGQwTDAwJDBEMGQ0BDQkNDw0QDQ0NDQkNBQz9DPUM7
QzhDNEMwQyxDKUMlRiFGHUYZQxZDEkMQQw5DDMMLAkMMQw5DRkNHQ0hDScNKAkNJQ0hDR0NF
Q0NDQUM+QzpDN0MzQzBGLEYoRiRGIUYeQxpDGEMWQxXDFAJDFUMWQ0tDTENNQ07DTwNDTkNN
Q0tDSUNHQ0RDQUM+QzpDN0YzRjBGLEYpRiZGI0MgQx/DHQFDHMMdAUMfQ09DUUNSw1MBw1QC
Q1NDUkNRQ09DTUNLQ0dDRENBQz5GOkY3RjRGMUYuRitDKUMnQybDJQHDJgFDKENTQ1VDVkNX
w1gEQ1dDVkNUQ1JDUENNQ0tDSENFRkFGPkY7RjhGNkYzQzFDMEMvwy4CQy9DMUNXQ1hDWkNb
w1wBQ13DXAFDW0NaQ1lDWENWQ1NDUUNOQ0tDSEZFRkNGQEY+QztDOUM4wzcDQzhDOkNaQ1tD
XUNew18Bw2ACw18BQ15DXENbQ1hDVkNUQ1FDT0ZMRklGR0ZFQ0NDQcNAAUM/w0ABQ0FDQkNc
Q15DX0NgQ2FDYsNjA0NiQ2FDYENfQ11DW0NZQ1dDVENSRlBGTkNMQ0pDScNIA8NJAUNLQ15D
X0NhQ2JDY0Nkw2UBw2YBw2UBQ2RDY0NhQ19DXkNcQ1pDWEZWRlRDU0NRw1AEQ1FDUkNTQ19D
YENiQ2NDZENlQ2bDZwVDZkNlQ2NDYkNgQ19DXUZcRlpDWUNYw1cDw1gBQ1lDW0NfQ2BDYkNj
Q2RDZkNnw2gBw2kDQ2hDZ0NmQ2VDZENjQ2JGYUNgQ1/DXgFDXcNeAUNfQ2BDYUNiQ15DX0Nh
Q2JDZENlQ2fDaAFDacNqA8NpAUNoQ2fDZgFGZcNkAcNjAsNkAUNlQ2ZDaENpQ1xDXkNfQ2FD
YkNkQ2ZDZ0NoQ2nDagHDawPDagHDaQHDaATDaQFDakNrQ2xDbkNwQ1lDW0NdQ15DYENiQ2RD
ZUNmQ2hDacNqAcNrCcNsAUNtQ25Db0NwQ3JDc0N1Q1ZDWENZQ1tDXUNfQ2FDY0NkQ2ZDZ0No
Q2lDasNrAcNsAcNtAsNuAUNvQ3BDcUNyQ3NDdUN2Q3hDekNSQ1NDVUNXQ1lDW0NdQ19DYUNj
Q2RDZkNnQ2hDasNrAUNsQ23DbgFDb0NwQ3FDc0N0Q3VDd0N5Q3pDfEN+Q01DTkNQQ1JDVENW
Q1lDW0NdQ19DYUNjQ2RDZkNoQ2lDakNrQ21DbkNvQ3BDcUNzQ3VDdkN4Q3pDe0N9Q39DgkNH
Q0lDSkNMQ09DUUNUQ1ZDWENaQ11DX0NhQ2NDZUNnQ2hDakNrQ21DbkNwQ3JDdEN2Q3hDeUN8
Q35DgEOCQ4SB/4H/gf+B/4H/gf+B/4H/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/AP//AP//AP//Af/5gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//
j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//
j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//
AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAA
AAAAAAAAAAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAA
AAAAAAAAAAGA/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAA
AAAAAAABgP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAA
AAAAAYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAP8AAP8AAP8A
AfmI1IAHiBiAB4gBAIgUgAgIAIgVgAqIFYAKiByAA4gbgAOIG4AEiBqABYgagASIG4AEiBqA
BYgagAWIGoAFiBmABogZgAaIGIAHiBeACYgVgAiIFoAIiBaACIgNAIgHgAiIDABIv4gGgAmI
C4ABiAWAC4gLAIgEgA2ICoABiPqACAgAiBSACogVgAcIgAGIHYACiByAA4gbgAOIG4AEiBqA
BYgagAWIGoAEiBqABYgagAWIGoAFiBmABogZgAWIGYAGSLSIF4AIiBaACIgWgAiIFoAHiA6A
AogFgAeIDgCIBoAIiA0AiAWACogMAIgEgAyIDACI/4gBgAEIAIgUgAeIAQCIHoABiB2AAogc
gAOIG4ADiBuABIgagAWIGoAFiBqABIgagAWIGoAFiBqABYgZgAaIGYAFiBmABogYgAeIF4AH
iBiABogPgAKIBIAHiA+AAogEgAaID4ABiAWAB4gOgAGIBIAJiA4AiAOAC4gNgAGI/4gDAIge
AIgegAGIHYACiByAA4gbgAOIG4AEiBqABYgagAWIGYAFiBqABYgagAWIGoAFiBmABogZgAWI
GYAGiBiAB4gXgAaIGYAFiBCAAogEgAaIEIACiASABYgQgAKIBIAGiBAAiASACIgPAIgDgAqI
DwCI/4gDAIgeAIgegAGIHYACiByAA4gbgAOIG4AEiBqABYgagAWIGYAFiBqABYgagAWIGYAG
iBmABogZgAWIGYAGiBiABogYgAWIEYACiAWABIgRgAKIBIAEiBGAA4gEgASIEYADiAOABYgR
gAGIA4AGiBGAAYgCgAiIEYABiP+IAgCIHoABiB4AiB6AAYgdgAKIHIACiByAA4gbgASIGoAF
iBqABIgagAWIGoAFiBmABogZgAaIGIAGiBmABogYgASIGoADiBKAA4gFgAGIE4ADiASAAYgU
gAOIBACIFIAEiBqABIgagAKIBQCIFYABiP+IZACIHoABiB4AiB6AAYgdgAKIHIADiByAAogc
gAOIHIADiBuABIgbgASIHEhEAIhwgAGIHYAEiBqABIgagASIGoAEiBqABIgagAOI/4ikAIg/
AIgfAIgegAGIHgBIXYgeAIggAIitgAKIHYAFiBmABYgZgAWIGYAFiBmABYgZgAWI/4j/iP+I
OgCIHIAEiBqABogYgAaIGIAGiBmABYgZgAWI/4j/iP+IWIADiBqABogYgAeIF4AHiBiABogY
gAZDhkOOQ5ZDn0OoQ7JDvEPHQ9FD20PlQ+9D+IMCiA9Dg0OLQ5NDnEOlQ65DuEPEQ85D10Ph
Q+tD9EP9gwGID0OBQ4lDkUOZQ6JDq0O1Q8BDykPUQ95D50PwQ/mDAogOQ4BDh0OPQ5dDoEOp
Q7JDvkPHQ9FD2kPkQ+1D9UP+gwKIDUOAQ4dDjkOWQ55Dp0OwQ7tDxUPOQ9dD4UPpQ/JD+oMC
iA1DgEOGQ45DlUOeQ6ZDr0O6Q8NDzEPVQ95D50PvQ/dD/oMCiAxDgUOHQ45DlUOdQ6ZDrkO4
Q8FDykPTQ9xD5EPsQ/RD+4MDiAoDQ4JDiEOPQ5ZDnkOlQ65DuEPAQ8lD0kPaQ+JD6kPyQ/mD
BIgIgwFDhUOKQ5FDl0OfQ6ZDrkO4Q8BDyEPQQ9lD4EPoQ+9D9kP+gwSIBYMDQ4hDjUOTQ5lD
oEOnQ69DuEPAQ8hD0EPYQ99D50PuQ/RD/IMFiAKDBUOLQ5BDlUOcQ6JDqUOwQ7lDwEPIQ9BD
10PeQ+VD7EPzQ/qDDkOPQ5RDmUOeQ6VDq0OyQ7pDwUPJQ9BD10PeQ+VD60PxQ/hD/YMMQ/5D
k0OYQ51DokOoQ65DtEO8Q8NDykPQQ9dD3kPkQ+pD8EP2Q/uDC0P+Q/pDmEOcQ6FDpkOrQ7FD
t0O+Q8RDy0PRQ9hD3kPkQ+pD70P1Q/pD/oMKQ/tD90OeQ6FDpUOqQ69DtEO6Q8FDx0PNQ9ND
2UPfQ+RD6kPvQ/RD+EP8gwlD+0P4Q/NDo0OmQ6pDrkOzQ7hDvUPDQ8lDz0PUQ9pD30PlQ+pD
7kP0Q/hD+0P+gwdD/EP4Q/RD8EOpQ6xDr0OzQ7dDvEPAQ8ZDzEPRQ9ZD20PhQ+VD6kPvQ/ND
90P6Q/2DBUP+Q/xD+UP1Q/FD7UOvQ7FDtEO4Q7xDwEPEQ8pDz0PTQ9hD3UPiQ+ZD60PvQ/ND
90P5Q/xD/oMDQ/5D/EP5Q/ZD80PvQ+pDtUO3Q7pDvUPAQ8RDyEPNQ9JD1kPbQ99D5EPoQ+xD
70P0Q/ZD+UP7Q/3D/gJD/UP8Q/pD90P0Q/BD7EPoQ7tDvUO/Q8JDxUPIQ8xD0UPVQ9lD3UPh
Q+VD6UPtQ/BD9EP3Q/lD+0P8w/0CQ/xD+kP4Q/VD8kPuQ+pD5UPBQ8NDxUPHQ8pDzUPQQ9VD
2EPcQ+BD5EPnQ+tD7kPxQ/VD90P5Q/pD+8P8AkP6Q/lD9kP0Q/BD7EPoQ+NDx0PIQ8pDzEPP
Q9FD1EPYQ9xD30PjQ+ZD6UPtQ/BD8kP1Q/dD+UP6Q/tD/MP7AUP5Q/dD9UPyQ+9D60PmQ+JD
zUPOQ89D0UPTQ9ZD2UPcQ99D4kPlQ+lD7EPuQ/FD9EP2Q/hD+sP7A0P6Q/hD9kP0Q/FD7UPp
Q+VD4EPSQ9ND1EPWQ9hD2kPdQ+BD40PlQ+hD60PuQ/BD80P1Q/dD+UP6w/sDQ/pD+EP2Q/ND
8EPsQ+hD5EPfw9gBQ9lD20PcQ95D4UPjQ+ZD6EPrQ+5D8EPyQ/VD90P5Q/rD+wFD/MP7AUP5
Q/dD9UPyQ+9D60PnQ+ND3sPdAUPeQ99D4UPiQ+RD50PpQ+xD7kPwQ/JD9EP2Q/hD+kP7w/wC
w/sBQ/lD90P1Q/JD70PrQ+dD4kPdw+IBQ+ND5EPlQ+dD6EPrQ+1D70PxQ/ND9UP3Q/hD+kP7
w/wBQ/3D/AFD+0P5Q/dD9EPxQ+5D6kPmQ+FD3MPnAkPoQ+lD6kPsQ+5D8EPyQ/ND9UP3Q/lD
+kP7Q/zD/QND/EP7Q/lD90P0Q/FD7kPqQ+ZD4UPcw+sBw+wBQ+1D7kPwQ/FD80P1Q/ZD+EP5
Q/tD/EP9w/4EQ/1D+0P6Q/dD9EPxQ+1D6UPlQ+BD28PwAsPxAUPyQ/ND9UP2Q/hD+UP6Q/xD
/UP+gwRD/kP9Q/xD+kP3Q/RD8UPtQ+lD5UPgQ9vD9QPD9gFD90P4Q/pD+0P8Q/1D/oMHQ/5D
/EP6Q/dD9EPxQ+1D6UPkQ99D2sP6BUP7Q/xD/UP+gwpD/kP8Q/pD90P0Q/FD7UPpQ+RD30Pa
gQxDBEMNQxRDHUMjQylDLUMxQzVDN0M5wzoBQzlDOEM1QzNDL0MrgQxDAEMJQxBDGUMfQyRD
KUMtQzFDM0M1wzYBQzVDNEMyQy9DK0MngQ1DBUMMQxVDG0MgQyVDKUMtQy9DMcMyAUMxQzBD
LUMrQydDI4ENQwFDCUMRQxdDHEMhQyVDKUMrQy3DLgFDLUMsQylDJkMjQx+BDkMFQw1DE0MZ
Qx1DIUMlQydDKcMqAUMpQydDJUMiQx9DG4EOQwJDCkMQQxVDGkMdQyFDI0MlwyYBQyVDI0Mh
Qx5DGkMWgQ9DB0MMQxFDFkMaQx1DH8MhAkMgQx9DHEMZQxZDEoEPQwRDCUMOQxJDFkMZQxvD
HQJDHEMbQxhDFUMSQw2BD0MBQwZDC0MPQxNDFUMYwxkCQxhDFkMUQxFDDUMJgRBDBEMIQwxD
D0MSQxRDFUMWQxVDFEMSQxBDDUMJQwWBEEMBQwZDCUMMQw9DEcMSAUMRQxBDDkMMQwhDBUMA
gRBDAEMDQwdDCkMMQw3DDgJDDEMKQwhDBEMAgRJDAUMEQwdDCUMKwwsBQwpDCUMGQwRDAIET
QwBDAkMEQwZDB8MIAUMHQwVDA0MAgRVDAEMCQwTDBQJDBEMCQwCBF0MAwwIBQwNDAkMBgRrD
AAOB/4GVwwABgRnDAALDAQHDAAKBDMMAAYECwwACwwEBwwICwwMBwwIBQwFDAIH/gf+B/4H/
gf+B/4H/gf+BDID/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAA
AAAAAYANiAqAAYgEgA6ICIACiASACogMgAOIA4AIiA6ABIgCgAeID4AFiAGABogQgAYIgASI
EoAIiBaAB4gXgAeIGIAGiBmABYgagASIHIACiB2AAYj/iN4AiB0AiB0AiAEAiBmAAogBgAyI
DACIBIALiAyAAogDgAmIDoACiAOACIgPgAOIAoAGiBGABIgBgAWIEoAFCIADiBSAB0gAiBaA
BogXgAeIGIAGiBmABYgagASIHIACiB2AAYj/iP8AiDoAiAKAC4gNAIgEgAqIDoABiAOACYgP
gAGIA4AHiBCAA4gCgAWIEoAEiAGABIgTgAUIgAKIFYAGiBiABogYgAaIGIAGiBmABYgagASI
HIACiB2AAYj/iP+IP4AKiA6AAYgDgAqIDoABiAOACIgQgAGIA4AGiBKAAogCgAWIE4ADiAGA
A4gVgAeIF4AFiBmABYgZgAWIGYAFiBmABYgagASIHIACiB2AAYj/iN+AAohcgAiIEQCIA4AI
iBCAAYgDgAiIEIACiAKABogSgAKIAoAFiBOABAiAA4gVgAaIGIAFiBmABYgZgAWIGYAFiBmA
BYgagASIG4ADiB2AAYj/iL+AAogfgAGIHwCIHwCIG4ACiBSAAYgFgAKIE4ACiAWAAogTgAKI
BIADiBOAA4gDgAOIE4AEiAKAAYgVgAWIGYAFiBmABYgZgAWIGYAFiBmABYgagASIG4ADiB2A
AYj/iH8AiB6AA4gbgASIHoACiB2AAogdgAGIMYADiBuAA4gbgAOIG4AEiBqABYgZgAWIGYAF
iBmABYgZgAWIGYAFiBmABYgZgAWIG4ADiB2AAYgeAIj/iD+AAYgdgAOIG4AFiBmABogbgASI
HIADiByAAogwgAWIGYAFiBmABYgZgAWIGYAFiBmABYgZgAWIGYAFiBmABYgZgAWIGYAFiBmA
BYgagASIHIACiB4AiP+AAYgdgAOIG4AFiBmABogYgAZIr4gXgAeIGoAFiBuABIgbgAOIL4AF
iBmABYgZgAWIGYAFiBmABYgZgAWIGYAFiBmABYgZgAWIGIAGiBiABogYgAaIGoAEiByAAoge
AIj/gAOIG4AFiBmABogYgAeIF4AIiBaACIgYgAeIGYAFiBqABYgtgAaIGIAGiBiABogYgAaI
GIAGiBiABogYgAaIGIAGiBiABogYgAaIGIAGiBiABogZgAWIG4ADiB2AAYj/gAKIHIAEiBqA
BogYgAeIGIAHiBmABogZgAaIGYAFiBmABYgUgxVD/UP7Q/dD9EPxQ+1D6UPkQ99D2oMVQ/5D
/EP4Q/VD8UPtQ+lD5EPfQ9qDFkP9Q/lD9UPyQ+1D6UPkQ99D2oMWQ/5D+kP2Q/JD7kPqQ+VD
4EPaiAWDEUP7Q/hD80PvQ+pD5kPgQ9uIDoMIQ/1D+UP1Q/BD7EPnQ+FD3IgQgwdD+0P3Q/JD
7UPoQ+ND3YgSgwVD/UP4Q/RD70PqQ+RD34gTgwVD+0P2Q/FD7EPmQ+CIFIMEQ/1D+EPzQ+5D
6EPjiBWDBEP7Q/ZD8EPrQ+WIFoMDQ/5D+UPzQ+1D6IgXgwND/EP2Q/BD64gXgwRD+UP0Q+6I
GIMDQ/1D90PxiBmDA0P7Q/WIGoMDQ/mIGoMDQ/2IG4MDiByDAogdgwGIHYMBiB4DgAGIHYAE
iBqABYgbgASIG4AEiBuABIgbgASIGoAFiBqABIgUQwXDBAJDA8MEA8MFBcMEAUMDQwFDAIEL
QwtDCsMJAcMICcMHAUMGQwRDA0MBQwCBCkMRQxBDD8MOAcMNA8MMAsMLAUMKQwlDCEMHQwVD
A0MBgQpDF0MWQxVDFMMTAcMSAcMRAcMQAUMPQw5DDUMMQwtDCUMHQwVDAkMAgQlDHkMcQxtD
GsMZAUMYQxfDFgFDFUMUQxNDEkMRQxBDDkMMQwpDB0MEQwGBCUMlQyNDIkMhQyBDH0MeQx1D
HEMbQxpDGUMYQxZDFUMTQxFDD0MMQwpDB0MEQwCBCEMsQytDKUMoQydDJUMkQyNDIkMhQx9D
HkMcQxtDGUMXQxVDEkMPQw1DCUMGQwKBCEM0QzJDMEMvQy5DLEMrQylDKEMmQyVDI0MiQyBD
HkMbQxlDFkMTQxBDDEMJQwVDAYEHQzxDOkM4QzZDNUMzQzJDMEMuQy1DK0MpQydDJUMjQyBD
HUMaQxdDE0MQQwxDCEMEgQdDQ0NBQ0BDPkM8QzpDOUM3QzVDM0MxQy9DLUMqQyhDJUMhQx5D
G0MXQxNDD0MLQwdDAYEGQ0tDSUNHQ0VDQ0NCQ0BDPUM7QzlDN0M1QzJDMEMtQypDJkMjQx9D
G0MXQxNDD0MKQwRDAIEFQ1NDUUNPQ01DS0NJQ0dDRENCQ0BDPkM7QzhDNUMyQy9DK0MoQyRD
IEMbQxdDEkMOQwhDAoEFQ1tDWUNWQ1RDUkNQQ05DS0NJQ0dDRENBQz5DO0M4QzVDMEMtQylD
JEMgQxtDFkMRQwtDBkMAgQRDYkNgQ15DXENaQ1dDVUNSQ1BDTUNKQ0hDRUNBQz5DOkM2QzJD
LUMpQyRDIEMbQxZDD0MKQwSBBENpQ2dDZUNjQ2FDXkNcQ1lDVkNUQ1FDTkNLQ0dDRENAQztD
N0MzQy5DKUMkQx9DGkMTQw5DCEMCgQNDcENuQ2xDakNnQ2VDY0NgQ11DWkNXQ1RDUUNNQ0pD
RkNBQzxDOEMzQy5DKUMkQx5DGEMSQwxDBkMAgQJDd0N0Q3JDcENuQ2xDaUNmQ2NDYENdQ1pD
V0NTQ09DS0NGQ0JDPUM4QzNDLkMoQyNDHEMWQxBDCkMEgQJDfEN6Q3hDdkN0Q3JDb0NsQ2lD
ZkNjQ2BDXUNZQ1VDUUNMQ0dDQkM9QzhDM0MtQyhDIUMbQxVDD0MJQwOBAUOCQ4BDfkN8Q3pD
d0N1Q3JDb0NsQ2lDZkNiQ19DW0NWQ1FDTENHQ0JDPUM4QzJDLEMlQx9DGUMTQw1DB0MBAUOG
Q4VDg0OBQ39DfEN6Q3dDdENyQ25Da0NoQ2RDYENcQ1ZDUkNNQ0hDQkM9QzdDMUMqQyRDHkMY
QxJDDEMFQwBDi0OJQ4dDhUODQ4FDf0N8Q3lDd0N0Q3BDbUNpQ2VDYUNbQ1dDUkNNQ0dDQkM8
QzZDL0MpQyNDHUMWQxBDCkMEQ45DjEOLQ4lDh0OFQ4NDgEN+Q3tDeEN1Q3JDbkNqQ2ZDYENc
Q1dDUkNMQ0dDQUM7QzRDLkMoQyFDG0MVQw9DCEORQ49DjkOMQ4tDiUOHQ4RDgkN/Q31DeUN2
Q3JDb0NqQ2VDYENcQ1ZDUUNLQ0ZDQEM5QzNDLEMmQyBDGkMTQw1Dk0ORQ5BDj0ONQ4xDikOI
Q4VDg0OAQ31DekN3Q3NDb0NqQ2VDYENbQ1ZDUENLQ0VDPUM3QzFDK0MlQx5DGEMSQ5RDk0OS
Q5FDkEOOQ41Di0OIQ4ZDhEOBQ35DekN3Q3NDbkNpQ2VDX0NaQ1VDT0NJQ0JDPEM2QzBDKUMj
Qx1DF0OVQ5RDk0OSQ5FDkEOPQ41Di0OJQ4dDhEOBQ35DekN3Q3JDbUNpQ2RDX0NZQ1RDTkNH
Q0FDO0M0Qy5DKEMiQxvDlAHDkwFDkkORQ5BDjkONQ4tDiUOHQ4RDgUN+Q3pDdUNxQ21DaENj
Q11DWENSQ0tDRUM/QzlDM0MsQyZDIEOUw5MCw5IBQ5FDkEOOQ41Di0OJQ4ZDhEOAQ31DeUN0
Q3BDa0NmQ2FDXENWQ09DSUNDQz1DN0MxQytDJMOSBUORQ5BDj0OOQ4xDikOIQ4ZDg0OAQ3tD
eENzQ29DakNlQ2BDWkNTQ01DR0NBQztDNUMvQynDkAHDkQTDkAFDj0ONQ4xDikOHQ4VDgkN+
Q3pDdkNyQ21DaENjQ15DV0NRQ0tDRUM/QzlDM0MtQ41DjsOPAcOQA8OPAUOOQ4xDi0OJQ4ZD
hEOAQ31DeUN1Q3BDa0NmQ2FDW0NVQ09DSUNDQz1DN0MxQ4pDi0OMQ43DjgHDjwLDjgFDjUOL
Q4pDiEOFQ4JDf0N7Q3dDc0NuQ2lDZENeQ1hDU0NNQ0dDQUM7QzSB/4H/gf+B/4H/gf+B/4H/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/AAAAAAAAAAAAAAABAIgYgAOI
GoAEiBmABYgIAIgOgAaICIABiAyAB4gJgAGICYAJiAmAA4gGgAmIC4ACiAaACIgMgAOIBYAH
iA2AA0hBiAWABYgPgAOIBUgAgAKIEYADiAaAAYgSgAOIG4ADiBuAAkjliBuAAogcgAKIG4AD
iBuAA4gbgAKIG4ADiBuABIgZgAWIGYAFiBmABYgZgASIGoAEiBqAA4gaSE6AA4gagASID4AE
iAWAA4gPgAWIBoACiA6ABogZgAKIG4ADiAkAiA+ABIgKAIgNgAWICoABiAuABogKgAKICIAI
iAuAA4gEgAqIC4ASiA2AEIgOgA+ID4AFiAKABIgSgAOIBIACiBOAA4gbgAKIHIACiBuAA4gb
gAOIG4ACiBuAA4gbgAKIHIADiBqABIgagASIGoAEiBmABYgZgAWIGYAEiBqABIgagAOID4AE
iAaAA4gOgAWIBoADiA6ABYgGgAKIDoAGiBoAiByAAogLAIgOgAOIC4ABiAyABIgMgAGICoAF
iAyAAogHgAeIDIAEiAOACYgNgBGIDYAQiA6AD4gQgA2IEYALiBOABIgDgAGIFIADiBuAA4gb
gAKIG4ADiBuAAogcgAKIG4ADiBuAA4gbgAOIGoAEiBqABIgagASIGoAEiBqAA4gbgAOID4AD
iAeAA4gOgASIB4ACiA6ABYgHgAKIDoAFiAeAAogNgAaIOQCIDACID4ABiA0AiA2AAogNgAGI
CoAEiA2AA4gHgAWIDoAEiAOAB4gOgBGIDYARiA6AD4gPgA2IEYAMiBKACogUgASIGoADiBuA
A4gbgAOIGoADiBuAA4gbgAOIGoAEiBqABIgZgAWIGYAFiBmABYgZgASIGoAEiA6AA4gHgAOI
D4ADiAeAA4gOgASIB4ACiA6ABYgHgAKIDoAFiAeAAogNgAaIBgCIHwCIEACIDIABiA6AAYgN
gAGIDIACiA2AAogKgAOIDYADiAeABYgOgASIA4AHiA6AEIgOSGaAEIgOgA+ID4AOiBCADYgR
gAuIE4AFiAKAAYgUgASIGoADiBuAA4gbgAKIG4ADiBuAA4gagASIGoAEiBqABIgZgAWIGYAF
iBmABIgRAIgHgASIDoADiAeAA4gPgAOIB4ADiA6ABIgHgAOIDYAFiAeAAogOgAWIB4ACiA2A
BogGgAGIHoABiB2AAogOAIgNgAKIDIABiA2AA4gJgAOIDYAEiAeABIgOgAWIA4AGiA6AEIgO
gBCID4AQiA6AD4gPgA1IdYgQgAyIEoAFSH2IAYACiBOABIgagAOIG4ADiBuAAogbgAOIG4AD
iBqABIgagASIGoAEiBmABYgZgAWIEACIB4AEiA+AAogHgASIDoADiAeAA4gPgAOIB4ADiA6A
BIgHgAOIDYAFiAeAAogOgAWIB4ACiBuAAogdgAKIHIACiA4AiA2AAogMgAGIDYADiAqAAogN
gASICIADiA6ABYgEgAWIDoAQiA6AEIgPgBCIDoAQiA6ADogQgA2IEYAFiAKAA4gSgASIBQCI
E4ADiBuAA4gbgAKIG4ADiBuAA4gagASIGoADiBuAA4gagASIGoAEiA+AAogHgASID4ACiAeA
BIgOgAOIB4ADiA+AA4gHgAOIDoAEiAeAA4gNgAWIB4ACiByAAogbgAOIG4ADiByAA4gbgASI
DACIDYADiAuAAYgNgASICYACiA2ABogFgASIDoAQiA6AEYgNgBGIDoARiA2AD0itiA6ADogQ
gAWIAoAEiBGABIgFgAGIEoADiBuAAogbgAOIG4ADiBuAA4gagAOIG4ADiBuAA4gagASID4AC
iAeABIgPgAKIBoAFiA+AAogGgAWIDoADiAaABIgPgAOIBoAEiA6ABIgGgAOIG4ACiB2AAYgb
gASIG4AEiBqABIgbgASIDQCIC4AFiAuAAYgMgAWICIADiAyABogGgASIDIAIiAGAB4gNgBGI
DYASiAyAEogNgBGIDYAQiA6ABIgEgASIEIADiAeAAogQgAOICACIEYACiBuAA4gbgAKIHIAC
iBuAA4gbgAOIDgCIC4ADiA+AAogHgASID4ACiAeABIgPgAKIBoAFiA+AAogGgASID4ADiAaA
AogRgAOIBoABiBUAiAaAAYgdAIgeAIgdgAWIGYAFiBqABYgZgAWIGoAFiAwAiAuABogKgAGI
C4AHiAeAA4gMgAeIBIAFiAyAE4gMgBKIDIATiAuAFIgKgAWIA4AIiA2AA4gGgAWIDoACiAiA
A4gPgAKICYACiA6AA4gKAIgPgAKIHIACiByAAogbgAKID4ADiAiAAogQgAKIB4ADiBCAAogH
gAOIEIACiAaABIgQgAKIBoACiBKAAogFgAKIEoADiAUASJGIFYABiAUAiB4AiB4AiD6ABYga
gAWIGYAFiBmABogZgAWIDQCICoAGiAqAAogLgAaICIADiAuAB4gFgAWIC4AJiAGAB4gLgBSI
CkingBSICoAFiAOACogKgASIBYAKiAmAA4gIgAeICoADiAmABIgMgAKIC4ACSHGIDIACiAyA
AYgNgAKIDYABiAyAAYgOgAKICoACiA+AA4gIgAKIEIACiAiAAogQgAKIB4ADiBCAAogHgAOI
EIACiAaAAYgTgAKIBgCIFIACiAUAiBSAAwOIAwCIGQOIHgOIHgOIHoMBiB1Dh0OIQ4lDikOL
Q4zDjQHDjgHDjQFDjEOKQ4hDhkODQ4BDfUN5Q3VDcUNsQ2dDYUNbQ1ZDUENKQ0RDPkM4Q4JD
hEOFQ4dDiEOKQ4vDjARDi0OKQ4lDh0OEQ4JDfkN7Q3dDc0NuQ2pDY0NeQ1lDU0NNQ0dDQUM7
Q35DgEOCQ4NDhUOHQ4hDiUOKw4sDQ4pDiUOHQ4VDgkOAQ3xDeUN1Q3BDbENmQ2FDW0NWQ1BD
SkNEQz5DeUN7Q31Df0OBQ4NDhUOHQ4hDicOKA0OJQ4dDhUODQ4BDfUN6Q3ZDckNuQ2hDY0Nd
Q1hDUkNMQ0dDQUN0Q3dDeUN7Q35DgEOCQ4RDhkOHQ4jDiQJDiEOHQ4VDg0OBQ35De0N3Q3ND
b0NqQ2VDX0NaQ1RDT0NJQ0NDb0NyQ3RDd0N6Q3xDf0OBQ4NDhUOGw4cDQ4ZDhUODQ4FDf0N8
Q3hDdUNwQ2tDZkNhQ1xDVkNRQ0tDRUNqQ21DcENzQ3ZDeEN7Q35DgEOCQ4NDhcOGA0OEQ4ND
gUN/Q3xDeUN1Q3FDbENnQ2JDXUNYQ1JDTENGQ2VDaENrQ25DcUN0Q3dDekN9Q39DgUOCw4QB
Q4XDhAFDgkOBQ39DfEN5Q3ZDckNtQ2hDY0NeQ1lDU0NOQ0hDYENjQ2ZDakNtQ3BDc0N3Q3pD
fEN+Q4BDgUOCw4MCQ4JDgEN+Q3xDeUN2Q3JDbUNpQ2RDX0NaQ1RDT0NJQ1pDXkNhQ2VDaUNs
Q3BDc0N2Q3lDfEN+Q39DgEOBQ4LDgQFDf0N+Q3xDeUN2Q3JDbkNpQ2VDYENaQ1VDT0NKQ1VD
WUNdQ2FDZENoQ2xDcENzQ3ZDeUN7Q31DfkN/w4ABQ39DfkN9Q3tDeEN2Q3JDbkNpQ2VDYENb
Q1ZDUENKQ1BDVENYQ1xDYENkQ2hDbENwQ3NDdkN4Q3pDfEN9w34CQ31DfEN6Q3hDdUNyQ21D
aUNlQ2BDW0NWQ1BDS0NMQ1BDVENYQ1xDYENkQ2lDbENwQ3NDdkN4Q3pDe0N8w30BQ3xDe0N5
Q3dDdUNxQ21DaUNlQ2BDW0NWQ1BDS0NHQ0tDT0NTQ1hDXENgQ2VDaUNtQ3BDc0N1Q3hDeUN6
w3sCQ3pDeEN2Q3RDcUNtQ2lDZUNgQ1tDVkNQQ0tDQkNGQ0tDT0NUQ1hDXUNiQ2ZDakNtQ3BD
c0N1Q3dDeEN5Q3rDeQFDd0N1Q3NDcENsQ2hDZENgQ1tDVkNQQ0tDPUNCQ0ZDS0NQQ1RDWUNe
Q2JDZkNqQ21DcENzQ3VDdsN4AkN3Q3ZDdUNyQ3BDbENoQ2RDX0NbQ1ZDUENLQzlDPUNCQ0dD
TENQQ1VDW0NfQ2NDZ0NrQ25DcUNzQ3VDdsN3AUN2Q3VDdENyQ29Da0NoQ2RDX0NbQ1VDUENL
QzRDOUM+Q0JDSENNQ1FDV0NcQ2BDZENoQ2tDbkNxQ3NDdMN1AkN0Q3NDcUNuQ2tDZ0NjQ19D
WkNVQ1BDS0MwQzRDOUM+Q0RDSUNOQ1RDWUNdQ2FDZUNpQ2xDb0NxQ3PDdAJDc0NyQ3BDbkNq
Q2dDY0NfQ1pDVUNQQ0tDK0MwQzVDOkNAQ0VDSkNRQ1ZDWkNfQ2NDZ0NqQ21Db0NxQ3LDcwFD
ckNxQ3BDbUNqQ2dDY0NfQ1pDVkNQQ0tDJ0MsQzFDN0M8Q0JDR0NNQ1NDV0NcQ2BDZENoQ2tD
bUNwQ3HDcgFDcUNwQ29DbUNqQ2dDY0NfQ1pDVkNRQ0tDI0MoQy1DM0M5Qz5DRENKQ1BDVUNa
Q15DYkNmQ2lDbENuw3ABw3EBQ3BDbkNsQ2lDZkNjQ19DWkNWQ1FDTEMfQyRDKkMvQzVDO0NB
Q0dDTUNSQ1dDXENgQ2RDZ0NqQ21DbkNvw3ABQ29DbkNsQ2lDZkNjQ19DW0NWQ1FDTEMcQyFD
JkMsQzJDOEM+Q0VDSkNQQ1VDWkNeQ2JDZUNoQ2tDbUNuw28BQ25DbUNrQ2lDZkNiQ19DW0NW
Q1FDTEMYQx5DI0MpQy9DNUM7Q0JDSENNQ1NDWENcQ2BDZENnQ2pDbENtw24BQ21DbENrQ2hD
ZUNiQ19DW0NWQ1JDTUMVQxtDIUMnQy1DM0M5Q0BDRkNLQ1FDVkNaQ15DYkNlQ2hDakNsw20B
w2wBQ2pDaENlQ2JDXkNbQ1ZDUkNNQxNDGEMeQyRDKkMwQzdDPkNEQ0lDT0NUQ1hDXUNgQ2RD
Z0NpQ2pDa0Nsw2sBQ2lDZ0NlQ2JDXkNaQ1ZDUkNNQxFDFkMcQyJDKEMvQzVDPENCQ0hDTUNS
Q1dDW0NfQ2JDZUNoQ2lDakNrw2oBQ2hDZkNkQ2FDXkNaQ1ZDUkNNQw9DFEMaQyBDJ0MtQzND
OkNAQ0ZDS0NQQ1VDWUNdQ2FDZENmQ2jDaQNDZ0NlQ2NDYENdQ1pDVkNSQ01DDUMTQxlDH0Ml
QyxDMkM5Qz9DRUNKQ09DVENYQ1xDX0NiQ2VDZkNnw2gBQ2dDZkNkQ2JDX0NcQ1lDVUNRQ01G
REMSQxhDHkMkQypDMUM4Qz5DQ0NJQ05DUkNXQ1pDXkNhQ2NDZcNmA0NlQ2NDYUNeQ1tDWENU
Q1FDTEauRl1GOkYhQyRDKkMwQzdDPUNCQ0dDTENRQ1VDWUNcQ19DYUNjQ2TDZQFDZENjQ2FD
X0NdQ1pDV0NTQ1BDTIH/gf+B/4HfhgGB/4H/gf+B3QaBHoYDgRuA/4D/gP+An0aDgB4GRtFG
XUZDgBuGA0a5RguA/4D/gP+A2Ua2RjiAHUbvRu1GvEalRlCA/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4AaAAAAAAAAAAAAAAABiAaAAogNgAeIBoABiA2ACIgGgAGIDIAIiBSACYgUgAmIFIADiBsA
iP+I/4jlgAKIG4AHiBaACIgGgAKIDYAHiAeAAYgMgAiIB4ABiAuACEijiBOACYgUAEjDiP+I
/4j/iGKAB4gHgAKIDIAHiAeAAYgMgAiICACICoAKiAgAiP+I/4j/iJ2AAogMgAeICIABiA9I
fIADiAiAAYgdAIj/iP+I/4iegAGIHYABiB2AAYgdgAGI/4j/iP+InIACiB2AAYgdgAGIHYAB
iP+I/4j/iJyAAogdgAGIHYABiB2AAYj/iP+I/4h0AIgmgAGIHYABiB4AiB4AiB4AiP+I/4j/
iFWAAYglAIgeAIgeAIj/iP+I/4h2gAGIHYACiP+I/4j/iJwAiB6AAYgdgAKIHIADiBuDAYgd
A4geA4geA4geA4j/iL0DiBuDA4gYgwaIF4MHiBWDBkP+Q/xD+4gUgwVD/EP6Q/hD9kP1iBOD
BEP9Q/lD9kP0Q/JD8EPviBKDBEP7Q/dD9EPwQ+5D7EPqQ+mIEoMDQ/tD9kPxQ+5D60PoQ+ZD
5EPjiBGDA0P7Q/ZD8EPsQ+hD5UPiQ+BD3kPdAIgPgwND/EP2Q/FD60PnQ+ND4EPdQ9tD2UPY
gAGIDoMCQ/1D90PxQ+xD5kPiQ95D2kPYQ9VD00PSgAKIDIMDQ/lD80PtQ+dD4UPdQ9lD1UPS
Q9BDzkPNgAOIC4MCQ/tD9UPuQ+hD40PcQ9hD1EPQQ81Dy0PJQ8iAA0j2iAmDAkP+Q/dD8EPq
Q+RD3kPYQ9NDz0PLQ8hDxkPEQ8NG8UbARsFGpUZHQylDL0M2QzxDQUNGQ0tDUENUQ1dDW0Ne
Q2BDYUNiw2MBQ2JDYUNgQ15DW0NZQ1VDUkNPQ0tG7kbzRvtG50aMRnlGSkM2QztDQUNGQ0pD
T0NSQ1ZDWUNcQ15DX0Ngw2EBQ2BDX0NeQ1xDWUNXQ1RDUUNNQ0lG+kb4RuZG+kbiRuVGuEZY
QztDQENFQ0lDTUNRQ1RDV0NaQ1xDXUNeQ1/DXgFDXUNbQ1lDV0NVQ1JDT0NLQ0hG2kbrRvVG
9EbvRvlG60arQztDQENEQ0hDTENQQ1NDVkNYQ1pDW8NcAkNbQ1pDWUNXQ1VDUkNPQ0xDSUNG
RrlGoUbyRuRG+EbRRvhG2EZ1Qz9DRENIQ0tDT0NRQ1RDVkNYw1kEQ1dDVkNUQ1JDT0NNQ0pD
R0NERvBGzUbFRvpG+UbERu9G7UafQz9DQ0NHQ0pDTUNQQ1JDVENVQ1bDVwFDVkNVQ1RDU0NR
Q09DTENKQ0dDRENBRvBG+EbURuVG/UbZRuVG90apQz9DQ0NGQ0lDTENOQ1BDUsNTAUNUw1MB
Q1JDUUNPQ01DS0NJQ0ZDRENBQz5G80buRvJG/EbwRu5G5kbxRp5DP0NDQ0ZDSENLQ01DTkNP
Q1DDUQFDUENPQ05DTUNLQ0lDR0NFQ0NDQEM+QztG9EbORvxG50bIRvNG9UbXRmRDP0NCQ0VD
R0NJQ0tDTMNNAUNOw00BQ0xDS0NJQ0dDRUNDQ0FDP0M8QzpDN0b0RsVG90bkRulG8Ub5RrZG
QUNAQ0JDRENGQ0hDScNKAUNLw0oBQ0lDSENGQ0VDQ0NBQz9DPUM6QzhDNkMzRvZG2Eb2RvhG
80bURvtG30aFQ0BDQkNEQ0VDRkNHw0gBw0cBQ0ZDRUNEQ0JDQEM+QzxDOkM4QzZDM0MxQy9G
88bsAUb3RuJGi0boRvVGvUZDQ0JDQ0NEw0UDQ0RDQ0NCQ0FDP0M+QzxDOUM3QzVDM0MxQy9D
LEMqRvVG+kbeRvxG0UZdRsJG9kblRnpDQsNDBENCQ0FDQEM+Qz1DO0M5QzdDNEMyQzBDLkMr
QylDJ0MlRuNG+UbhRvZG00ZhRotG10bxRs5GY8NCAkNBQ0BDP0M+QzxDOkM4QzZDNEMyQy9D
LUMqQyhDJkMkQyJDIEb7RvNG6Ub1RtBGaUM+RrBG7kbzRqrDQQFDQEM/Qz5DPEM6QzhDNkM0
QzFDL0MsQylDJ0MlQyJDIEMeQx1DG0bVRvVG+UbyRupGhkNARmtGzEb8RtBGc0M/Qz5DPUM7
QzlDN0M0QzJDL0MsQypDJ0MkQyFDH0MdQxtDGUMXQxVG8Eb2RvdG+kb3RrLDQgFGkkbmRvdG
qEM+QzxDO0M4QzVDM0MwQy1DKkMnQyRDIkMeQxxDGUMXQxVDE0MRQxBG+kbxRs1Gx0b7RtVG
k0NDRltGxEb7RtBGVEM7QzhDNkMyQy9DLEMpQyZDIkMfQxxDGEMWQxNDEUMPQw1DC0MKRvVG
8EacRrZG80b7Rs1GV0NDRsJG+0bTRlhDOUM2QzNDL0MrQyhDJEMhQx1DGkMWQxNDEEMNQwtD
CEMHQwVDBEbSRtNGe0aGRulG8kbvRptGiEbaRvpGuEY9QzdDM0MwQytDKEMkQyBDHEMYQxRD
EUMNQwpDB0MFQwJDAIEBRmJGY0NIRmpGykbyRvBG0EbjRvtG2kabQzhDNEMxQy1DKEMkQx9D
G0MXQxNDD0MLQwdDBEMBgQRDSUZNRmJGnUa5RulG70b6RvZG2UayRkJDNkMyQy5DKkMkQyBD
G0MXQxJDDkMKQwZDAYEGRqdGwUbVRvJG50b3RvVG90awRo9DPEM4QzRDMEMrQydDIUMcQxdD
EkMOQwlDBUMAgQdG70brRvhG6kbMRsRG5EbwRrRDP0M7QzdDMkMuQylDJEMdQxhDE0MOQwlD
BEMAgQhG2UbURrlGhkZsQ0tGj0aXRmFDPkM6QzVDMEMrQyZDIUMaQxRDD0MKQwRDAIEJRo1G
Z0NQQ09DTUNLQ0hDRUNBQz1DOEMzQy5DKUMjQx5DF0MRQwtDBUMAgQrDUgFDUUNQQ05DS0NI
Q0RDQEM7QzdDMUMsQyZDIEMaQxNDDUMHQwGBC0NTQ1JDUUNQQ01DS0NHQ0NDP0M6QzVDL0Mq
QyRDHkMXQxBDCUMDgQxDU0NSQ1FDT0NNQ0pDRkNCQz1DOEMzQy1DJ0MhQxtDFEMMQwZDAIEM
Q1NDUkNRQ09DTENJQ0VDQEM8QzZDMUMrQyVDHkMYQxFDCUMCgQ1DU0NSQ1BDTkNLQ0hDREM/
QzpDNUMvQylDIkMcQxVDDkMGgQ5DUkNRQ09DTUNKQ0dDQ0M9QzhDM0MtQyZDIEMZQxJDC0MD
gQ6GA4EbhgWBGYYHgReGB4EXhgiBFoYIgRaGCIEWhgiBFoYIgRaGB4EXhgiBFoYIgRaGCYEV
hgqBFIYFAYYDgRSGBQGGBIEThgWBAYYDgROGBgGGBIEShgcBhgOBEoYLgROGAQGGCIEUhgmB
FIYJgRWGCIEWhgQBhgKBFoYBgd2GBIEahgaBGIYHgReGCIEWhgiBFoYJgRWGCYEVhgmBFYYI
gRaGCIEWhgiBFoYJgRWGCoEUhgqBFIYLgROGBQGGBIEThgyBEoYMgRKGDIEShgyBEoYMgRKG
C4EThgqBFIYJgRWGA0b4RvyGAoEWBkb8BoEcRvmBvoYERsVGkEYZgBeGBkbcRiiAFoYHRsGA
FoYIRkqAFYYIRsGAFYYJRhuAFIYJRiSAFIYJRhKAFIYIRsKAFYYIRn+AFYYIRvJGFYAUhglG
iYAUhgpGQYAThgpGxYAThgtGX4AShgVG5YYERt6AEoYMRkyAEYYMRoWAEYYMRoyAEYYMRm+A
EYYMRi2AEUbzhgJG+oYGRpyAEkb0hgJG80b7hgRGy0YKgBJG7oYCRvuGBEZigBRG84YBRv1G
8YYDRtyAFUb3hgFGmUZjRlNG3Eb9Rr5GNIAVRtFGPoAERgSAt0b2RvqGAUbVRkFGK4AYRvGG
Akb0RulGzkYygBeGBUbzRrKAF4YGRt5GQYAWhgdG0oAWhghGcYAVhghGvYAVhghGrYAVhghG
a4AVhgdG7kYvgBWGCEaVgBWGBEb0hgJG80Y4gBSGBEbbRu2GAkazgBSGBEbSRsxG/YYCRm6A
E4YDRvtGzUZ4RvWGAkbgRhKAEoYDRvtGy0Y5RuGGA0aEgBLG5AFG5UbsRutGz0ZhRodG+4YC
RslGAYARRspGv0a5RsFG3UbaRp1Ge0bvhgNGNIARRqhGsEaeRrRG4EbaRrxGtkbHhgNGO4AR
RnNGr0agRsFG1caqAUbPRuyGAkbvRiCAEUYPRqJGekaLRlpGTEaRRtFG94YCRruAE0Z2Ro9G
K4ABRnBG20b4hgFG0kZBgBNGb0aOgAJGdkbqRvhGykZiRgGAFEZ2RppGDoABRpgGRvpGS4AW
RnxGcoACRrMGRvaAF0ZARgqAAkZURphGaIDYRgaAHkZLRiuAHEYRRl1Gb0YegBpGF0ZERn9G
hUZ6Rk5GBIAYRkZGMkaARptGq0aBRnpGFYAXRsNGjEaIRrtG0UahRsxGrUYdgBZG5EbaRqdG
uUbXRrlG20b9RqGAFkb3RuDG2AFGvka8RspG6UajRguAFUb6RtJG6kbGRpNGuEbCRq1GW4AW
RvpGykb7RtRGukauRrNGeUYUgBZG+0beRvtG9Ua4Rl1GgEZzRkCAFkb4RvFG8kbtRoEARhBG
YUZgRiGAFUbtRvhG1UbRRkyAAUYmRn1GUUYHgBRGxkbPRrZGoUYHgAJGmUagRkSAFEaoRopG
iEZ0gANGikbHRntGI4ATRg9GAUYfRiaAA0ZFRsxGn0ZLgBxGmUa9RnZGIoAbRlFGvkaYRkiA
G0YwRr1GlUZFgBtGPkarRnBGG4AbRmZGXkY7gBxGG4A8RhCAHkZfgP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gPcA
AAAAAAAAAAAAAAEAiBWAC4gTgAyIEoANiAeAAYgOgAmIAYAEiBCADogQgA6IEIANiBKAC4gU
gAqIFIAJiBWACIgWgAiIFoAHiBaACIgWgAeIFoAHiBeAB4gXgAGIAoABiBgAiAMAiBkAiLaA
AYgdgAKIHIADiBuABIgagASIGoAEiBqABIgCAIgWgAlIH4gUgAuIGoAFiBqABogEgAGIEYAN
iBGADYgRgAyIEoALiBOAC4gUgAqIFYAIiBaACIgWgAeIFoAIiBaAB4gXgAeIFoABiAFIp4AC
iBcAiAOAAYgeAIjxgAGIHYACiByAA4gbgAOIG4ADiBuAA4gCAIgXgAmIG4AEiBuABIgagAaI
GIAMiBKADIgSgAuIE4ALiBOAC4gUgAmIFYAJiBWACYgVgAiIFoAIiBaAB4gXgAeIG4ACiB2A
AYgdAIj/iBKAAYgdgAGIHYABiB2AAYgdgAGIA4ABiB2AAogcgAOIG4AEiBqABogYgAiIFoAL
iBOAC4gTgAuIE4AKiBSACogVgAmIFYAJiBaAB4gXgAeIF4AHiBmABIgbgAOIHIABiB4AiP+I
l4ABiB2AAogcgAOIG4AEiBqABYgZgAeIF4ALiBOAC4gTgAqIFIAKiBWACYgVgAmIFYAJiBaA
B4gXgAeIF4AHiBqABIgbgAKIHIACiB2AAYgdAIj/iHeAAYgdgAKIHIADiBuABIgagAWIGYAH
iBeAC4gTgAuIE4AKiBSACogUgAqIFYAJiBaACIgWgAiIFoAIiBaAB4gagASIG4ADiByAAogc
gAGIHYABiB4AiB4AiB4AiP+IFoABiB2AAogcgAOIG4AEiBqABYgZgAeIF4AJiBWAC4gTgAuI
E4ALiBOACogVgAmIFoAIiBaACIgXgAeIF4AHiBmABYgagASIG4ADiBuAAogdgAGIHYABiB2A
AYgdgAGIHgCIHgCI1YACiByAA4gbgASIGoAEiBqABogYgAeIF4AIiBaAC4gTgAuIE4ALiBOA
C4gUgAqIFYAJiBaACIgWgAiIF4AGiBmABYgagASIG4ADiBuABIgbgAOIG4ADiBuAA4gcgAKI
HIADiBuABIgagASIGoABiB0AiHWAAogcgAOIG4AEiBqABYgZgAaIGIAHiBeACIgWgAuIE4AM
iBKAC4gTgAuIFYAJiBaACIgWgAiIFoAIiBeAB4gYgAaIGYAFiBqABIgaSESABIgagASIGoAF
iBqABIgagASIGoAEiBqABIgagASIGoAEiBqABIgagAGIHQCIHgCIFYADiBuABIgagASIGoAF
iBmABogYgAeIF4AIiBaACogUgAyIEoAMiBOAC4gVgAmIFYAJiBaACIgWgAiIFoAIiBeAB4gY
gAaIGYAGiBmABYgZgAWIGYAFiBqABIgagASIGoAEiBqABIgagASIGoAEiBqABIgagASIGoAE
iBqAAogTgASICYMCQ/pD80PsQ+ZD30PaQ9NDzkPKQ8ZDw0PBQ79DvoAEiAmDAUP+Q/ZD70Po
Q+FD20PVQ89DykPFQ8JDv0O8Q7pDuYAFiAeDAkP6Q/ND60PkQ91D10PRQ8pDxUPAQ71DuUO3
Q7VDtIAGiAaDAUP+Q/ZD7kPnQ+BD2UPSQ8xDxUPAQ7tDuEO0Q7JDsEOugAaIBYMCQ/pD8kPq
Q+JD20PUQ81Dx0PAQ7tDtkOyQ69DrEOqQ6mAB4gEgwJD9UPtQ+VD3UPWQ85DyEPBQ7pDtUOw
Q6xDqUOmQ6RDo4AIiAKDAkP6Q/BD6EPgQ9hD0EPJQ8JDu0O0Q69DqkOmQ6NDoEOeQ52ACYgB
gwFD/kP1Q+tD40PaQ9JDykPDQ7xDtUOuQ6lDpEOgQ51DmkOYQ5aACoMCQ/hD70PlQ91D1EPM
Q8RDvUO2Q69DqEOiQ51DmUOWQ5NDkUOPgAmDAkP7Q/JD6kPfQ9ZDzkPGQ75DtkOvQ6hDoUOc
Q5dDk0OPQ4xDikOJiAGAB4MBQ/1D9UPsQ+ND2UPQQ8dDv0O3Q69DqEOhQ5pDlUOQQ4xDiEOF
Q4NDgYgCgAWDAkP3Q+5D5UPcQ9JDyUPAQ7hDsEOoQ6FDmkOTQ41DiUOEQ4FDfkN8Q3qIA4AD
gwJD+UPwQ+dD3kPVQ8tDwkO5Q7FDqUOhQ5pDk0OMQ4ZDgkN9Q3pDd0N1Q3OIA4ACgwJD+kPy
Q+lD4EPXQ85Dw0O7Q7JDqkOiQ5pDk0OMQ4VDf0N6Q3ZDc0NwQ25DbIgDgAGDAkP7Q/ND60Pi
Q9lD0EPHQ7xDs0OrQ6JDmkOTQ4xDhUN+Q3hDdENvQ2xDaUNnQ2aIBIMCQ/xD9EPsQ+ND2kPR
Q8hDv0O1Q6xDo0ObQ5NDjEOEQ35Dd0NxQ21DaUNlQ2NDYUNfiAODAkP8Q/VD7UPkQ9xD00PK
Q8FDuEOtQ6VDnEOUQ4xDhUN+Q3dDcENrQ2ZDYkNfQ1xDWkNZiAKDAkP9Q/VD7UPlQ91D1EPL
Q8JDuUOwQ6ZDnUOVQ41DhUN+Q3dDcUNqQ2VDYENcQ1lDV0NVQ1MIgwND/UP2Q+1D5UPdQ9VD
zEPEQ7tDskOpQ59DlkOOQ4ZDf0N3Q3FDa0NkQ19DW0NXQ1RDUUNPQ06DA0P7Q/VD7kPlQ91D
1UPNQ8VDvEOzQ6tDokOYQ49Dh0OAQ3hDcUNrQ2VDXkNaQ1VDUkNPQ0xDS0NJgwJD+kP0Q+1D
5kPdQ9ZDzkPFQ71DtEOsQ6NDm0ORQ4lDgUN6Q3NDbENmQ2BDWkNVQ1FDTUNLQ0hDR0NFA0P9
Q/hD8kPsQ+VD3kPVQ85DxkO+Q7ZDrUOlQ51DlEOLQ4NDe0N0Q21DZ0NhQ1tDVUNRQ01DSkNH
Q0VDQ0NCQ/pD9UPwQ+pD5EPdQ9ZDzkPGQ75DtkOuQ6ZDnkOWQ45DhUN9Q3ZDb0NoQ2JDXUNX
Q1JDTUNKQ0dDRENCQ0BDP0PyQ+5D6EPiQ9xD1kPPQ8ZDv0O3Q69Dp0OgQ5hDkEOIQ39DeENx
Q2tDZENeQ1lDVENPQ0tDR0NEQ0JDQEM/Qz5D60PmQ+FD20PUQ85Dx0O/Q7dDsEOoQ6FDmUOS
Q4pDg0N6Q3NDbUNnQ2FDW0NWQ1FDTENJQ0ZDQ0NBQz/DPQFD5EPeQ9lD00PNQ8dDwEO4Q7BD
qUOiQ5tDk0OMQ4VDfkN2Q29DaUNjQ15DWUNUQ1BDS0NIQ0VDQkNAQz5DPUM8Q9xD10PSQ8xD
xkO/Q7lDsUOqQ6NDnEOVQ45Dh0OAQ3pDckNsQ2ZDYUNcQ1dDUkNOQ0pDR0NEQ0JDQEM/Qz5D
PUPVQ9BDykPFQ79DuEOyQ6pDpEOdQ5ZDj0OJQ4JDfEN2Q29DaUNkQ19DWkNWQ1JDTkNKQ0dD
RUNDQ0FDQEM/Qz5DzkPJQ8RDvkO4Q7JDrEOkQ55Dl0ORQ4tDhEN+Q3hDc0NsQ2dDYkNdQ1lD
VUNSQ05DS0NJQ0ZDRUNDQ0LDQQFDyEPCQ71Dt0OyQ6xDpkOeQ5hDkkOMQ4ZDgUN7Q3VDcENq
Q2VDYUNdQ1lDVkNSQ1BDTUNKQ0lDR0NGQ0XDRAFDwUO8Q7dDsUOsQ6ZDoEOZQ5NDjkOIQ4ND
fUN4Q3NDbkNpQ2VDYUNdQ1pDV0NUQ1FDT0NNQ0xDSsNJAcNIAUO7Q7ZDsUOrQ6ZDoEObQ5RD
j0OKQ4RDf0N6Q3ZDcUNtQ2hDZENhQ15DW0NYQ1ZDVENSQ1BDT0NOw00Bw0wBQ1JDUENOQ0xD
SUNFQ0FDPEM2QzFDKkMkQx1DFkMPQwhDAIEOQ1FDT0NOQ0tDSENEQ0BDOkM0Qy9DKEMiQxtD
FEMMQwWBD0NQQ09DTENKQ0ZDQ0M+QzhDMkMsQyZDH0MYQxFDCUMCgQ9DT0NNQ0tDSENFQ0FD
PEM2QzBDKkMjQxxDFUMOQwaBEENOQ0xDSkNHQ0NDP0M6QzRDLkMnQyBDGUMSQwpDAoEQQ0xD
SkNIQ0VDQUM9QzhDMUMrQyRDHUMWQw5DBoERQ0pDSENGQ0JDPkM6QzVDLkMnQyFDGkMSQwpD
AoERQ0hDRkNDQ0BDO0M3QzFDKkMkQx1DFUMOQwaBEkNFQ0NDQEM8QzhDM0MtQyZDH0MYQxFD
CUMBgRJDQkNAQzxDOUM0Qy9DKUMiQxtDFEMMQwSBE0M/QzxDOEM0QzBDKkMkQx1DFkMOQwaB
FEM7QzhDNEMwQytDJUMfQxdDEEMJQwGBFEM2QzNDL0MrQyZDIEMaQxJDCkMDgRVDMUMuQypD
JUMgQxpDFEMLQwSBFkMsQyhDJEMfQxpDFEMNQwWBF0MmQyJDHkMZQxNDDUMHgRhDIEMcQxhD
E0MNQwdDAIEYQxpDFkMRQwxDBkMAgRlDE0MPQwpDBYEbQw1DCEMDgRxDBkMBgf+B/4H/gf+B
/4H/gf+B/4H/gX2A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8AAAAAAAAA
AAAAAAGIF4AEiBuABIgbgAOIHIADiB2AAogeAIj/iP+Il4AHiBeAB4gXgAeIF4AHiBeAB4gX
gAeIGIADiBuAA4gcgAKIHYACiB6AAYgfAIj/iP+It4AHiBeAB4gXgAeIF4AHiBeAB4gZgAGI
HYABiB2AAogdgAGIHwCIIACI/4j/iNiABogYgAaIGIAGiBiABog6SAmIHgCIHoABiB6AAYgf
AIj/iP+I+oAFiBmABYgZgAWInACIHwCI/4j/iPtI50icgAKIGYAFiBmABYi9gAGIHgCI/4j/
iPmABYgZgAWI/4j/iP+I+YAFiP+I/4j/iP+I/4j/iP+I/4gIgAGIHYABiB0AiP+I/4j/iLVD
tUOwQ6tDpkOhQ5xDlkOQQ4tDhkOBQ31DeEN0Q3BDbENoQ2VDYkNfQ11DW0NZQ1dDVUNUw1MB
w1ICQ1FDsEOrQ6ZDoUOcQ5dDkkOMQ4hDg0N/Q3pDdkNzQ29DbENoQ2ZDY0NhQ19DXUNcQ1tD
WkNZw1gCw1cCQ6tDpkOiQ51DmEOTQ45DiUOFQ4FDfUN5Q3VDckNvQ2xDaUNnQ2VDZENiQ2FD
YENfw14Dw10Bw14BQ6dDokOdQ5lDlEOQQ4tDhkOCQ39De0N4Q3VDckNwQ21Da0NpQ2hDZ0Nm
Q2XDZAlDo0OeQ5pDlUORQ41DiUOEQ4FDfUN6Q3dDdUNyQ3BDb0NtQ2xDa8NqAcNpA8NqAsNr
AkNsQ59Dm0OWQ5JDjkOKQ4dDgkN/Q3xDekN3Q3VDc0NyQ3FDcENvw24Dw28CQ3DDcQHDcgHD
cwFDnEOYQ5RDkEOMQ4hDhUOBQ35DfEN6Q3hDdkN1Q3RDc8NyA8NzAUN0Q3VDdsN3AUN4Q3nD
egFDe0OaQ5VDkUOOQ4pDh0OEQ4BDfkN8Q3pDecN3AcN2BEN3Q3hDeUN6Q3tDfEN9Q39DgMOB
AUOCQ4NDl0OTQ5BDjEOJQ4ZDg0OAQ35DfEN7Q3rDeQRDekN7Q3xDfUN+Q4BDgUODQ4RDhkOH
Q4hDiUOKQ4tDlkOSQ45Di0OIQ4VDg0OAQ39DfcN8AcN7AkN8Q31DfkN/Q4FDgkOEQ4ZDiEOK
Q4tDjUOOQ5BDkUOSQ5NDlUORQ41DikOIQ4VDg0OBQ3/DfgRDf0OAQ4FDg0OEQ4ZDiEOKQ4xD
jkOQQ5JDlEOWQ5dDmEOZQ5pDlEOQQ41DikOIQ4VDg0OCQ4HDgANDgUOCQ4NDhUOHQ4lDi0ON
Q5BDkkOUQ5dDmUObQ51Dn0OgQ6FDokOTQ5BDjUOKQ4hDhkOEQ4PDggNDg0OEQ4ZDh0OJQ4xD
jkOQQ5NDlkOYQ5tDnkOgQ6JDpEOmQ6dDqEOpQ5NDkEONQ4tDiUOHQ4XDhANDhUOGQ4dDiUOL
Q45DkEOTQ5ZDmEObQ55DoUOkQ6ZDqUOrQ61DrkOwQ7FDk0OQQ45Di0OJQ4hDh8OGAkOHQ4hD
iUOLQ41Dj0OSQ5VDmEObQ55DoUOkQ6dDqkOtQ69DsUOzQ7VDtkO3Q5RDkUOOQ4xDi8OJAcOI
AUOJQ4pDi0OMQ45DkUOTQ5ZDmUOdQ6BDo0OmQ6pDrUOwQ7NDtkO4Q7pDvEO9Q75DlEOSQ49D
jUOMQ4vDigJDi0OMQ45DkEOSQ5RDl0ObQ55DoUOlQ6hDrEOvQ7JDtkO5Q7xDvkPAQ8JDw0PF
Q5VDk0OQQ4/DjQHDjAFDjUOOQ49DkUOTQ5VDmEObQ59DokOmQ6pDrUOxQ7RDuEO8Q79DwkPE
Q8ZDyEPKQ8tDlkOUQ5JDkEOPw44CQ49DkEOSQ5RDlkOZQ5xDn0OjQ6dDq0OuQ7JDtkO6Q71D
wUPFQ8dDykPMQ85D0EPRQ5dDlUOTw5EBw5ABQ5FDkkOTQ5VDl0OaQ5xDoEOjQ6dDq0OvQ7ND
t0O7Q79Dw0PHQ8pDzUPQQ9JD1EPWQ9dDmEOWQ5RDk8OSAkOTQ5RDlkOYQ5pDnUOgQ6NDp0Os
Q7BDtEO4Q7xDwEPEQ8hDzUPQQ9ND1kPYQ9pD3EPdQ5hDlkOVQ5TDkwFDlEOVQ5ZDmEOaQ51D
oEOkQ6dDq0OwQ7RDuUO9Q8FDxkPKQ85D0kPWQ9lD3EPeQ+BD4kPjQ5lDl0OWw5UDQ5dDmUOb
Q51DoEOjQ6dDq0OvQ7RDuUO9Q8JDx0PLQ89D1EPYQ9xD30PiQ+VD50PoQ+pDmUOXw5YDQ5dD
mUObQ51DoEOjQ6dDq0OvQ7NDuUO9Q8JDx0PMQ9BD1UPZQ95D4kPlQ+hD60PtQ+9D8EOZQ5hD
l0OWw5cBQ5hDm0OdQ59Do0OmQ6pDrkOzQ7dDvUPCQ8dDzEPRQ9ZD20PfQ+RD6EPrQ+5D8UPz
Q/VD9kOZw5cDQ5hDmkOcQ59DokOlQ6lDrUOyQ7ZDu0PBQ8dDzEPRQ9ZD20PgQ+VD6kPuQ/JD
9UP3Q/pD/EP9Q5jDlwJDmEOZQ5tDnkOhQ6RDqEOsQ7BDtUO6Q79DxkPLQ9FD1kPcQ+FD5kPr
Q/BD9EP4Q/tD/oMCw5cDQ5hDmkOcQ59DokOmQ6pDr0OzQ7hDvkPDQ8pD0EPWQ9tD4UPnQ+xD
8UP2Q/pD/oMEw5YCQ5dDmEOaQ51DoEOkQ6hDrEOxQ7ZDvEPCQ8dDz0PVQ9tD4UPnQ+xD8kP3
Q/yDBsOVAUOWQ5dDmEObQ55DokOmQ6pDr0O0Q7lDv0PFQ8tD00PZQ+BD5kPsQ/JD90P9gwWI
AcOUAUOVQ5ZDmEObQ55Do0OnQ6xDsUO2Q7xDwkPJQ89D10PeQ+VD60PxQ/dD/YMEiANDkkOT
Q5RDlkOYQ5tDn0OkQ6hDrkOzQ7lDv0PGQ8xD00PcQ+JD6UPwQ/dD/YMDiAWB/4H/gf+BXEMA
QwFDAoEaQwFDA0MGQwdDCYEYQwBDBEMHQwpDDEMOQw+BF0MCQwZDCkMNQxBDEkMUQxWBFkMC
QwhDDEMQQxNDFkMYQxpDG4EVQwJDCEMOQxJDFkMZQxxDHkMgQyGB/4H/gf+B/4H/gf+B/4H/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/AAAAAAAAAAAAAAABiBeAB4gX
gAiIHoABiIIAiB8AiB6AAkjBiBwAiP+ItYABiBeAB4gXgAeIF4AHiBeAB4gXgAeIF4AHiA4A
iAeAB4gNgAGICIAGiBeAB4gXgAeIF4AIiB6AAYgfAIgfAIgfAIgfgAGIHoACiBwAiP+I1IAD
iBiABogYgAaIGIAGiBiABogYgAaIGYAFiA4AiAmABYgYgAaIGIAGiBiABogfAIgegAGIHwCI
IACIH4ABiB2AA4gcAIj/iNcAiBmABYgZgAWIGYAFiBmABYgZgAWIGoAEiBqABIgZgAWIGYAF
iBmABYgZgAWIHwCIHoACiB8AiB+AAogdgAKI/4j2AIgcgAKIG4ADiBuAA4gbgAOIG4ADiBuA
A4gcgAKIGYAFiBmABYgZgAWIGYAFiBmABogegAKIHoABiB+AA4gcgAKI/4j/iBWAAYgcgAKI
HIACiByAAogcgAKIHYABiB2AAYgZgAWIGYAFiBmABYgZgAWIGYAGiBiAAYgDgAKIHIAEiB2A
CIgXgAOI/4j/iPGABYgZgAWIGYAFiBmABYgZgAaIGIAIiByABYgEAIgVgAmIF4AEiP+I/4jw
gAWIGYAFiBmABYgZgAWIGYAGiBiACYgVgBGIE4AMiBaAB4gYAIj/iP+I1IAEiBiABogYgAaI
GIAGiBiACIgWgAyIAwCIDYATiAuAFIgUgAuIFYAEiP+I/4jvSM+ABIgWgAiIFoAJiBWADIgS
gBWICYAXiAeAGIgGgAiIAYAOiAWABIgIgAqIFoACiP+I/4iVQ5BDkUOTQ5VDmEObQ59DpUOq
Q69DtUO7Q8JDyUPQQ9dD4EPnQ+5D9UP8gwOIBkOPQ5BDkkOUQ5dDm0OgQ6VDq0OxQ7dDvkPF
Q8xD00PbQ+RD60PzQ/qDA4gEgAJDjUOOQ5FDlEOXQ5tDoEOmQ6xDskO5Q8BDyEPPQ9dD30Po
Q/BD94MDiAKABUOLQ41DkEOTQ5dDm0OgQ6dDrUO0Q7tDwkPKQ9JD2kPiQ+xD9EP8gwKACUOJ
Q4xDj0OSQ5ZDm0OhQ6hDrkO2Q71DxUPNQ9VD3UPmQ/BD+IMCgApDiEOKQ45DkUOWQ5tDoUOp
Q7BDt0O/Q8dDz0PYQ+BD6UPzQ/yDAoAKQ4ZDiUONQ5FDlkObQ6FDqkOxQ7lDwUPJQ9JD20Pj
Q+xD94MCgAtDhUOIQ4xDkEOWQ5tDokOqQ7JDukPDQ8tD1EPdQ+ZD70P6gwKAC0OEQ4dDi0OQ
Q5ZDnEOjQ6tDs0O8Q8RDzUPXQ+BD6UPzQ/6DAYAMQ4NDh0OLQ5BDlkOcQ6NDrEO1Q71DxkPP
Q9lD4kPsQ/WDAoAMQ4JDhkOLQ5BDlkOdQ6RDrkO2Q79DyEPSQ9tD5UPvQ/iDAYANQ4JDhkOL
Q5BDl0OeQ6VDr0O4Q8FDykPUQ91D50PxQ/uDAYgNQ4JDhkOLQ5FDl0OfQ6ZDsEO5Q8JDzEPW
Q+BD6kP0Q/2DAYgNQ4JDhkOMQ5JDmEOgQ6hDskO7Q8RDzkPYQ+JD7EP2gwKIDUODQ4dDjUOT
Q5pDoUOpQ7NDvUPGQ9BD2kPkQ+5D+IMBiA5DhEOIQ45DlEObQ6NDq0O1Q75DyEPSQ9xD5kPw
Q/qDAYgOQ4VDikOPQ5ZDnUOkQ61Dt0PAQ8pD1EPeQ+hD8kP9gwGIDkOGQ4tDkUOXQ59DpkOv
Q7lDw0PMQ9ZD4EPqQ/WDAogOQ4hDjUOTQ5pDoUOpQ7FDvEPFQ89D2EPiQ+1D94MBiA9Di0OQ
Q5VDnEOjQ6tDs0O+Q8dD0UPbQ+VD70P5gwGID0ONQ5JDmEOfQ6ZDrkO2Q8FDykPTQ91D50Px
Q/uDAYgPQ5BDlUObQ6JDqUOwQ7lDw0PMQ9ZD4EPpQ/ND/YMBiA9DlEOZQ55DpUOsQ7NDvEPG
Q89D2UPiQ+xD9YMCiA9Dl0OcQ6JDqEOvQ7dDv0PJQ9JD20PlQ+5D+IMCiA9Dm0OgQ6VDrEOz
Q7pDwkPMQ9VD3kPnQ/FD+oMBiBBDn0OkQ6lDr0O2Q75DxUPPQ9hD4UPqQ/ND/IMBiBBDo0Oo
Q61Ds0O6Q8FDyUPTQ9tD5EPtQ/aDAogQQ6hDrEOyQ7dDvkPFQ81D1kPfQ+dD8EP5gwKIEEOs
Q7FDtkO8Q8JDyUPQQ9pD4kPqQ/ND+4MCiBBDsUO1Q7pDwEPGQ81D1EPdQ+VD7kP2Q/6DAYgR
Q7ZDukO/Q8RDykPRQ9hD4UPpQ/FD+YMCiBFDu0O/Q8NDyUPPQ9VD3EPlQ+xD9EP8gwKIEYEU
QwJDCEMNQxNDGEMbQx9DIkMkQyVDJoETQwFDB0MNQxNDGUMdQyFDJEMnQylDK0MsgRNDBkMM
QxJDGEMeQyJDJkMqQyxDLkMwQzGBEkMDQwpDEUMXQx1DI0MnQytDL0MxQzPDNQGBEUMAQwdD
D0MVQxxDIUMoQyxDMEMzQzZDOEM5QzqBEUMEQwtDE0MaQyBDJkMsQzFDNUM4QzpDPEM9Qz6B
EEMAQwdDD0MXQx5DJEMqQzBDNUM5QzxDPkNAQ0FDQoEQQwNDC0MTQxpDIkMoQy5DNEM5Qz1D
QENCw0QBQ0WBEEMGQw5DFkMeQyVDLEMyQzhDPENAQ0NDRcNHAUNIgQ9DAEMJQxFDGkMhQyhD
L0M1QztDP0NDQ0ZDSENJw0oBgQ9DA0MMQxRDHUMkQytDMkM4Qz5DQkNGQ0lDSsNMAoEPQwVD
DkMXQx9DJ0MuQzVDOkNAQ0VDSENLQ03DTgKBD0MIQxFDGkMiQylDMUM3Qz1DQ0NHQ0pDTUNO
w08CgQ9DCkMTQxxDJEMsQzNDOUM/Q0VDSUNMQ07DUAJDT4EOQwFDDEMVQx5DJkMuQzVDO0NA
Q0ZDSkNNQ0/DUQJDUIEOQwNDDkMXQyBDKEMvQzZDPENCQ0dDS0NOQ1BDUUNSQ1FDUIEOQwVD
EEMZQyJDKkMxQzhDPkNDQ0hDTENPQ1BDUUNSQ1FDUIEOQwdDEkMbQyNDK0MyQzlDP0NEQ0lD
TUNPQ1HDUgFDUUNPgQ1DAEMJQxRDHEMlQyxDNEM6Q0BDRUNKQ01DT8NRAkNQQ06BDUMBQwpD
FUMeQyZDLkM1QztDQUNFQ0pDTUNPQ1DDUQFDT0NOgQ1DA0MMQxdDH0MnQy9DNkM8Q0FDRkNK
Q01DT8NQAkNOQ0yBDUMFQw5DGEMhQylDMEM2QzxDQkNGQ0pDTUNPw1ABQ09DTUNLgQ1DB0MP
QxpDIkMqQzFDN0M9Q0JDRkNKQ01DTsNPAUNOQ0xDSoEMQwBDCEMRQxtDI0MrQzJDOEM9Q0JD
RkNKQ0zDTgJDTUNLQ0mBDEMBQwpDE0MdQyVDLEMzQzlDPkNDQ0ZDSkNMQ01DTkNNQ0xDSkNH
gQxDA0MMQxVDHkMmQy1DM0M5Qz5DQ0NHQ0pDTMNNAUNMQ0tDSUNGgQxDBkMOQxZDIEMnQy5D
NEM6Qz9DQ0NHQ0rDTANDSkNIQ0WBC0MAQwhDEEMYQyFDKUMvQzVDO0NAQ0RDR0NKQ0vDTAFD
S0NKQ0dDRIELQwJDCkMSQxpDI0MqQzFDNkM8Q0BDRENHQ0pDS8NMAUNLQ0lDR0NDgQtDBUMN
QxVDHEMlQyxDMkM4Qz1DQUNFQ0hDSkNLw0wBQ0pDSUNGQ0OBCkMAQwdDD0MXQx5DJ0MtQzND
OUM+Q0JDRUNIQ0vDTAJDSkNIQ0ZDQ4EKQwJDCkMSQxlDIEMpQy9DNUM6Qz9DQ0NGQ0lDS8NM
AkNKQ0hDRkNCgf+B/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/wAAAAAAAAAAAAAAAYgNgAGICIAFiA6AAYgcgAKIHIACiByAAogcgAKIHIACiB2A
AYgdAIgeAIgeAIj/iHcAiA6ABYgCAIgDgAOIDYAFiAKACYgMgAWIAoAKiAuABYgCgAuICoAF
iANIaIAKiAmABYgHgAiICIAGiAeABogJgAaICIADiAuABogIgAGIDYAHiA8AiAmABYgNgAGI
CoACiA+AAYgdAIgeAIgeAIgeAIgeAIgeAIgeAIgeAIj/iFcAiB2AAogWgAGIAYAGiAyAA4gD
gAuIC4ADiAOADIgKgASIBoAJiAmABIgJgAWICoAEiAqABIgKgASICoADiAuABIgLAIgNgASI
GoAFiB2AA4gbgAKIDgCIHgCIHgCIHgCI/4jXAIgegAKIFQCIA4AFiBSAC0jsiBKADYgKgAKI
CoAGiAqAAogMgAOIC4ACiA2AAogLgAKIDYABiAyAAogNAIgNgAKIHIADiBuAA4gfgAKIHYAB
iP+I/4gmAIgegAKIG4ADiBWAAYgBgASIFoADiHUAiB4ASOyIHYABiB2AAYgcgAKIHIADiCEA
iP+I/4hGgAGIHIABiBcAiAOAAYjSAIgegAGIHYABiB2AAYgdgAKI/4j/iEkAiB0AiBgAiP+I
GIABiB2AAYgdgAKIHIACiP+I/4hIAIgYAIj/iHiAAogcgAOI/4j/iCEAiAMAiBmAA4j/iLWA
BIj/iP8IAIgegAOI/4j/iP+I/4j/iNtDv0PDQ8hDzUPTQ9lD4EPpQ/BD+IMCiBJDxEPIQ81D
0kPXQ91D5EPsQ/RD+4MCiBJDyUPNQ9FD1kPcQ+JD6EPwQ/dD/oMCiBJDzkPSQ9ZD20PgQ+ZD
7EP0Q/uDAogTQ9ND10PbQ99D5EPqQ/BD+EP+gwKIE0PYQ9tD30PkQ+lD7kP0Q/yDAogUQ91D
4EPkQ+hD7UPzQ/iDA4gUQ+JD5kPpQ+1D8kP3Q/2DAogVQ+hD60PvQ/ND90P8gwOIFUPuQ/FD
9UP5Q/2DA4gWQ/VD+EP7gwSIF0P8gwWIGIMFiBmDA4gbA4j/iP+IPoEKQwVDDUMUQxtDI0Mr
QzFDNkM8Q0BDRENHQ0pDTMNNAUNMQ0tDSUNGQ0OBCUMAQwhDD0MXQx5DJUMtQzNDOEM9Q0JD
RUNIQ0vDTQNDS0NJQ0ZDQ4EJQwRDC0MSQxlDIEMnQy9DNUM6Qz9DQ0NHQ0pDTMNOAkNNQ0xD
SkNHQ0OBCEMAQwdDDkMVQxxDI0MpQzFDN0M8Q0BDRUNIQ0tDTcNPAkNOQ01DSkNIQ0SBCEMD
QwpDEUMYQx9DJkMsQzNDOUM+Q0JDRkNKQ0xDTsNQAkNPQ05DS0NIQ0WBB0MAQwdDDUMUQxtD
IkMoQy5DNUM7Q0BDRENIQ0tDTkNQw1ECQ1BDTkNMQ0lDRoEHQwRDCkMRQxhDHkMlQytDMUM4
Qz1DQkNGQ0pDTUNPQ1FDUkNTQ1JDUUNPQ01DSkNGgQZDAkMIQw5DFUMbQyFDKEMuQzRDOkM/
Q0RDSENMQ05DUUNTw1QCQ1JDUUNOQ0tDR4EFQwBDBkMMQxJDGUMfQyVDK0MxQzdDPUNCQ0ZD
SkNOQ1BDU0NUw1UCQ1RDUkNPQ0xDSYEEQwBDBEMLQxFDF0MdQyNDKUMvQzRDOkNAQ0VDSUNN
Q1BDU0NVQ1bDVwJDVUNTQ1FDTkNKgQNDAEMFQwpDEEMWQxxDIkMnQy1DM0M4Qz5DQ0NIQ0xD
UENTQ1VDV0NYw1kBQ1hDV0NVQ1JDT0NMgQJDAkMHQwtDEEMWQxxDIUMnQyxDMkM3Qz1DQkNH
Q0tDT0NTQ1VDWENaw1sCQ1pDWUNXQ1RDUUNNQwBDA0MGQwlDDUMSQxZDHEMiQydDLEMyQzdD
PENBQ0ZDS0NPQ1NDVkNZQ1tDXENdQ17DXQFDW0NZQ1ZDU0NPQwhDCkMNQxFDFUMZQx1DI0Mo
Qy1DMkM3QzxDQUNGQ0pDT0NTQ1ZDWUNcQ15DX8NgAkNfQ11DW0NYQ1VDUkMQQxJDFUMYQxxD
IEMkQypDL0MzQzhDPUNCQ0ZDS0NPQ1RDV0NaQ11DX0NhQ2LDYwFDYkNhQ2BDXUNbQ1dDVEMY
QxtDHUMhQyRDKEMsQzFDNkM6Qz9DQ0NIQ0xDUENUQ1hDXENeQ2FDY0NkQ2XDZgFDZUNkQ2JD
YENdQ1pDVkMhQyNDJkMpQyxDMEM0QzlDPUNBQ0VDSkNOQ1JDVkNZQ11DYENjQ2VDZ0Now2kC
Q2hDZkNlQ2JDX0NcQ1lDKkMsQy5DMUM0QzhDPENAQ0RDSENMQ1BDVENYQ1tDXkNiQ2VDZ0Np
Q2pDa8NsAUNrQ2pDaUNnQ2VDYkNeQ1tDM0M1QzdDOkM9Q0BDQ0NIQ0tDT0NTQ1ZDWkNdQ2FD
ZENnQ2lDa0NtQ27DbwJDbkNtQ2tDaUNnQ2RDYUNdQztDPUNAQ0JDRUNIQ0tDT0NTQ1ZDWkNd
Q2BDY0NmQ2lDa0NtQ29DcENxw3IBw3EBQ29DbkNrQ2lDZkNjQ19DRENGQ0hDS0NNQ1BDU0NX
Q1pDXUNgQ2NDZkNpQ2tDbkNwQ3JDc0N0w3UCQ3RDc0NxQ3BDbUNrQ2hDZUNhQ01DT0NRQ1ND
VkNYQ1tDXkNhQ2RDZ0NpQ2xDbkNwQ3JDdEN2w3cBw3gBQ3dDdkN1Q3NDcUNvQ21DakNmQ2ND
VUNXQ1lDW0NdQ2BDYkNlQ2hDa0NtQ29DckN0Q3VDd0N4Q3nDegNDeUN4Q3dDdUNzQ3FDbkNr
Q2hDZENdQ15DYENjQ2VDZ0NpQ2xDb0NxQ3NDdUN3Q3hDekN7Q3zDfQNDfEN7Q3pDeEN2Q3RD
ckNvQ2xDaUNmQ2RDZkNoQ2pDbENuQ3BDc0N1Q3dDeEN6Q3xDfUN+Q3/DgALDfwFDfkN9Q3tD
eUN3Q3VDckNwQ21DakNmQ2tDbUNvQ3BDckN0Q3ZDeUN6Q3xDfkN/Q4BDgcOCBEOBQ4BDf0N+
Q3xDekN4Q3VDc0NwQ21DakNnQ3FDc0N1Q3dDeEN6Q3xDfkN/Q4FDgkODw4QBw4UCw4QBQ4ND
gkOAQ35DfUN6Q3hDdUNyQ3BDbUNqQ2dDd0N5Q3pDfEN+Q39DgUODQ4RDhUOGw4cFQ4ZDhUOE
Q4JDgEN/Q3xDekN3Q3VDckNvQ2xDaUNmQ3xDfkN/Q4FDg0OEQ4VDh0OIw4kBw4oDQ4lDiEOH
Q4ZDhEOCQ4BDfkN8Q3lDdkNzQ3FDbkNrQ2hDZUOAQ4JDg0OFQ4dDiEOJQ4pDi8OMBEOLQ4pD
iUOHQ4ZDhEOCQ39DfUN7Q3dDdUNyQ29DbENpQ2ZDY0ODQ4VDh0OIQ4pDi0OMQ43DjgPDjQFD
jEOLQ4lDh0OFQ4NDgUN+Q3xDeUN1Q3NDcENtQ2pDZ0NkQ2FDhkOIQ4lDi0OMQ41DjsOPAUOQ
w48BQ45DjUOMQ4pDiEOGQ4RDgkN/Q3xDeUN3Q3NDcENtQ2pDZ0NkQ2FDX4H/gf+B/4H/gf+B
/4H/gf+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8A//8A//8A//8B//mA
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAAAAAAAAAAAAAAAYD/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/j/+P/4//j/8AAAAAAAAAAAAAAAGA/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4//j/+P/4//AAAAAAAAAAAAAAABgP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+P/4//j/+P/wAA/wAA/wAA/wAB+YjVgAaIF4AHiBaACIgCAIgR
gAiIFYAIiBWACIgVgAiIFYAIiBWACIgVgAmIFIAJiBWACIgVgAiIFoAIiBWACYgUgAqIE4AL
iA+AEIgOgBCIDoARiAxITYARiA6AEYgPgBCIDoAQiA+AEIgOgAaIAYAHiPqACIgWgAiIFIAJ
iBWACIgVgAiIFYAIiBWACIgVgAiIFYAIiBWACYgUgAmIFIAKiBSACYgVgAmIFIAKiBOAC4gO
gBCIDoAQiA2AEogMgBKID4AQiBCAD4gPgBCID4AEiASABYgPgASIBoAEiP+IGYAIiBWACYgV
gAiIFYAIiBWACIgVgAiIFYAIiBaAB4gWgAiIFYAIiBSACYgUgAqIE4ALiBKADIgNgBGIDYAR
iA2AEYgMgBKIC4AUiA2AEogPgA+IEIAFiAOABYgQgAOIBoAEiA+AA4gIgAKI/4g5gAiIFYAI
iBVIeIAHiBaAB4gWgAiIFYAIiBaAB4gWgAeIFoAIiBWACIgUgAqIEYANiAyAEYgNgBGIDYAR
iA2AEYgMgBOIC4ATiAuAFIgPgAeIAoAFiBCABIgGgAKIEYACiAiAAogQgAKICoABiP+IO4AF
iBaACIgVgAiIFoAHiBaAB4gWgAeIF4AHiBaAB4gWgAeIFoAIiBWACYgTgAqID4APiA6AEIgO
gBCIDYARiAyAEogMgBOIC4ATiAuADIgCgASIEIAFiAaAAogQgAOICYABiBCAAogKAIj/iFqA
BogWgAeIF4AHiBaAB4gWgAeIF4AGiBeAB4gWgAeIF4AHiBaAB4gVgAmIE4ALiA6AEIgOgBCI
DoAQiAyAEogMgBOIC4ATiAuAFIgKAIgCgAiIBoABiA+ABYgIAIgQgAOI/4hogAGIGYAHiBeA
BogXgAaIF4AHiBeABogXgAaIGIAGiBeAB4gWgAeIFoAIiBWACYgSgAyID4APiA6AEIgNgBGI
DIASiAyAE4gLgBSICoANiAUAiAoAiAKACIgYgAWI/4iDgAaIF4AHiBeABogXgAaIGIAGiBiA
BYgYgAaIF4AGiBiABogXgAeIFoAIiBSACogQgA6IEIAOiA+AD4gMgBKIDIATiAuAFIgKgA+I
AoACiAmADYgGAIgJgAyI/4higAGIHYAGiBeABogYgAWIGIAGiBiABYgZgAWIGIAGiBiABYgY
gAaIF4AHiBaACIgVgAmIE4ALiBGADYgQgA6ID4APiAyAE4gLgBSICoAViAmADogFgAGICIAM
iAkAiP+IV4ACiByABYgYgAWIGYAFiBiABYgZgAWIGYAEiBmABYgZgAWIGIAGiBiABogXgAeI
FoAIiBWACYgTgAuIEoAMiBGADogOgBCIC4AUiAqAFYgJgBZIm4gHgA2ICIABiAqDA0P6Q/ND
70PqQ+ZD4kPfQ9xD2kPYQ9fD1gFD10PYQ9lD20PeQ+FD5UPoQ+xD8UP1iAKDA0P7Q/ZD8EPr
Q+dD40PfQ9xD2UPXQ9bD1QJD1kPXQ9lD3EPfQ+ND5kPrQ+9D9EP5iAGDA0P8Q/dD8kPsQ+dD
40PfQ9xD2UPWQ9XD0wJD1EPVQ9dD2UPcQ+BD5EPoQ+1D8kP3Q/wIgwND/kP4Q/ND7kPoQ+ND
30PbQ9hD1UPTQ9LD0QJD0kPUQ9ZD2UPcQ+FD5UPpQ+5D9EP5AwiDA0P6Q/RD70PpQ+ND30Pb
Q9dD1EPSQ9BDz8POAUPPQ9FD00PVQ9hD3EPhQ+ZD60PwQ/ZD+4MEQ/tD9UPwQ+pD5UPfQ9tD
10PTQ9FDzkPNQ8xDy0PMQ81Dz0PRQ9RD2EPcQ+FD5kPsQ/FD90P9gwND/UP3Q/FD60PmQ+FD
20PXQ9NDz0PNQ8vDyQNDy0PNQ9BD00PXQ9tD4UPnQ+xD8kP5gwND/kP4Q/JD7UPnQ+FD3EPX
Q9JDz0PLQ8lDx0PGQ8VDxkPHQ8lDy0POQ9JD1kPbQ+FD50PtQ/ND+oMDQ/pD9EPuQ+hD40Pd
Q9hD0kPOQ8pDx0PFQ8PDwgFDw0PEQ8ZDyUPMQ9BD1UPaQ+FD50PtQ/RD+4MCQ/tD9kPwQ+pD
5EPeQ9lD1EPOQ8pDxkPEQ8FDwMO/AUPAQ8FDxEPHQ8pDz0PUQ9lD4EPnQ+1D9EP8gwFD/EP3
Q/FD7EPmQ+BD2kPVQ9BDykPGQ8JDwEO+w7wCQ71Dv0PBQ8VDyUPNQ9JD2EPgQ+ZD7UP1Q/yD
AUP4Q/ND7UPoQ+JD3EPWQ9FDy0PGQ8JDv0O8Q7pDuUO4Q7lDukO8Q79DwkPHQ8xD0UPXQ99D
5kPtQ/VD/IMBQ/RD70PqQ+RD3kPYQ9JDzUPIQ8JDvkO7Q7hDtsO1AUO2Q7dDuUO8Q8BDxUPK
Q9BD1kPeQ+VD7UP1Q/yDAUPxQ+tD5kPgQ9pD1EPOQ8lDxEO+Q7pDt0O1Q7PDsgFDs0O0Q7dD
ukO+Q8NDyEPOQ9VD3UPkQ+xD9EP8gwFD7UPoQ+JD3EPXQ9FDy0PFQ8BDu0O3Q7RDsUOww68B
Q7BDskO0Q7hDvEPBQ8ZDzUPTQ9xD5EPsQ/RD/IMBQ+pD5UPfQ9lD00PNQ8dDwkO9Q7hDtEOx
Q65DrcOsAUOtQ69DskO2Q7pDv0PFQ8tD0kPbQ+ND60PzQ/yDAUPnQ+JD3EPWQ9BDykPEQ79D
ukO0Q7FDrkOrQ6rDqQFDqkOtQ7BDtEO4Q71Dw0PKQ9FD2kPiQ+pD80P7gwFD5EPfQ9lD00PN
Q8dDwUO8Q7dDskOuQ6tDqcOnAkOoQ6tDrkOyQ7ZDvEPCQ8hD0EPZQ+FD6UPyQ/uDAUPiQ9xD
1kPRQ8tDxUO/Q7lDtEOvQ6tDqEOmQ6VDpEOlQ6ZDqUOsQ7BDtEO6Q8BDx0POQ9hD4EPpQ/FD
+oMBQ99D2kPUQ85DyEPCQ7xDt0OyQ61DqUOmQ6TDogFDo0OkQ6dDqkOuQ7NDuUO/Q8ZDzUPX
Q99D6EPxQ/qDAUPdQ9hD0kPMQ8ZDwEO6Q7VDsEOrQ6dDpEOiQ6FDoEOhQ6JDpUOoQ6xDsUO3
Q75DxUPMQ9ZD3kPnQ/BD+YMBQ9xD1kPQQ8pDxEO+Q7lDs0OuQ6lDpUOiQ6BDn0OeQ59DoUOj
Q6dDq0OwQ7ZDvEPEQ8tD1UPdQ+ZD70P4gwFD2kPUQ89DyUPDQ71Dt0OxQ6xDp0OkQ6FDn8Od
AUOeQ59DokOmQ6pDr0O1Q7tDw0PKQ9RD3UPmQ+9D+IMBQ9lD00PNQ8dDwUO7Q7ZDsEOrQ6ZD
okOfQ53DnAJDnkOhQ6VDqUOuQ7RDu0PCQ8lD00PcQ+VD7kP3gwFD2EPSQ8xDxkPAQ7pDtUOv
Q6pDpUOhQ55DnMObAkOdQ6BDpEOoQ61Ds0O6Q8FDyUPTQ9tD5EPuQ/eDAUPXQ9FDy0PFQ79D
uUO0Q65DqUOkQ6BDnUObw5oBQ5tDnEOfQ6NDp0OtQ7JDuUPAQ8hD0kPbQ+RD7UP3gwFD1kPQ
Q8tDxUO/Q7lDs0OtQ6hDo0OfQ51Dm8OZAUOaQ5xDn0OiQ6dDrEOyQ7lDwEPIQ9JD20PkQ+1D
9oMBQ9VD0EPKQ8RDvkO4Q7JDrUOoQ6JDn0OcQ5rDmQJDm0OeQ6JDpkOrQ7FDuEO/Q8dD0UPa
Q+ND7EP2gwFD1UPPQ8lDw0O9Q7dDskOsQ6dDokOeQ5tDmcOYAUOZQ5pDnkOhQ6ZDq0OxQ7hD
v0PHQ9FD2kPjQ+xD9oMBQ9RDz0PJQ8NDvUO3Q7FDrEOnQ6FDnkObQ5nDmAJDmkOdQ6FDpUOr
Q7FDt0O/Q8dD0UPZQ+ND7EP1gwFD1EPOQ8hDwkO8Q7ZDsUOrQ6ZDoUOdQ5pDmMOXAUOYQ5lD
nUOgQ6VDqkOwQ7dDvkPGQ9BD2UPiQ+xD9UP+A0PTQ85DyEPCQ7xDtkOwQ6tDpkOgQ51DmkOY
w5cCQ5lDnEOgQ6RDqkOwQ7dDvkPGQ9BD2UPiQ+tD9UP+A0MmQyFDG0MWQxBDC0MFQwCBF0Mi
Qx1DF0MSQwxDB0MBgRhDHkMYQxNDDkMIQwKBGUMZQxRDD0MJQwSBGkMVQxBDC0MFQwCBGkMR
QwxDBkMBgRpDAEMMQwdDAoEbQwJDCEMDgRzDAwGBHUMFgR1DAEMGgR1DAEMIgR1DAUMIgR1D
AUMJgR1DAUMJgR1DAUMKgR1DAUMKgR1DAUMJgR1DAEMJgR1DAEMJgR1DAEMIgR5DCIEeQwiB
HkMHgR5DB4EeQwaBHkMGgR5DBYEeQwWBHkMFgR5DBIEeQwSBHkMEgf+B/4H/gf+B/4H/gf+B
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAAAAAAAYgHgAWI
BIAGiA2ABYgFgAWIDIAFiAeABYgLgAWIB4AFiAqABogHgAWICYAHiAiABIgEgAyICIAEiASA
DIgIgASIBIAMiAiABIgEgAyICIAEiASADIgIgASIBIAMiAiABIgEgAyICYACiAWADIgJgAKI
BYAMiAoAiAiACogVgAmIFoAIiBaACIgXgAeIF4AHiBaACYgVgAiIFYAIiBaACIgVgAiIFYAJ
iBSACogUgAmIF4AGiBmAA4gbgAKIIYADiAiAA4gOgAOICYADiA2AA4gJgAOIDIAEiAmAA4gL
gAWICoACiAqABogKgAKIBYALiAqAAogFgAuICoACiAWAC4gKgAKIBYALiAqAAogFgAuICoAC
iAWAC4gKgAKIBYALiAsAiAaAC4gLAIgGgAuIFYAJiBaACIgXgAeIF4AHiBiAB4gXgAeIFoAI
iBaACYgVgAiIFYAIiBWACYgUgAqIFYAJiBaACIgXgAeIF4AEiBuAAYgEAIgagAKICoACiA6A
AogKgAKIDoACiAuAAYgNgAOIC4ACiAyAA4gMgAGICoAFiAyAAYgFgAqIDIABiAWACogMgAGI
BYAKiAyAAYgFgAqIC4ACiAWACogMAIgGgAqIDACIBoAKiAwAiAaACogUgAqIFoAJiBaACIgX
gAeIF4AHiBiABogYgAeIFoAIiBaACYgVgAmIFIAJiBWACYgVgAiIFoAIiBeAB4gXgAiIF4AH
iBeAB4gagAKICwCID4ACiAuAAYgOgAKIDACIDYACiA0AiA2AAogNAIgLgASIFYAJiBWACYgV
gAmIFYAJiA0AiAaACYgNAIgGgAqIDACIBoAKiBSACogUgAqIFYAJiBeAB4gYgAeIF4AHiBiA
BogYgAeIF4AHiBaACYgVgAqIE4AKiBSACYgVgAmIFoAIiBeAB4gXgAeIF4AHiBiAB4gIgAGI
DoACiAsAiA+AAogcgAGIHIACiBuAA4gagASIFYAJiBWACYgVgAmIFYAJiBWACYgVgAmIFYAJ
iBWACogUgAqIFYAJiBeAB4gYgAeIF4AHiBiABogYgAeIF4AIiBaACIgVgAqIFIAKiBOACogV
gAmIFoAIiBaACIgXgAeIF4AHiBeACIgHgAGIDoACiByAAogbgAKIHIACiBuAA4gVgAGIAYAF
iBWACYgVgAmIFYAJiBWACYgVgAmIFYAJiBWACYgVgAqIFIAKiBWACYgXgAdI0IgXgAeIF4AH
iBiAB4gXgAeIF4AIiBaACYgVgAqIE4ALiBOACogVgAmIFYAIiBeAB4gXgAiIFoAIiAcAiA6A
CIgFgAKIDYADiBuAA4gbgAKIG4ADiBqABIgVgAmIFYAJiBWACYgVgAmIFYAJiBWACYgVgAmI
FYAJiBWACogUgAqIFYAJiBeACIgXgAeIGIAHiBeAB4gXgAiIFoAJiBWACogUgAuIE4AMiBGA
DIgTgAqIFIAKiBWACYgVgAmIBYABiA6ACIgEgAOIDYAKiAGAAogIAIgCgAeIGIAFiBmABYgU
AIgCgAWIFYAJiBWACYgVgAmIFYAJiBWACYgVgAmIFYAJiBWACogUgAqIFIAKiBSAC4gUgAqI
FoAIiBeACIgXgAiIFoAIiBeACIgWgAmIFYAKiBSAC4gTgA2IEYAOiBCAD4gPgAuIAYACiA6A
C4gBgAOIDoARiA2ADYgRgAuIDIALiBOAC4gTgAqIFIAKiBSACogUgAqIFIAKiBSACogUgAqI
FIAKiBSACogUgAqIFIAKiBSAC4gTgAuIFIALiBWACYgLSA4AiAiACYgLgAGICIAIiAyAAYgH
gAmIDIACiAaACYgMgAKIBYAKiAyAAYgFgAyICwCIBoAMiBKADYgRgA+IEIAOiBCAD4gPgBCI
DYAMiBKACogVgAiIDoAMiBKAC4gTgAuIE4ALiBOAC4gTgAqIFIAKiBSACogUgAqIFIALiBOA
C4gTgAuIE4ALiBOADIgSgAyIEoANiBSACogMgAOIBIAKiAiAB4gEgAqICIAGiAWACogHgAaI
BYAMiAaABYgGgAyIB4ADiAeADYgGgAKIB4APiAWAAYgIgA6IBgCICIAPiBCADogQgA2IEoAI
iBeABYgagAKIHQCIEEPTQ85DyEPCQ7xDtkOwQ6pDpUOgQ51DmkOYQ5dDlkOXQ5lDnEOgQ6RD
qUOvQ7ZDvkPGQ9BD2UPiQ+tD9UP+A0PTQ81DyEPCQ7xDtkOwQ6pDpUOgQ5xDmkOYw5YBQ5dD
mUOcQ59DpEOpQ69DtkO9Q8VD0EPYQ+JD60P0Q/4DQ9NDzkPIQ8JDvEO2Q7BDqkOlQ6BDnEOa
Q5jDlgFDl0OZQ5xDn0OkQ6lDr0O2Q71DxUPPQ9hD4UPrQ/RD/gND1EPOQ8hDwkO8Q7ZDsEOr
Q6ZDoEOdQ5pDmEOXQ5ZDl0OZQ5xDn0OkQ6lDr0O2Q71DxUPPQ9hD4UPrQ/RD/gND1EPPQ8lD
w0O9Q7dDsUOrQ6ZDoUOdQ5pDmMOXAUOYQ5lDnEOgQ6RDqUOvQ7ZDvUPFQ89D2EPhQ+tD9EP+
A0PVQ89DykPEQ75DuEOyQ6xDp0OiQ55Dm0OZw5gCQ5pDnUOgQ6RDqkOvQ7ZDvUPFQ89D2EPh
Q+tD9EP+A0PWQ9FDy0PFQ79DuUOzQ61DqEOjQ59DnEOaQ5lDmEOZQ5pDnUOhQ6VDqkOwQ7ZD
vkPFQ89D2EPhQ+tD9EP+A0PYQ9JDzEPGQ8BDukO0Q69DqkOkQ6BDnUObQ5pDmUOaQ5tDnkOh
Q6VDqkOwQ7dDvkPFQ89D2EPhQ+tD9EP9A0PaQ9RDzkPIQ8JDvEO2Q7BDq0OmQ6JDn0Odw5sC
Q5xDn0OiQ6ZDq0OxQ7dDvkPGQ89D2EPhQ+pD9EP9A0PcQ9ZD0EPKQ8RDvkO4Q7JDrUOoQ6RD
oUOeQ51DnEOdQ55DoEOjQ6dDrEOxQ7dDvkPGQ9BD2EPhQ+pD9EP9A0PeQ9hD0kPMQ8ZDwEO6
Q7VDsEOqQ6ZDo0OgQ5/DngFDn0OhQ6RDqEOtQ7JDuEO/Q8ZD0EPYQ+FD6kPzQ/0DQ+FD20PV
Q89DyUPDQ71Dt0OyQ6xDqUOlQ6NDocOgAUOhQ6NDpkOpQ65Ds0O5Q79DxkPQQ9hD4UPqQ/ND
/AND5EPeQ9hD0kPMQ8ZDwEO6Q7VDr0OrQ6hDpUOjw6IBQ6NDpEOnQ6pDr0OzQ7lDv0PGQ9BD
2EPgQ+lD8kP8A0PnQ+FD20PVQ89DyUPDQ71DuEOyQ65Dq0OoQ6ZDpUOkQ6VDpkOpQ6xDsEO0
Q7pDwEPHQ89D10PgQ+lD8kP7A0PqQ+RD3kPYQ9JDzEPGQ8BDu0O1Q7FDrkOrQ6nDpwJDqEOq
Q61DsUO1Q7pDwEPHQ89D10PfQ+hD8UP6A0PuQ+hD4kPcQ9ZD0EPKQ8RDv0O5Q7VDsUOuQ6tD
qsOpAUOqQ6xDrkOyQ7ZDu0PBQ8dDz0PXQ99D50PwQ/kDQ/JD60PlQ99D2UPTQ81DyEPCQ7xD
uEO0Q7FDr0OtQ6xDq0OsQ65DsEOzQ7dDu0PBQ8dDz0PWQ95D5kPuQ/cDQ/ZD70PpQ+ND3UPX
Q9FDzEPGQ8BDvEO4Q7RDskOww64CQ69DsUO0Q7hDvEPBQ8dDzkPVQ91D5UPtQ/ZD/kP6Q/RD
7kPnQ+FD20PWQ9BDykPEQ8BDvEO4Q7VDs0Oxw7ABQ7FDs0O1Q7lDvUPBQ8ZDzkPUQ9xD40Pr
Q/RD/EP+Q/hD8kPsQ+ZD4EPaQ9RDzkPIQ8RDv0O8Q7hDtkO0w7MCQ7VDt0O5Q71DwUPGQ81D
00PaQ+JD6UPyQ/oDQ/xD9kPwQ+pD5EPeQ9hD00PMQ8hDw0O/Q7xDuUO3Q7bDtQFDtkO4Q7pD
vUPBQ8ZDzEPSQ9lD4EPnQ+9D94MBQ/tD9UPuQ+hD40PdQ9dD0UPMQ8dDw0PAQ71DukO4w7cB
Q7hDuUO7Q75DwUPFQ8tD0UPXQ95D5UPtQ/WDAkP5Q/ND7UPnQ+FD20PVQ9BDy0PHQ8NDwEO9
Q7vDuQJDukO7Q75DwUPFQ8pDz0PVQ9xD40PqQ/KDAkP9Q/dD8UPrQ+ZD4EPZQ9RDz0PLQ8dD
w0PAQ75DvEO7Q7pDu0O8Q75DwUPEQ8lDzkPTQ9lD4EPnQ+6DA0P8Q/ZD8EPqQ+RD3UPYQ9ND
zkPKQ8ZDw0PAQ77DvAJDvUO+Q8BDw0PHQ8xD0UPXQ91D5EPrCIMDQ/pD9EPuQ+hD4kPcQ9dD
0kPOQ8pDxkPDQ8BDvsO9AkO+Q8BDwkPGQ8pDz0PUQ9pD4EPniAGDA0P5Q/ND7UPmQ+BD20PW
Q9FDzUPJQ8VDwkPAQ77DvQFDvkO/Q8FDxEPIQ8xD0UPXQ91D44gCgwJD/UP3Q/FD6kPkQ99D
2UPUQ9BDy0PIQ8RDwUO/Q77DvQFDvkPAQ8NDxkPKQ85D00PZQ9+IAoMDQ/tD9UPuQ+hD4kPd
Q9dD0kPOQ8pDxkPDQ8BDvsO9AkO+Q8FDw0PHQ8tD0EPVQ9uIA4MDQ/lD8UPrQ+ZD4EPaQ9VD
0EPMQ8dDxEPBQ79DvcO8AUO9Q79DwUPEQ8hDzEPRQ9eIA4MDQ/xD9UPvQ+lD40PdQ9hD00PO
Q8lDxUPCQ79DvUO8w7sBQ71DvkPBQ8RDyEPNQ9KIBIMDQ/hD8kPsQ+ZD4EPaQ9VD0EPKQ8ZD
wkO/Q71Du8O6AkO8Q75DwUPEQ8lDzoEeQwSBHkMEgR5DA4EeQwOBHkMDgR5DA4EeQwOBHkMD
gR5DA4EeQwOBHkMDgR5DAoEeQwKBHkMBgR5DAIEeQwCBn0MBgR5DBkMAgR1DC0MEgR1DD0MJ
QwOBHEMUQw5DCEMCgRtDGEMSQwxDBkMAgRpDHUMXQxFDC0MFgRpDIUMbQxVDD0MJQwOBGUMl
Qx9DGUMTQw1DB0MBgRhDKUMjQx1DF0MRQwtDBYEYQy1DJ0MhQxtDFUMPQwlDA4H/gf+B/4H/
gf+B/4H/gf+BF4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAA
AAAAAYgDAIgSAIgdgAKIEgCIBoAFiBCAA4gDgAeID4AQiA6AAogEgAiIDYACiAeABYgOgAKI
HIABiB2AAYgdAIgdgAGIHYABiB2AAYgdgAGIHQCIHYABiB2AAYgcgAKIG4ADiBuAA4gbgAOI
GoAEiBqABIgagASIGYAGiBeAB4gWgAiIE4AMiBKADYgRgA6IEIARiBkAiAmAAYgSgAGIB4AD
iBBIt4ACiAWABYgPgAWIAYAIiA6AEogMgAOIBIAIiA2AAogbgAOIG4ACiByAAogcgAGIHYAB
iB2AAYgdgAGIHIABiB2AAYgdgAGIHIACiByAAogbgAOIG4ADiBqABIgagASIGYAFiBmABYgY
gAaIF4AHiBWACYgUgAuIE4ALiBOADIgSgA6IFgCIAYAEiAiAAYgQgANIAogGgAOID4AFiAOA
BogOgBKIDIATiAuABIgEAIgUgAOIG4ACiByAAogcgAGIHYABiByAAogcgAKIHIACiByAAYgd
gAGIHIACiByAAogbgAOIGoAEiBqABIgagASIGUgDgASIGYAFiBiABogXgAeIFYAJiBSACogU
gAqIFIAKiBSAC4gTgAyIGIAHiAeAA4gLgAiIBYAFiAuACYgBgAeIDIAPiAKAAYgLgAqIFIAF
iBmABIgagAOIG4ADiBuAAogcgAKIHIACiByAAogcgAGIHYABiByAAogcgAKIG4ADiBuAA4ga
gASIGoAEiBmABIgagASIGYAFiBiABogXgAeIFYAJiBWACYgVgAmIFYAJiBWACYgVgAmIHIAH
iAaAA4gMgAmIAoAGiAuADogRgAqIFIAJiBWABogZgASIGoADiBuAA4gcgAGIHIACiByAAogc
gAKIG4ACiByAAogcgAKIG4ADiBuAA4gagASIGoAEiBmABIgagASIGYAFiBmABYgXgAeIFYAJ
iBWACYgVgAmIFYAJiBWACIgWgAiIFoAHiB6ACYgCgAWIDIAMiBOACogUgAmIFoAGiBiABIgb
gAKIHIACiByAAYgdgAGIHYABiB2AAYgcgAKIG4ACiBuAA4gbgAOIG4ADiBqABIgagASIGYAF
iBmABIgZgAWIGYAFiBeAB4gVgAmIFYAJiBWACYgVgAiIFoAIiBaAB4gXgAaIP4AMiBOACYgV
gAiIF4AGiBiABIgbgAOIG4ACiB2AAYgdAIgeAIgeAIgeAIgdAIgdgAGIG4ADiBqABIgagASI
GoAEiBmABYgZgAWIGIAFiBmABYgYgAaIFYAJiBWACYgVgAmIFYAIiBaACIgWgAeIF4AGiGCA
CIgWgAeIGIAGiBiABIgbgAKIHIACiB0AiN0AiByAAogZgAWIGYAFiBmABYgZgAWIGIAGiBiA
BogXgAaIFYAJiBWACYgVgAmIFYAJiBWACIgWgAiIFoAHiH+AB4gYgAWIGYACiB2AAYgdgAGI
HgCI/4gbgAKIGYAFiBmABYgYgAaIGIAGiBeAB4gXgAeIFYAJiBSACogUgAmIFYAJiBWACYgV
gAmIFYAIiBaABoj/iP+IQYACiBeAB4gXgAeIFoAIiBaACIgVgAmIEoALiBSACogUgAqIFIAK
iBSACogUgAmIFYAIiBaABoiegwJD+0P1Q+9D6EPiQ9xD10PRQ8tDx0PDQ79DvEO6Q7nDuAFD
uUO7Q71DwEPEQ8mIBYMCQ/5D+EPxQ+tD5UPeQ9hD00PMQ8dDw0O/Q7xDuUO3w7YCQ7hDukO9
Q8BDxIgGgwJD+kP0Q+1D50PgQ9pD1EPNQ8hDw0O/Q7tDuEO2w7QCQ7VDtkO5Q7xDwIgGgwJD
/EP2Q+9D6EPiQ9tD1UPOQ8hDw0O/Q7tDt0O1Q7PDsQJDs0O1Q7hDu4gGgwJD/kP4Q/FD6kPj
Q9xD1kPOQ8hDw0O+Q7pDtkOzQ7FDr8OuAUOvQ7FDs0O3iAeDAkP5Q/JD60PkQ91D1kPPQ8lD
w0O+Q7lDtUOxQ69DrMOrAUOsQ61Dr0OyiAeDAkP6Q/ND7EPlQ95D10PPQ8hDwkO9Q7hDs0Ow
Q61DqkOpw6gBQ6lDq0OuiAeDAkP8Q/RD7UPmQ95D10PPQ8hDwkO8Q7dDskOuQ6tDqEOmw6UB
Q6ZDp0OqiAeDAkP8Q/VD7kPmQ99D10PPQ8hDwUO7Q7ZDsUOsQ6lDpUOjw6ICQ6NDpYgHgwJD
/UP1Q+5D5kPfQ9dDzkPHQ8FDukO0Q69Dq0OnQ6NDoEOfw54BQ59DoYgHgwJD/UP2Q+5D5kPf
Q9dDzkPHQ8BDuUOzQ65DqUOlQ6BDnkOcw5sBQ5xDnYgHgwJD/UP2Q+5D5kPeQ9dDzUPGQ79D
uEOyQ6xDp0OjQ55Dm0OZw5gCQ5pIJIgGgwJD/UP2Q+5D5kPeQ9ZDzUPFQ75Dt0OxQ6tDpUOh
Q5xDmUOXw5UCQ5YIAIgFgwJD/UP2Q+5D5kPeQ9ZDzEPEQ71DtkOvQ6lDpEOfQ5pDlkOUw5ID
iAGAAYgDgwJD/UP1Q+5D5UPdQ9VDy0PDQ7xDtUOuQ6hDokOdQ5hDlEORQ4/DjgFDj4gBgAWD
AkP9Q/VD7UPlQ91D1UPLQ8NDu0O0Q61DpkOgQ5tDlUOSQ49DjcOLAogCgASDAkP9Q/VD7UPl
Q9xD1EPKQ8JDukOyQ6tDpUOfQ5lDk0OPQ4xDisOIAogBgAWDAkP9Q/VD7UPlQ9xD1EPKQ8FD
uUOyQ6pDpEOdQ5hDkkOOQ4pDiEOGw4UBCIAHgwFD/kP2Q+1D5UPcQ9RDykPBQ7lDsUOqQ6ND
nEOXQ5BDjEOJQ4ZDhMODAYAIgwFD/kP2Q+5D5UPdQ9RDykPCQ7lDsUOqQ6NDnEOWQ5BDi0OI
Q4VDgsOBAYAIgwJD90PvQ+ZD3kPVQ8tDwkO6Q7JDqkOjQ5xDlkOQQ4tDh0OEQ4LDgAGACIMC
Q/hD8EPnQ99D1kPMQ8NDu0OzQ6tDpEOdQ5dDkEOLQ4dDhEOCQ4BDf4AIgwJD+UPxQ+lD4EPY
Q81DxUO9Q7RDrUOlQ59DmEORQ41DiEOFQ4JDgUOAgAiDAkP7Q/ND60PiQ9pDz0PHQ79Dt0Ov
Q6dDoUOaQ5RDj0OKQ4dDhEOCQ4GABwiDAkP9Q/VD7UPkQ9xD0kPJQ8FDuUOyQ6pDo0OdQ5ZD
kUONQ4lDh0OFQ4OABogBgwND90PvQ+dD30PVQ8xDxEO8Q7VDrkOnQ6FDmkOVQ5BDjUOKQ4hD
hoAGiAKDAkP6Q/JD6kPiQ9hD0EPIQ8BDuUOyQ6tDpUOeQ5lDlUORQ45DjEOKCIAEiAODAkP8
Q/VD7UPlQ9xD1EPMQ8RDvUO2Q69DqUOjQ55DmkOWQ5NDkUOPiAmDA0P4Q/BD6UPfQ9hD0EPJ
Q8JDu0O1Q69DqEOjQ59DnEOZQ5ZDlYgKgwJD+0P0Q+xD5EPcQ9VDzkPHQ8BDukO1Q65DqkOm
Q6JDn0OdQ5uICoMCQ/5D90PwQ+hD4UPaQ9NDzUPGQ8BDu0O1Q7BDrEOpQ6ZDpEOiiAqDA0P7
Q/RD7EPmQ99D2UPSQ81Dx0PCQ7xDuEO0Q7FDrkOsQ6pDMUMqQyRDHkMYQxJDDEMGQwCBFkM0
Qy5DKEMiQxxDFkMPQwlDA4EWQzdDMUMrQyVDH0MYQxJDDEMGgRZDOUMzQy1DJ0MhQxtDFUMP
QwhDAYEVQzxDNkMwQypDJEMdQxdDEUMLQwOBFUM+QzhDMkMsQyZDH0MZQxNDDUMFgRVDP0M5
QzNDLUMnQyFDG0MVQw5DBkMAgRRDQUM7QzVDL0MpQyNDHEMWQxBDCEMBgRRDQkM8QzZDMEMq
QyRDHkMXQxFDCUMCgRRDQ0M9QzdDMUMrQyVDHkMYQxJDCkMDgRRDQ0M9QzdDMUMrQyVDH0MZ
QxJDCkMDgRRDREM+QzhDMkMsQyZDH0MZQxNDCkMDgRRDREM+QzhDMkMsQyZDIEMZQxNDC0MD
gRRDREM+QzhDMkMsQyZDIEMZQxNDC0MDgRRDREM+QzhDMkMsQyZDIEMZQxNDCkMDgRRDREM+
QzhDMkMsQyZDIEMZQxNDCkMDgRRDREM+QzhDMkMsQyZDIEMZQxNDCkMDgRRDREM+QzhDMkMs
QyZDIEMaQxNDC0MDgRRDREM+QzhDMkMsQyZDIEMaQxNDC0MEgRRDREM/QzlDM0MtQydDIUMa
QxRDC0MEgRRDRUM/QzlDM0MtQydDIUMbQxRDDEMFgRRDRUM/QzpDNEMuQyhDIkMcQxVDDUMG
gRRDRUNAQzpDNEMvQylDI0MdQxZDDkMHQwCBE0NGQ0BDO0M1Qy9DKkMkQx5DF0MPQwhDAYET
Q0ZDQUM7QzZDMEMqQyVDH0MYQxFDCkMCgRNDR0NBQzxDN0MxQytDJkMgQxpDEkMLQwSBE0NH
Q0JDPUM3QzJDLEMnQyFDG0MUQw1DBoETQ0dDQkM9QzhDM0MtQyhDIkMdQxVDD0MIQwGBEkNH
Q0NDPkM4QzNDLkMpQyRDHkMXQxFDCkMDgRJDR0NDQz5DOUM0Qy9DKkMlQx9DGEMSQwxDBYES
Q0dDQ0M+QzlDNEMwQytDJkMhQxpDFEMOQwhDAYERQ0dDQkM+QzlDNUMwQyxDJ0MiQxtDFkMQ
QwpDBIH/gf+B/4H/gf+B/4H/gf+BEYD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/wAAAAAAAAAAAAAAAYABiAaAEogDAIgJgBGIDoATiAyAAogDgAuIFIAKiBaACIgXgAeI
GIAFiBuAAYj/iP+IW4ABiByAAogbgAOIGoAEiAQAiBOABYgEgAKIBIALiAsAiAiAEogNgBSI
C4ADiAKADIgMgAGIBYAKiBaACIgXgAeIGIAGiBqAAoj/iP+IeYABiByAAogbgAOIGoAEiAWA
AogDgAeIEACIB4AKiBWAFYgKgBSIC4ACiASAC4gMAIgHgAmIF4AHiBiABogZgASIHIABiP+I
/4h4gAGIHIACiBuAA4gGgAqIFACIBoAGSGKIGIAKiBWADIgESPaAAogLgASIAYAMiAuAAogF
gAqIDACICIAIiBeAB4gZgAWIGoADiP+I/4iWAIgpSNlI9IhJgASIGIAHiBeACogVgASIAoAL
iAuAAogGgAmIDACICYAHiBiABogagAOIHQCI/4j/iPBIw4gcgASIGYAGiBiAB4gXgASIAoAL
iAuAAogHgAiIDACICYAHiBmABYgbgAGI/4j/iP+ID4ABiByAA4gagAWIGYAHiBeABIgDgAGI
BYACiAuAAogHgAiIDACICoAGiBqAA4j/iP+I/4gOgAGIHIACiBuABIgagAWIGYAHiBeABYgC
AIgIAIgMgAKIB4AHiAwAiAuABYgbAIj/iP+I74ABiB2AAogbgAOIG4AEiBqABYgZgAeIF4AG
iAGACogMgAKIB4AHiAyAAYgKgAOI/4j/iO4AiB2AAogcgAOIG4AEiBqABYgYgAeIGIAIiBaA
E4gMgAOIBoAGiA4AiP+I/4h8gwND+EPxQ+tD5EPeQ9lD00POQ8lDw0O/Q7xDuUO2Q7RDs4gL
gwND/EP1Q/BD6kPkQ99D2kPVQ9BDy0PHQ8RDwUO/Q71Du4gMgwND+kP1Q+9D6kPlQ+FD3EPY
Q9ND0EPNQ8pDyEPGQ8WIDIMDQ/5D+kP1Q/BD7EPnQ+ND4EPbQ9hD1kPTQ9FD0EPOiA2DA0P+
Q/pD9kPyQ+5D60PnQ+RD4UPfQ9xD20PZQ9iIDYMFQ/xD+EP1Q/JD70PsQ+pD6EPmQ+RD40Pi
iAyAAYMGQ/xD+UP3Q/RD8kPxQ+9D7kPtQ+yIC4ACgwhD/kP8Q/tD+UP4w/cBQ/aIC4ADgw+I
C4AEgw6IC4AHgwuIDIARiA6AAogHgAKIEYABiFKDCYgSgw6IEIMPiA+DEIgOgxCIDkP6w/kF
Q/pD+0P8Q/2DBogNQ/TD8wPD9AHD9QFD90P5Q/tD/YMEiA3D7gFD7cPuA0PvQ/BD8kP0Q/ZD
+UP8gwSIDMPoBUPpQ+pD60PtQ+9D8UP0Q/dD+4MEiAvD4gTD4wFD5EPlQ+dD6UPsQ+9D8kP2
Q/uDA4gLw9wDw90BQ95D30PgQ+JD5EPnQ+pD7kPyQ/ZD+4MDiArD1wRD2EPZQ9pD20PdQ99D
4kPlQ+lD7UPxQ/ZD/YMDiAnD0QLD0gHD0wFD1EPWQ9hD2kPdQ+BD5EPoQ+xD8UP4Q/6DAogJ
w8wDw80BQ85Dz0PQQ9JD1UPYQ9tD30PjQ+dD7EPzQ/mDA4gIw8cDw8gBQ8lDykPLQ81D0EPS
Q9ZD2UPeQ+JD50PuQ/RD+oMDiAfDwgPDwwFDxEPFQ8ZDyEPLQ81D0UPUQ9lD3UPiQ+lD70P1
Q/uDA4gGQ0ZDQkM9QzlDNUMwQyxDJ0MjQx1DF0MSQwxDB0MBgRBDRUNBQz1DOUM1QzBDLEMo
QyNDHkMZQxRDDkMJQwSBEENDQ0BDPEM4QzRDMEMsQyhDJEMfQxpDFUMQQwtDBkMBgQ9DQkM+
QztDN0MzQzBDLEMoQyRDH0MbQxdDEkMOQwlDBEMAgQ5DQEM8QzlDNkMyQy9DK0MoQyRDIEMc
QxhDFEMQQwtDB0MDgQ5DPUM6QzdDNEMxQy5DKkMnQyRDIEMcQxlDFUMRQw5DCkMGQwKBDUM7
QzhDNUMyQy9DLEMpQyZDI0MgQxxDGUMWQxNDD0MMQwlDBUMCQwCBC0M4QzVDMkMwQy1DKkMo
QyVDIkMfQxxDGUMXQxRDEUMOQwxDCUMGQwRDAUMAgQlDNEMyQy9DLUMrQyhDJkMjQyFDHkMc
QxlDF0MVQxJDEEMOQwxDCkMIQwZDBUMDQwJDAUMAgQVDMUMuQyxDKkMoQyZDI0MhQx9DHUMb
QxlDF0MVQxNDEkMQQw5DDUMMQwtDCkMJQwjDBwHDBgVDLEMqQyhDJkMlQyNDIUMfQx1DG0MZ
QxhDFkMVQxRDE0MSQxFDEMMPAcMOCUMPQyhDJkMkQyNDIUMfQx5DHEMbQxlDGEMXQxZDFUMU
wxMCwxICwxMCwxQBwxUBwxYBwxcBQyNDIkMgQx9DHUMcQxpDGUMYQxdDFkMVwxQGQxXDFgFD
F0MYQxlDGkMbQxxDHUMewx8BQx5DHUMcQxpDGUMYQxdDFkMVQxTDEwTDFAFDFUMWQxdDGEMa
QxtDHEMeQyBDIUMiQyRDJUMmQydDGUMYQxdDFkMVQxRDE0MSwxEFQxJDE0MUQxZDF0MZQxtD
HEMeQyBDIkMlQyZDKEMqQytDLUMuQxRDE0MSQxFDEMMPAcMOAUMNww4Bww8BQxFDEkMUQxZD
GEMaQxxDH0MhQyRDJkMpQytDLUMvQzFDM0M0Qw5DDcMMAcMLAcMKBEMLQwxDDUMPQxFDE0MV
QxhDG0MeQyBDI0MmQylDLUMvQzJDNEM2QzhDOsMIAUMHwwYCwwUCQwZDB0MIQwlDC0MNQw9D
EUMVQxhDG0MeQyJDJUMoQyxDMEMzQzZDOEM7Qz1DP0MDQwLDAQNDAMMBAUMCQwNDBEMGQwhD
CkMNQxBDE0MXQxtDHkMiQyZDKkMtQzJDNUM5QzxDPkNBQ0OBCkMAQwJDBEMHQwpDDUMSQxZD
GkMeQyJDJkMqQy9DM0M3QztDPkNBQ0RDRoEMQwFDBEMHQwtDEEMUQxhDHUMhQyZDK0MvQzRD
OEM8Q0BDQ0NGQ0iBDUMAQwRDCEMNQxJDFkMbQyBDJUMqQy9DNEM5Qz1DQUNEQ0dDSoEOQwBD
BUMKQw9DFEMZQx5DJEMpQy5DNEM5Qz1DQUNFRkhGS4EPQwFDB0MMQxFDF0McQyJDJ0MtQzND
OEM8Q0BGREZIRkqBEEMDQwlDDkMUQxpDH0MlQypDMUM2QztDP0ZDRkZGSYEQQwBDBUMLQxBD
FkMcQyJDKEMuQzRDOEM9RkFGRUZIgRFDAUMHQw1DE0MZQx9DJUMrQzFDNkM6Rj5GQkZFgRJD
A0MJQw9DFUMbQyFDKEMtQzJDN0M7Rj9GQoETQwRDC0MRQxdDHUMkQylDLkMzQzdGO0Y+gRND
AEMGQwxDEkMYQx9DJUMqQy9DM0Y3RjqBFEMBQwhDDkMUQxtDIEMlQypDLkMyRjWBFUMDQwlD
D0MWQxtDIEMlQylDLUYwgf+B/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/wAAAAAAAAAAAAAAAYACiBCABogEgASIDYAHiASABYgKgAmIBIAHiAeA
AogNgAiIA4ABiBGAC4gUgAmIFYAIiBeAB4gYgAWIGoADiB2AAYj/iP+IKoAJSNGIE4AJiBGA
DIgQgA2IA4ABiBGABYgFgAKID4AGiAWABIgMAIgOgASIG4AFiBqACYgVgAiIFoAHiBeAB4gX
gAaIGoADiByAAoj/iP+ISYAJiBKAC4gRgAyIF4AEiAaAAYgfgAGIHoACiB2AA4gbgAiIFoAI
iBaAB4gXgAaIGIAGiBmABIgbgAOI/4j/iGmACIgTgAOIbgCIH4ABiB2ABIgagAaIGIAGiBiA
BYgZgAWIGYAFiBqAAoj/iP+I/4gbAIgegAOIG4AGiBiABogYgAaIGIAFiBmABYgZgAOI/4j/
iP+IPIABiB2ABYgZgAWIGYAFiBiABYgZgASIGoADiByAAYj/iP+I/4gdgAGIHYAFiBmABYgZ
gAWIGYAEiBqAA4gagAOIHIABiP+I/4gfAIgeAIgegAGIvACIHoAEiBqABIgagASIGYADiBuA
AogcgAGIHYABiB4AiP+I4ACIHYABiB2AAYgcgAOIu4ABiB2ABIgagASIGoACiByAAYgdgAGI
HIABiB2AAYgeAIj/iOAAiB6AAYgdgAGIHIADiLqABIgagAOIG4ACiByAAogcgAGIHYABiB0A
iB4AiP+I/4gBAIgegAGIHYABiByAAogTQ71DvMO9AkO+Q79DwEPBQ8NDxkPIQ8xDz0PUQ9hD
3UPkQ+pD70P2Q/yDA4gFQ7hDt8O4AkO5Q7pDu0O8Q75DwEPDQ8ZDykPOQ9ND2EPfQ+RD6kPw
Q/ZD/YMCiAVDs8OyAcOzAUO0w7UBQ7dDuUO7Q75DwUPFQ8lDzkPTQ9lD30PlQ+tD8UP3Q/2D
A4gDw60Dw64BQ69DsEOxQ7RDtkO5Q7xDwEPEQ8hDzUPUQ9pD30PlQ+xD8kP4Q/6DA4gCQ6jD
pwHDqAHDqQFDqkOsQ65DsEOzQ7ZDukO+Q8NDyEPOQ9RD2kPgQ+ZD7EPyQ/hD/oMDiAFDosOh
AcOiAUOjQ6RDpUOmQ6hDqkOtQ7BDtEO4Q71DwkPIQ81D00PZQ99D5UPrQ/FD+EP9gwTDmwLD
nAHDnQFDnkOgQ6JDpEOnQ6pDrUOyQ7ZDu0PBQ8dDzUPTQ9lD3kPkQ+pD8UP2Q/uDA8OVA8OW
AUOXQ5hDmUObQ51DoEOjQ6dDq0OvQ7RDukPAQ8ZDy0PRQ9dD3UPjQ+lD70PzQ/hD/IMBw44D
w48BQ5BDkUOSQ5RDl0OZQ5xDoEOkQ6hDrUOzQ7lDvkPEQ8pD0EPVQ9tD4UPnQ+tD8EP0Q/dD
+sOHA8OIAUOJQ4pDi0ONQ5BDkkOVQ5lDnUOhQ6ZDrEOxQ7dDvEPCQ8hDzUPTQ9lD3kPjQ+dD
60PuQ/HDgAPDgQFDgkODQ4RDhkOIQ4tDjkORQ5VDmkOeQ6RDqUOvQ7RDukO/Q8VDykPRQ9VD
2kPeQ+JD5UPow3kDw3oBQ3tDfEN9Q39DgUOEQ4dDikOOQ5JDlkOcQ6FDp0OsQ7FDt0O8Q8JD
yEPMQ9FD1UPZQ9xD38NyA8NzAUN0Q3VDdkN4Q3pDfEN/Q4JDhkOKQ49DlEOZQ55DpEOpQ65D
s0O5Q75Dw0PHQ8tDz0PSQ9XDawPDbAFDbUNuQ29DcUNzQ3VDeEN7Q39Dg0OHQ4xDkUOWQ5tD
oEOmQ6tDsEO1Q7pDvkPCQ8VDyEPLQ2XDZALDZQFDZkNnQ2hDakNsQ25DcUN0Q3dDe0N/Q4RD
iUOOQ5NDmEOdQ6JDpkOsQ7BDtEO4Q7tDvkPBw14Ew18BQ2BDYUNjQ2VDZ0NqQ21DcEN0Q3hD
fUOBQ4ZDi0OPQ5RDmUOdQ6NDp0OrQ65DsUO0Q7bDWATDWQFDWkNbQ11DXkNhQ2NDZkNpQ21D
cUN1Q3pDfkODQ4dDjEOQQ5VDmkOeQ6FDpUOoQ6pDrMNSBMNTAUNUQ1VDV0NYQ1tDXUNgQ2ND
ZkNqQ25DckN3Q3tDf0OEQ4hDjEORQ5RDmEObQ55DoEOiw00Ew04BQ09DUENRQ1NDVUNXQ1pD
XUNgQ2NDaENsQ3BDdEN4Q3xDgEOEQ4hDjEOPQ5JDlUOXQ5nDSAPDSQHDSgFDS0NNQ05DUENS
Q1RDV0NaQ11DYkNlQ2lDbUNxQ3VDeEN8Q4BDhEOHQ4lDjEOOQ5DDRAPDRQHDRgFDR0NIQ0pD
S0NNQ1BDUkNVQ1hDXENgQ2NDZ0NqQ25DcUN1Q3lDfEN/Q4FDg0OFQ4fDQQTDQgFDQ0NEQ0VD
RkNIQ0pDTENOQ1FDVENXQ1pDXkNhQ2RDaENrQ25DckN1Q3dDeUN8Q31Df0M/wz4Cwz8Bw0AB
Q0FDQkNDQ0VDR0NJQ0tDTUNQQ1NDVkNZQ1xDX0NiQ2VDaENrQ25DcENyQ3RDdkN3wz0Fwz4B
Qz9DQENBQ0NDRENGQ0hDSkNNQ1BDUkNVQ1hDW0NeQ2BDY0NmQ2hDakNsQ25Db0NwwzwFwz0B
Qz5DP0NAQ0FDQ0NEQ0ZDSENKQ01DUENSQ1VDV0NaQ1xDXkNhQ2NDZUNnQ2hDaUNqwzwFwz0B
Qz7DPwFDQUNCQ0NDRUNHQ0lDS0NOQ1BDUkNUQ1dDWUNbQ11DX0NgQ2JDY0NkQ2XDPAPDPQLD
PgFDP0NAQ0FDQkNDQ0VDR0NIQ0tDTENOQ1BDUkNUQ1ZDWENaQ1tDXUNeQ1/DYAHDPgTDPwLD
QAFDQUNCQ0NDRENGQ0dDSUNKQ0xDTkNPQ1FDU0NUQ1ZDWENZQ1pDW8NcAUNdw0ADw0EDQ0LD
QwFDRENFQ0ZDR0NIQ0pDS0NNQ05DT0NRQ1JDVENVQ1ZDV0NYw1kBw1oBQ0RDQ8NEBMNFAcNG
AUNHw0gBQ0lDSkNLQ01DTkNPQ1BDUUNTQ1RDVcNWAUNXw1gDw0cBw0gFw0kBw0oBQ0vDTAFD
TUNOQ09DUENRQ1JDU8NUAUNVw1YBw1cEw0wEw00Dw04Bw08Bw1ABQ1HDUgFDU8NUAUNVw1YB
w1cCw1gDQ1eBFkMEQwpDEUMWQxtDIEMkQyhGK4EWQwBDBUMMQxFDFkMbQx9DI0YmgRdDAEMH
QwxDEUMWQxpDHUYhgRhDAUMGQwtDEEMUQxhDG4EZQwFDBkMKQw5DEkMVgRpDAEMEQwhDC0MO
gRxDAUMEQweBHkMAgf+B/4H/gf+B/4H/gf+B/4H/gf+B/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAAAAAAAYgMgA2IEIAIiBWAB4gWgAaIF4AGiA+AAYgC
gAmIEoALiBaAB4gbgAKI/4jSAIgeAIgeAIgPSJuAEIgKgBSIC4ASiA6AEIgPgA+IEYANiBmA
BIgNgAaIFoAGiBeABogXgAWIFoAHiBAAiAOACIgTgAqIF4AGiByAAoj/iP+IQUiLgBOIDIAR
iA6AEIgRgA2IHIACiCyAA4gZgASIGIAFiBaAB4gWgAeIFYAIiBKAC4gXgAaIHIABiP+I/4hV
gAGIDYARiBCADogcgAKIHIACiEqAAogZgASIF4AGiBeABogWgAeIE4ALiBaAB4gcgAGI/4j/
iHSAA4gbgAOIG4ACiByAAohkgAaIF4AGiBeAB4gVgAiIEoALiBaAB4gcgAGI/4j/iJWAA4gb
gAOIG4ADiCOAAYgdgAKIG4AFiBiAB4gWgAeIEgAIgAmIE4AKiBaACIgagAOI/4j/iJiAAYga
gANI5IgagAOIIoADiBuABIgZgAaIF4AHiBaAB4gTgAuIE4AKiBWACIgagAOI/4j/iJoAiByA
AogagASIIIAFiBiABogYgAeIFoAHiBWACYgVgAiIFoAHiBaAB4gZgASI/4j/iLsAiBuAA4gh
gASIGIAGiBeAB4gXgAaIGIAGiBiABYgYgAWIGYAESGSIGYADiB0AiP+IOACI/4hkAIgcgAKI
IoACiBqAA4gZgAWIGYAEiBqABIgagAOIG4ACiByAAYgdAIj/iDgAiB4AiP+IhACIGcNRAcNS
BcNTA8NUAcNVAcNWAcNXAcNYAsNZBsNYAcNXAcNYBsNZA8NaA8NbA8NcBcNbAsNaAcNeBsNf
BsNgCcNfAsNeAcNdAUNcw2UHw2YKw2UCw2QCw2MBQ2LDYQFDYENfw2wEw20Jw2wDw2sBw2oB
w2kBQ2hDZ0Nmw2UBQ2RDY8N0DsNzAcNyAcNxAUNww28BQ25DbUNsQ2tDakNpQ2hDZ0N7w3wK
w3sCw3oBw3kBQ3hDd0N2w3UBQ3RDckNxQ3BDb0NuQ21DbEODw4QJw4MCw4IBQ4HDgAFDf0N+
Q31DfEN7Q3pDeEN3Q3ZDdUNzQ3JDcUOLw4wIw4sCw4oBw4kBQ4hDh0OGQ4VDhEOCQ4FDgEN+
Q31DfEN6Q3lDeEN3Q5PDlAjDkwJDksORAUOQQ49DjkONQ4xDikOJQ4hDh0OFQ4NDgkOBQ39D
fkN8w5sBw5wGw5sCw5oBQ5lDmEOXQ5ZDlUOUQ5NDkUOQQ49DjUOLQ4pDiEOHQ4VDhEOCw6MK
w6IBQ6HDoAFDn0OdQ5xDm0OaQ5hDl0OVQ5RDkkOQQ49DjUOMQ4pDiEOqw6sIw6oBw6kBQ6hD
p0OmQ6VDo0OiQ6FDn0OeQ5xDmkOYQ5dDlUOTQ5JDkEOPQ7HDsgjDsQHDsAFDr0OuQ61DrEOq
Q6lDp0OmQ6RDo0OhQ59DnUOcQ5pDmEOWQ5VDuMO5CMO4AcO3AUO2Q7VDtEOyQ7FDsEOuQ61D
q0OpQ6dDpUOkQ6JDoEOeQ51Dm0O/w8AHw78CQ75DvUO8Q7tDukO5Q7hDtkO1Q7NDsUOwQ65D
rEOqQ6hDpkOkQ6NDocPGA8PHAcPGBEPFw8QBQ8NDwkPBQ79DvkO8Q7tDuUO4Q7ZDtEOyQ7BD
rkOsQ6tDqUOnw8wBw80Gw8wBw8sBQ8pDyUPIQ8dDxUPEQ8NDwUO/Q75DvEO6Q7hDtkO0Q7JD
sUOvQ61D0sPTB8PSAkPRQ9BDz0POQ81DzEPKQ8lDx0PFQ8RDwkPAQ75DvEO6Q7hDtkO1Q7ND
2MPZCMPYAUPXQ9ZD1UPUQ9ND0kPQQ89DzUPMQ8pDyEPGQ8RDwkPAQ75DvEO6Q7lD3sPfCMPe
AUPdw9wBQ9tD2UPYQ9ZD1UPTQ9JD0EPOQ8xDykPIQ8ZDxEPCQ8BDv8PlAsPmA8PlA0Pkw+MB
Q+JD4UPfQ95D3EPbQ9lD2EPWQ9RD0kPQQ85DzEPKQ8hDxkPEw+sBw+wFw+sCw+oBQ+lD6EPn
Q+ZD5EPjQ+FD30PeQ9xD2kPYQ9ZD1EPSQ9BDzkPMQ8pD8cPyB8PxAcPwAUPvQ+5D7UPsQ+pD
6UPnQ+VD5EPiQ+BD3kPcQ9pD2EPWQ9RD0kPQw/gCQ/nD+ATD9wHD9gFD9UP0Q/ND8kPwQ+5D
7UPrQ+lD6EPmQ+RD4UPgQ95D3EPaQ9hD1kP+gwTD/gND/cP8AUP7Q/pD+UP3Q/ZD9EPzQ/FD
70PtQ+xD6kPnQ+VD40PhQ99D3UPcgw5D/kP9Q/tD+kP4Q/dD9UPzQ/FD70PtQ+tD6UPnQ+VD
40PhgxJD/kP8Q/pD+EP3Q/VD8kPwQ+5D7EPqQ+lD54MVQ/5D/EP6Q/dD9kP0Q/JD8EPuQ+yI
CIMPQ/xD+kP5Q/dD9UPzQ/GIDYMMQ/1D+0P5Q/hD9ogFAIgJgwtD/kP8Q/qB/4H/gf+BP0MD
wwQEwwMCwwIBQwFDAIESwwoFwwkCQwhDB0MGQwVDBEMDQwJDAIEOwxAEww8CQw7DDQFDDEML
QwpDCEMHQwVDA0MBQwCBC8MWBMMVAcMUAUMTQxJDEUMQQw9DDUMMQwpDCEMGQwRDAkMAgQnD
HAPDGwFDGsMZAUMYQxdDFkMVQxNDEkMQQw9DDUMLQwlDBkMEQwJDAIEHwyIBwyEBwyABQx/D
HgFDHUMcQxtDGUMYQxZDFUMTQxFDD0MNQwtDCEMGQwRDAYH/gf+B/4H/gf+B/4H/gf+BBoD/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/
gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAAAAAAAAAAAQCIHgCI/4j/
iAiAAogagAOIGYAFiBeAB4gVgAmIFIAKiAqAAYgGgAuICYADiAWACYgKgAWIBIAHiAuAB4gD
gAaIDIAIiAKABYgOgAaIA4AEiBCABIgEgAKIE4ACiAWAAYgVAIgGSBCIHoABiB2AAYgdgAGI
/4jogAGIGoADiBmABYgYgAWIF4AHiAsAiAmACIgLgAGIBoALiAmAA4gFgAqICYAFiASACIgK
gAiIAoAHiAuACIgCgAWIDoAGiAOABIgQgASIBIADiBKAAogFgAKIFACIBoABiB2AAogcgAKI
HIACiP+I5oACiBqAA4gagAOIGYAFiBiABogLAIgJgAiICoACiAeACUgZiAmABIgEgAqICYAG
iAOACIgJgAmIAoAHiAuAB4gDgAaIDYAGiAOABYgPgASIBIAEiBGAAogFgAKIHIABiB2AAogc
gAKIHIACiByAAoj/iMaAAogagAOIGoADiBmABYgKAIgMgAWIC4ACiAmAB4gKgAOIBoAJiAmA
BYgEgAqICIAIiAKACYgIgAmIAoAHiAuAB4gDgAaIDYAFiASABYgPgAOIBYAEiBIAiAaAA4gb
gAKIHIADiBuAA4gbgAOIG4ADiBuAA4j/iKWAAogagAOIGYAEiBmABIgLgAGIC4AFiAuAAogJ
gAaICoAFiAWACIgJgAeIA4AKiAeACYgCgAmICIAJiAKAB4gMgAaIA4AGiA6ABIgEgAWIEIAC
iAWABIgSAIgGgAOIG4ACiByAA4gbgAOIG4ADiBuAA4gbgASI/4iFSH+ABIgXgASIA4ABiBKA
BIgHgAGID4ADiAmAAogNgASICoADiAqABIgLgASIB4AGiAqAB4gEgAeICYAJiAKACYgHgAqI
AoAJiAmAB4gDgAeIDIAFiASABogOgAOIBYAFiBEAiAaABIgbgAKIHIABiByABIgagASIGoAE
iBqABIgagASIGoAEiP+IZIAHiBWADIgRgAOIBoAEiA2ABIgIgASIC4ADiAuABYgIgAKIDYAH
iBaACYgUgAqIFYAIiBeABogJgAKIDYAEiAiAAogPgAKICEiLgAGIEQCICgCIWoAEiBqABIga
gASIGoAEiBqABYgZgAWIGYAESIqI/4gkSMOAA4gYgAqIEoAOiA+ABIgEgAeIGIAIiBeACYgV
gAqIFIAJiBSACogXgAaIGYAFiBpI6IACiB0AiIaABYgZgAWIGYAFiBmABYgZgAWIGYAGiBiA
BogYgAJIVoj/iASACIgUgA2IEIAQiBGAAgiADIgVgAuIFIAKiBSACogUgAqIFYAIiBiABoga
gAOIHQCIqYACiBmABYgZgAWIGYAFiBmABogYgAaIGIAHiBeAB4gXgASIw4AGiBaADIgRgA+I
EYAPiBGADogUgAqIFYAKiBWACYgVgAmIGEhTgAWIG4ACiB2AAYjKgAKIDIMKQ/6ABogNgwqA
BogPgwiABogRgwaABogSgwWAB4gSgwSACIgSgwOACIgSgwOAB4gUgwKABYgWgwKABIgXgwKI
G4MDiBqDBIgFgAWIDYMFiASAC4gGgweIBIANiAKDCYgGgAwIgwqIB4AKgwyICoAFgw6IDEin
gAGDD4gNAIMQiA2DC8P+AcP9AcP8AYgMgwlD/kP9Q/zD+wHD+gJD+YgLgwdD/kP9Q/xD+0P6
w/kBw/gBw/cBQ/aICoMHQ/1D+0P6Q/lD+EP3w/YBw/UCw/QBiAqDBUP+Q/xD+kP5Q/dD9kP1
w/QBw/MCw/ICiAmDBkP8Q/pD+EP2Q/VD9EPzQ/LD8QLD8AOICYMFQ/xD+kP3Q/ZD9EPzQ/JD
8UPww+8Cw+4DiAiDBUP9Q/tD+EP2Q/RD8kPxQ/BD78PuAcPtA8PsAYgIgwVD/EP5Q/ZD9EPy
Q/FD78PuAUPtw+wDw+sCiAiDBEP+Q/tD+EP1Q/ND8UPwQ+7D7QFD7MPrA8PqAogIgwRD/UP6
Q/dD9EPyQ/FD70PuQ+1D7MPrAcPqBcMnAkMmwyUBQyRDI0MiQyFDIEMfQx1DHEMaQxlDF0MV
QxNDEUMOQwxDCkMIQwVDAkMAgQTDLAJDK0MqQylDKEMnQyZDJUMkQyNDIUMgQx5DHEMbQxhD
FkMUQxJDEEMNQwtDCUMGQwNDAYEDwzEBwzABQy9DLkMsQytDKkMpQydDJkMlQyNDIUMfQx5D
G0MZQxdDFUMTQxBDDkMMQwlDB0MEQwJDAIEBQzbDNQFDNEMzQzFDMEMvQy5DLEMrQylDJ0Mm
QyRDIkMgQx5DHEMaQxdDFUMTQxFDDkMMQwlDB0MFQwJDAAFDOsM5AUM3QzZDNUMzQzJDMUMv
Qy1DLEMqQyhDJkMkQyJDIEMeQxxDGkMXQxVDE0MQQw5DC0MJQwdDBUMDQwFDPkM9QzxDO0M5
QzhDNkM1QzNDMUMvQy5DLEMqQyhDJkMkQyJDH0MdQxtDGUMXQxRDEkMQQw1DC0MJQwdDBUMD
Q0FDQEM/Qz5DPEM6QzlDN0M1QzNDMUMvQy1DK0MpQydDJUMjQyFDHkMcQxpDGEMWQxNDEUMP
QwxDCkMIQwZDBENEQ0NDQkNAQz5DPUM7QzlDN0M0QzJDMEMuQyxDKkMoQyZDI0MhQx9DHUMb
QxlDFkMUQxJDEEMNQwtDCUMHQwVDR0NGQ0RDQkNAQz5DPEM6QzhDNUMzQzFDL0MtQytDKEMm
QyRDIUMfQx1DG0MZQxdDFUMSQxBDDkMMQwpDCEMGQ0lDSENGQ0RDQkM/Qz1DO0M5QzZDNEMx
Qy9DLUMqQyhDJkMjQyFDH0MdQxtDGEMWQxRDEkMQQw5DDEMKQwhDBkNLQ0lDR0NFQ0NDQEM+
QztDOUM2QzNDMUMvQyxDKkMoQyVDI0MgQx5DHEMaQxhDFkMUQxFDD0MOQwxDCkMIQwZDTENK
Q0hDRkNDQ0FDPkM7QzlDNUMzQzBDLkMrQylDJ0MkQyFDH0MdQxtDGUMXQxVDE0MQQw9DDUML
QwlDCEMGQ01DS0NJQ0ZDQ0NBQz5DO0M4QzVDMkMvQy1DKkMnQyVDI0MgQx5DG0MZQxdDFUMT
QxFDD0MNQwxDCkMIQwdDBUNOQ0xDSUNGQ0NDQEM9QzpDN0MzQzFDLkMrQyhDJkMjQyFDHkMc
QxlDF0MVQxNDEUMQQw1DDEMKQwhDB0MFQwRDTkNMQ0lDRkNDQz9DPEM5QzZDMkMvQyxDKUMm
QyRDIUMeQxxDGUMXQxVDE0MRQw9DDkMLQwpDCEMHQwVDBEMCQ05DS0NIQ0VDQkM+QztDN0M0
QzBDLUMqQydDJEMhQx9DHEMZQxdDFUMSQxFDD0MNQwtDCUMIQwZDBUMDQwJDAENNQ0tDR0NE
Q0BDPUM5QzZDMkMuQytDJ0MkQyFDH0McQxlDFkMUQxJDEEMOQwxDCkMJQwdDBUMEQwJDAUMA
AUNNQ0pDRkNDQz9DO0M3QzRDMEMsQyhDJUMiQx9DHEMZQxZDE0MRQw9DDUMLQwlDB0MGQwRD
A0MBQwCBAkNMQ0lDRUNBQz1DOUM1QzFDLkMpQyZDIkMfQxxDGUMWQxNDEEMOQwxDCkMIQwZD
BEMDQwFDAIEEQ0pDR0NEQ0BDO0M3QzNDL0MrQydDI0MfQxxDGUMWQxNDEEMNQwtDCEMGQwVD
A0MBQwCBBkNJQ0ZDQkM+QzpDNUMxQy1DKUMkQyBDHEMZQxZDEkMPQw1DCkMHQwVDA0MBQwCB
CENIQ0RDQEM8QzhDM0MvQypDJkMhQx1DGUMWQxJDD0MMQwlDBkMEQwJDAIEKQ0ZDQ0M+QzpD
NUMxQyxDKEMkQx5DGkMXQxNDD0MMQwlDBkMDQwGBDENFRkFDPUM4QzRDL0MqQyZDIUMcQxhD
FEMQQw1DCUMGQwNDAIENQ0NGP0Y7QzZDMkMtQyhDI0MfQxlDFUMRQw1DCkMGQwNDAYEOQ0JG
PkY6QzVDMEMrQyZDIUMdQxdDE0MPQwtDB0MEQwGBD0NBRj1GOEMzQy5DKUMkQx9DG0MVQxFD
DUMJQwVDAoEQQ0BGPEY3QzJDLUMoQyNDHkMZQxNDD0MLQwdDA0MAgRBDP0Y7RjZDMUMsQydD
IUMcQxhDEkMOQwlDBUMCgRFDPkM6QzVDMEMrQyZDIUMbQxdDEUMMQwhDBEMAgRFDPkM5QzVD
MEMqQyVDIEMbQxZDEEMMQwdDA0MAgRFDPkM5QzRDL0MqQyVDH0MaQxVDEEMLQwdDA4H/gf+B
/4H/gf+B/4H/gf+BEoD/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/wAAAAAA
AAAAAAAAAYj/iP+I04AIiBSADIgQgA+IDoAQiA2AEYgMgAiIA4AFiAuABIgLgAKICoAEiBmA
BYgXSGqABoj/iP+I/4gDgAmIE4ANiA+AD4gOgAGICoADiB2AAYgeAIgLAIgcgAKIG4ADiBIA
iP+I/4j/iBKACogcgAOIHYABiB4AiGiAAYgUAIj/iP+I/4g9AIgeAIifgAGI/4j/iP+I/4j/
iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+I/4j/iP+IBoMEQ/1D+kP3Q/RD8kPw
Q+9D7cPsAUPrw+oEw+kBiAiDBEP9Q/pD90P0Q/JD8EPvQ+1D7MPrAcPqBMPpAYgIgwRD/UP6
Q/dD9EPyQ/BD70PuQ+1D7MPrAcPqBYgIgwRD/kP6Q/hD9UPzQ/FD70PuQ+3D7AHD6wHD6gSI
CIMEQ/5D+0P4Q/VD80PxQ/BD70PuQ+3D7AHD6wWICIMFQ/xD+UP2Q/RD8kPwQ+9D7sPtAcPs
AsPrA4gIgwVD/EP5Q/dD9EPzQ/FD8EPvQ+7D7QHD7AWICIMFQ/1D+kP3Q/VD80PyQ/HD7wFD
7sPtBMPsAYgJgwRD/kP7Q/hD9kP0Q/ND8cPwAUPvw+4Cw+0DiAmDBUP9Q/pD90P2Q/RD88Px
AUPww+8Bw+4DQ+2ICYMFQ/5D+0P5Q/dD9UP0Q/ND8kPxw/ABw+8Cw+4BiAqDBUP9Q/tD+UP3
Q/VD9EPzQ/LD8QHD8AHD7wKICoMGQ/1D+0P5Q/dD9kP0Q/PD8gHD8QHD8AFD74gLgwZD/UP7
Q/lD90P2Q/VD9EPzQ/LD8QHD8AGIDIMGQ/1D+0P5Q/hD9kP1Q/RD80Pyw/EBQ/CIDIMHQ/1D
+0P5Q/hD9kP1Q/RD80PyQ/FD8IgNgwdD/UP7Q/lD+EP2Q/VD9EPyQ/FD8IgOgwdD/UP7Q/lD
90P2Q/RD80PxQ/CID4MHQ/xD+kP4Q/ZD9UPzQ/FD8IgQgwZD/kP7Q/lD90P1Q/ND8UPwiBCD
B0P8Q/lD90P1Q/ND8UPviBGDBkP9Q/pD90P1Q/JD8EPuiBKDBUP9Q/pD90P0Q/JD70PtiBKD
BUP9Q/pD90P0Q/FD7kPsiBODBEP9Q/pD9kPzQ/BD7UPqiBODBEP9Q/lD9UPyQ+5D60PoiBOD
BEP8Q/hD9EPwQ+1D6UPmiBODBEP7Q/dD80PvQ+tD50PkiBODBEP6Q/VD8UPtQ+lD5UPhiBOD
A0P+Q/hD80PvQ+pD5kPiQ96IE4MDQ/1D9kPxQ+xD6EPjQ99D24gTgwND+kP0Q+9D6kPlQ+BD
3EPYQz5DOUM0Qy9DKkMlQx9DGkMVQw9DC0MHQwOBEkM+QzpDNUMvQypDJUMgQxpDFUMQQwtD
B0MDgRJDP0M6QzVDMEMrQyVDIEMbQxZDEEMLQwdDA0MAgRFDP0M7QzZDMUMrQyZDIUMbQxZD
EUMMQwhDBEMAgRFDQEM7QzZDMUMsQydDIUMcQxdDEUMNQwhDBEMBgRFDQUM8QzdDMkMtQydD
IkMdQxhDEkMOQwlDBUMBgRFDQkM9QzhDM0MtQyhDI0MeQxlDE0MOQwpDBkMCgRFDQkM+QzlD
NEMuQylDJEMfQxpDFEMPQwtDB0MDQwCBEENEQz9DOkM1QzBDKkMlQyBDG0MVQxFDDEMIQwRD
AYEQQ0VDQEM7QzZDMUMsQydDIUMcQxdDEkMOQwpDBkMCQwCBD0NHQ0JDPUM4QzNDLkMoQyND
HkMZQxRDEEMMQwhDBEMBgQ9DSENEQz9DOkM1Qy9DKkMlQyBDG0MWQxJDDkMKQwZDA0MAgQ5D
SkNGQ0FDPEM3QzJDLUMoQyNDHUMYQxRDEEMMQwlDBUMCgQ5DTUNIQ0NDPkM5QzRDL0MqQyVD
IEMbQxdDE0MPQwtDCEMEQwGBDUNPQ0pDRkNBQzxDN0MyQy1DKEMiQx5DGkMWQxJDDkMKQwdD
BEMBgQxDUUNNQ0hDQ0M+QzpDNUMwQytDJkMhQx1DGUMVQxFDDUMKQwZDA0MBgQtDVENPQ0tD
RkNBQzxDOEMzQy5DKUMkQyBDHEMYQxRDEUMNQwlDBkMDQwGBCkNWQ1JDTUNJQ0RDP0M7QzZD
MUMsQyhDI0MfQxtDF0MUQxBDDEMJQwZDA0MAgQlDWENUQ1BDS0NHQ0JDPkM5QzVDL0MrQydD
I0MfQxtDF0MTQw9DDEMJQwVDA0MAgQhDW0NXQ1JDTkNKQ0VDQUM8QzhDM0MuQypDJkMiQx5D
GkMWQxJDD0MLQwhDBUMCgQhDXUNZQ1VDUENMQ0hDQ0M/QztDNkMyQy1DKUMlQyFDHUMZQxVD
EUMOQwpDB0MEQwCBB0NfQ1tDV0NTQ05DSkNGQ0JDPkM5QzVDMUMsQyhDJEMgQxxDGEMUQxBD
DEMJQwVDAoEHQ2BDXENZQ1VDUUNNQ0lDRUNBQzxDOEMzQy9DK0MnQyNDH0MaQxZDEkMOQwpD
B0MDQwCBBkNhQ15DWkNWQ1JDT0NLQ0dDQ0M+QzpDNkMyQy5DKkMmQyFDHEMYQxRDEEMMQwhD
BEMAgQZDYkNfQ1tDWENUQ1BDTUNJQ0VDQUM9QzlDNUMwQyxDKEMkQx5DGkMWQxFDDUMJQwVD
AYEGQ2NDX0NcQ1lDVUNSQ05DS0NHQ0NDP0M7QzdDMkMuQypDJUMgQxtDF0MSQw5DCUMFQwGB
BkNjQ2BDXENZQ1ZDU0NPQ0xDSENEQ0BDPEM4QzRDMEMrQydDIUMdQxhDE0MOQwpDBUMBgQZD
YkNfQ1xDWUNWQ1NDUENNQ0lDRUNBQz5DOkM1QzFDLUMoQyJDHUMZQxRDD0MKQwVDAIEGQ2FD
X0NcQ1lDVkNTQ1BDTUNKQ0ZDQkM+QzpDNkMyQy1DKUMjQx5DGUMUQw5DCUMEQwCBBkNgQ11D
W0NYQ1VDUkNQQ01DSkNGQ0JDP0M7QzdDMkMuQylDI0MeQxhDE0MOQwhDA4EHQ15DW0NZQ1ZD
VENRQ09DTENJQ0ZDQkM/QztDNkMyQy1DKEMiQx1DGEMSQw1DB0MCgQdDXENZQ1dDVENSQ1BD
TkNLQ0hDRUNBQz5DOkM2QzFDLUMoQyFDHEMXQxFDC0MFQwCB/4H/gf+B/4H/gf+B/4H/gQeA
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A
/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP+A/4D/gP8=]]></BinaryString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e216</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Color3 name="WaterColor">
					<R>0.0500000007</R>
					<G>0.330000013</G>
					<B>0.360000014</B>
				</Color3>
				<float name="WaterReflectance">1</float>
				<float name="WaterTransparency">0.300000012</float>
				<float name="WaterWaveSize">0.150000006</float>
				<float name="WaterWaveSpeed">10</float>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX9e618b9b8c9d421fbdb3e80522fe7cc3">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Effects</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000293ec</UniqueId>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBXcf3bc91ddf0c4bef84fc90380122346a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">LootSpawns</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80002a89f</UniqueId>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBXe7ceb9bc22fb475e8ce34616360eb6c3">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Spawns</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80002a8c8</UniqueId>
			</Properties>
			<Item class="SpawnLocation" referent="RBX27b2b78fd330464f88f8cdea88232a67">
				<Properties>
					<bool name="AllowTeamChangeOnTouch">false</bool>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>36</X>
						<Y>-185.5</Y>
						<Z>106</Z>
						<R00>1.00000012</R00>
						<R01>2.8667273e-09</R01>
						<R02>-2.32830644e-10</R02>
						<R10>2.8667273e-09</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>-2.32830644e-10</R20>
						<R21>0</R21>
						<R22>0.99999994</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CanQuery">true</bool>
					<bool name="CanTouch">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<int name="Duration">10</int>
					<bool name="Enabled">true</bool>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="MaterialVariantSerialized"></string>
					<string name="Name">SpawnLocation</string>
					<bool name="Neutral">true</bool>
					<CoordinateFrame name="PivotOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<int name="TeamColor">194</int>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c800117880</UniqueId>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>12</X>
						<Y>1</Y>
						<Z>12</Z>
					</Vector3>
				</Properties>
				<Item class="Decal" referent="RBX7fd0dd3507624b7b8cd73d9a411cbf2e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">1</token>
						<string name="Name">Decal</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>rbxasset://textures/SpawnLocation.png</url></Content>
						<float name="Transparency">0</float>
						<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c800117881</UniqueId>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Camera" referent="RBX3ba77074edf84ba2959751bc8f09f3b7">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<CoordinateFrame name="CFrame">
					<X>43.460804</X>
					<Y>-112.420174</Y>
					<Z>-25.0725441</Z>
					<R00>-0.939675331</R00>
					<R01>-0.226209745</R01>
					<R02>0.256591976</R02>
					<R10>-0</R10>
					<R11>0.750120521</R11>
					<R12>0.661301136</R12>
					<R20>-0.342067689</R20>
					<R21>0.621408343</R21>
					<R22>-0.704869747</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">70</float>
				<token name="FieldOfViewMode">0</token>
				<CoordinateFrame name="Focus">
					<X>42.9476204</X>
					<Y>-113.742775</Y>
					<Z>-23.6628056</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">Camera</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80005b61b</UniqueId>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX4f823191fade43b5b73c149cea635802">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Environment</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80013e815</UniqueId>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX0815034a748c4094ae5282ce8f607bac">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">InteractiveEnvironment</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">5d138fcd4e17a19e0293025f00029c8f</UniqueId>
			</Properties>
			<Item class="Folder" referent="RBX9a8ce45a5acb4d74917944a64ca45a45">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Palms</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80013e821</UniqueId>
				</Properties>
				<Item class="Model" referent="RBX06f56e1368714ad787806698a17c6dc4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="LevelOfDetail">0</token>
						<CoordinateFrame name="ModelMeshCFrame">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<Vector3 name="ModelMeshSize">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<string name="Name">Palm</string>
						<bool name="NeedsPivotMigration">false</bool>
						<Ref name="PrimaryPart">null</Ref>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags">SEFSVkVTVEFCTEU=</BinaryString>
						<UniqueId name="UniqueId">451f7efdbed127dd02935b990002946d</UniqueId>
						<OptionalCoordinateFrame name="WorldPivotData">
							<CFrame>
								<X>-81.8076859</X>
								<Y>-169.894806</Y>
								<Z>119.627327</Z>
								<R00>-0.998992383</R00>
								<R01>0.0448663048</R01>
								<R02>-0.000962942548</R02>
								<R10>0.044876609</R10>
								<R11>0.998762965</R11>
								<R12>-0.0214359369</R12>
								<R20>0</R20>
								<R21>-0.0214580372</R21>
								<R22>-0.999770045</R22>
							</CFrame>
						</OptionalCoordinateFrame>
					</Properties>
					<Item class="MeshPart" referent="RBX0ccffa46aaa74249a66f75d07e70feba">
						<Properties>
							<bool name="Anchored">true</bool>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<float name="BackParamA">-0.5</float>
							<float name="BackParamB">0.5</float>
							<token name="BackSurface">0</token>
							<token name="BackSurfaceInput">0</token>
							<float name="BottomParamA">-0.5</float>
							<float name="BottomParamB">0.5</float>
							<token name="BottomSurface">0</token>
							<token name="BottomSurfaceInput">0</token>
							<CoordinateFrame name="CFrame">
								<X>-81.8076859</X>
								<Y>-169.894806</Y>
								<Z>119.627327</Z>
								<R00>-0.998992205</R00>
								<R01>0.0448663309</R01>
								<R02>-0.000962929509</R02>
								<R10>0.0448766015</R10>
								<R11>0.998763561</R11>
								<R12>-0.0214356463</R12>
								<R20>0</R20>
								<R21>-0.0214583483</R21>
								<R22>-0.999770403</R22>
							</CoordinateFrame>
							<bool name="CanCollide">true</bool>
							<bool name="CanQuery">true</bool>
							<bool name="CanTouch">true</bool>
							<bool name="CastShadow">true</bool>
							<int name="CollisionGroupId">0</int>
							<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
							<PhysicalProperties name="CustomPhysicalProperties">
								<CustomPhysics>false</CustomPhysics>
							</PhysicalProperties>
							<bool name="DoubleSided">false</bool>
							<float name="FrontParamA">-0.5</float>
							<float name="FrontParamB">0.5</float>
							<token name="FrontSurface">0</token>
							<token name="FrontSurfaceInput">0</token>
							<bool name="HasJointOffset">false</bool>
							<bool name="HasSkinnedMesh">false</bool>
							<Vector3 name="InitialSize">
								<X>39.7008667</X>
								<Y>49.590271</Y>
								<Z>32.8112335</Z>
							</Vector3>
							<Vector3 name="JointOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<BinaryString name="LODData"></BinaryString>
							<float name="LeftParamA">-0.5</float>
							<float name="LeftParamB">0.5</float>
							<token name="LeftSurface">0</token>
							<token name="LeftSurfaceInput">0</token>
							<bool name="Locked">false</bool>
							<bool name="Massless">false</bool>
							<token name="Material">256</token>
							<string name="MaterialVariantSerialized"></string>
							<Content name="MeshID"><url>rbxassetid://454473571</url></Content>
							<Content name="MeshId"><url>rbxassetid://454473571</url></Content>
							<string name="Name">Palm Tree</string>
							<SharedString name="PhysicalConfigData">LOo9aNwQ/Yf4oXY5DArdaw==</SharedString>
							<BinaryString name="PhysicsData"></BinaryString>
							<CoordinateFrame name="PivotOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<float name="Reflectance">0</float>
							<token name="RenderFidelity">1</token>
							<float name="RightParamA">-0.5</float>
							<float name="RightParamB">0.5</float>
							<token name="RightSurface">0</token>
							<token name="RightSurfaceInput">0</token>
							<int name="RootPriority">0</int>
							<Vector3 name="RotVelocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int64 name="SourceAssetId">454473582</int64>
							<BinaryString name="Tags"></BinaryString>
							<Content name="TextureID"><url>rbxassetid://454473577</url></Content>
							<float name="TopParamA">-0.5</float>
							<float name="TopParamB">0.5</float>
							<token name="TopSurface">0</token>
							<token name="TopSurfaceInput">0</token>
							<float name="Transparency">0</float>
							<UniqueId name="UniqueId">451f7efdbed127dd02935b990002946e</UniqueId>
							<Vector3 name="Velocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int name="VertexCount">0</int>
							<Vector3 name="size">
								<X>26.7008667</X>
								<Y>33.6275635</Y>
								<Z>22.0672417</Z>
							</Vector3>
						</Properties>
						<Item class="Part" referent="RBX39e543827eb64ee484ce807075729b59">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">0</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>-72.1824036</X>
									<Y>-184.313141</Y>
									<Z>119.622307</Z>
									<R00>0.00140502781</R00>
									<R01>-0.147478923</R01>
									<R02>-0.989063919</R02>
									<R10>0.163232058</R10>
									<R11>0.97583431</R11>
									<R12>-0.145274535</R12>
									<R20>0.986587167</R20>
									<R21>-0.161243841</R21>
									<R22>0.0254445411</R22>
								</CoordinateFrame>
								<bool name="CanCollide">true</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<bool name="CastShadow">true</bool>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">256</token>
								<string name="MaterialVariantSerialized"></string>
								<string name="Name">Base</string>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">0</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">0</float>
								<UniqueId name="UniqueId">451f7efdbed127dd02935b990002946f</UniqueId>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<token name="formFactorRaw">1</token>
								<token name="shape">1</token>
								<Vector3 name="size">
									<X>0.400000006</X>
									<Y>0.0999999642</Y>
									<Z>0.200000003</Z>
								</Vector3>
							</Properties>
							<Item class="ProximityPrompt" referent="RBXca7616bee3324387b594187938866280">
								<Properties>
									<string name="ActionText">Hit that tree!</string>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<bool name="ClickablePrompt">true</bool>
									<bool name="Enabled">false</bool>
									<token name="Exclusivity">0</token>
									<token name="GamepadKeyCode">1000</token>
									<float name="HoldDuration">1</float>
									<token name="KeyboardKeyCode">101</token>
									<float name="MaxActivationDistance">10</float>
									<string name="Name">ProximityPrompt</string>
									<string name="ObjectText"></string>
									<bool name="RequiresLineOfSight">false</bool>
									<Ref name="RootLocalizationTable">null</Ref>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<Vector2 name="UIOffset">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<UniqueId name="UniqueId">451f7efdbed127dd02935b9900029470</UniqueId>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="PackageLink" referent="RBX92f28b1e9dad4b7882f93a070c79eae8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoUpdate">false</bool>
							<string name="Name">PackageLink</string>
							<Content name="PackageIdSerialize"><url>rbxassetid://9641760243</url></Content>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">451f7efdbed127dd02935b9900029471</UniqueId>
							<int64 name="VersionIdSerialize">6</int64>
						</Properties>
					</Item>
				</Item>
				<Item class="Model" referent="RBXa75effcf39cc4db790832f41312268ef">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="LevelOfDetail">0</token>
						<CoordinateFrame name="ModelMeshCFrame">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<Vector3 name="ModelMeshSize">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<string name="Name">Palm</string>
						<bool name="NeedsPivotMigration">false</bool>
						<Ref name="PrimaryPart">null</Ref>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags">SEFSVkVTVEFCTEU=</BinaryString>
						<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b780</UniqueId>
						<OptionalCoordinateFrame name="WorldPivotData">
							<CFrame>
								<X>141.050446</X>
								<Y>-169.186218</Y>
								<Z>97.3663788</Z>
								<R00>0.707106709</R00>
								<R01>-8.42400212e-08</R01>
								<R02>-0.707106829</R02>
								<R10>0</R10>
								<R11>1.00000024</R11>
								<R12>1.19133382e-07</R12>
								<R20>0.707106709</R20>
								<R21>8.42400212e-08</R21>
								<R22>0.707106829</R22>
							</CFrame>
						</OptionalCoordinateFrame>
					</Properties>
					<Item class="MeshPart" referent="RBXdb3e638b5ff74b6889c5404c06e19f9e">
						<Properties>
							<bool name="Anchored">true</bool>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<float name="BackParamA">-0.5</float>
							<float name="BackParamB">0.5</float>
							<token name="BackSurface">0</token>
							<token name="BackSurfaceInput">0</token>
							<float name="BottomParamA">-0.5</float>
							<float name="BottomParamB">0.5</float>
							<token name="BottomSurface">0</token>
							<token name="BottomSurfaceInput">0</token>
							<CoordinateFrame name="CFrame">
								<X>141.050446</X>
								<Y>-169.186218</Y>
								<Z>97.3663788</Z>
								<R00>0.707106352</R00>
								<R01>-6.36100481e-07</R01>
								<R02>-0.707107484</R02>
								<R10>1.3868951e-17</R10>
								<R11>1.00000179</R11>
								<R12>8.9771936e-07</R12>
								<R20>0.707106352</R20>
								<R21>6.30832119e-07</R21>
								<R22>0.707107484</R22>
							</CoordinateFrame>
							<bool name="CanCollide">true</bool>
							<bool name="CanQuery">true</bool>
							<bool name="CanTouch">true</bool>
							<bool name="CastShadow">true</bool>
							<int name="CollisionGroupId">0</int>
							<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
							<PhysicalProperties name="CustomPhysicalProperties">
								<CustomPhysics>false</CustomPhysics>
							</PhysicalProperties>
							<bool name="DoubleSided">false</bool>
							<float name="FrontParamA">-0.5</float>
							<float name="FrontParamB">0.5</float>
							<token name="FrontSurface">0</token>
							<token name="FrontSurfaceInput">0</token>
							<bool name="HasJointOffset">false</bool>
							<bool name="HasSkinnedMesh">false</bool>
							<Vector3 name="InitialSize">
								<X>39.7008667</X>
								<Y>49.590271</Y>
								<Z>32.8112335</Z>
							</Vector3>
							<Vector3 name="JointOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<BinaryString name="LODData"></BinaryString>
							<float name="LeftParamA">-0.5</float>
							<float name="LeftParamB">0.5</float>
							<token name="LeftSurface">0</token>
							<token name="LeftSurfaceInput">0</token>
							<bool name="Locked">false</bool>
							<bool name="Massless">false</bool>
							<token name="Material">256</token>
							<string name="MaterialVariantSerialized"></string>
							<Content name="MeshID"><url>rbxassetid://454473571</url></Content>
							<Content name="MeshId"><url>rbxassetid://454473571</url></Content>
							<string name="Name">Palm Tree</string>
							<SharedString name="PhysicalConfigData">LOo9aNwQ/Yf4oXY5DArdaw==</SharedString>
							<BinaryString name="PhysicsData"></BinaryString>
							<CoordinateFrame name="PivotOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<float name="Reflectance">0</float>
							<token name="RenderFidelity">1</token>
							<float name="RightParamA">-0.5</float>
							<float name="RightParamB">0.5</float>
							<token name="RightSurface">0</token>
							<token name="RightSurfaceInput">0</token>
							<int name="RootPriority">0</int>
							<Vector3 name="RotVelocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int64 name="SourceAssetId">454473582</int64>
							<BinaryString name="Tags"></BinaryString>
							<Content name="TextureID"><url>rbxassetid://454473577</url></Content>
							<float name="TopParamA">-0.5</float>
							<float name="TopParamB">0.5</float>
							<token name="TopSurface">0</token>
							<token name="TopSurfaceInput">0</token>
							<float name="Transparency">0</float>
							<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b781</UniqueId>
							<Vector3 name="Velocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int name="VertexCount">0</int>
							<Vector3 name="size">
								<X>26.7008667</X>
								<Y>33.6275635</Y>
								<Z>22.0672417</Z>
							</Vector3>
						</Properties>
						<Item class="Part" referent="RBX9108372154634c67975b247ab36406a2">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">0</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>133.57814</X>
									<Y>-183.154755</Y>
									<Z>90.3251419</Z>
									<R00>0.70412451</R00>
									<R01>0.0358442739</R01>
									<R02>0.709171474</R02>
									<R10>0.141922846</R10>
									<R11>0.971470594</R11>
									<R12>-0.190016508</R12>
									<R20>-0.695749998</R20>
									<R21>0.234443665</R21>
									<R22>0.678946674</R22>
								</CoordinateFrame>
								<bool name="CanCollide">true</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<bool name="CastShadow">true</bool>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">256</token>
								<string name="MaterialVariantSerialized"></string>
								<string name="Name">Base</string>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">0</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">0</float>
								<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b782</UniqueId>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<token name="formFactorRaw">1</token>
								<token name="shape">1</token>
								<Vector3 name="size">
									<X>0.400000006</X>
									<Y>0.0999999642</Y>
									<Z>0.200000003</Z>
								</Vector3>
							</Properties>
							<Item class="ProximityPrompt" referent="RBXcde62263414142179b405372f85ed1b7">
								<Properties>
									<string name="ActionText">Hit that tree!</string>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<bool name="ClickablePrompt">true</bool>
									<bool name="Enabled">false</bool>
									<token name="Exclusivity">0</token>
									<token name="GamepadKeyCode">1000</token>
									<float name="HoldDuration">1</float>
									<token name="KeyboardKeyCode">101</token>
									<float name="MaxActivationDistance">10</float>
									<string name="Name">ProximityPrompt</string>
									<string name="ObjectText"></string>
									<bool name="RequiresLineOfSight">false</bool>
									<Ref name="RootLocalizationTable">null</Ref>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<Vector2 name="UIOffset">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b783</UniqueId>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="PackageLink" referent="RBX60d875768cd040c78b4eac7e07f724cd">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoUpdate">false</bool>
							<string name="Name">PackageLink</string>
							<Content name="PackageIdSerialize"><url>rbxassetid://9641760243</url></Content>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b784</UniqueId>
							<int64 name="VersionIdSerialize">6</int64>
						</Properties>
					</Item>
				</Item>
				<Item class="Model" referent="RBXd6844273683843d08be3be75ed47cdc5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="LevelOfDetail">0</token>
						<CoordinateFrame name="ModelMeshCFrame">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<Vector3 name="ModelMeshSize">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<string name="Name">Palm</string>
						<bool name="NeedsPivotMigration">false</bool>
						<Ref name="PrimaryPart">null</Ref>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags">SEFSVkVTVEFCTEU=</BinaryString>
						<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9c2</UniqueId>
						<OptionalCoordinateFrame name="WorldPivotData">
							<CFrame>
								<X>-49.4198837</X>
								<Y>-169.384796</Y>
								<Z>-42.1317291</Z>
								<R00>-0.70704782</R00>
								<R01>0.0138089517</R01>
								<R02>-0.707031131</R02>
								<R10>0.00488170655</R10>
								<R11>0.999881029</R11>
								<R12>0.0146469893</R12>
								<R20>0.70714891</R20>
								<R21>0.00690443348</R21>
								<R22>-0.707031131</R22>
							</CFrame>
						</OptionalCoordinateFrame>
					</Properties>
					<Item class="MeshPart" referent="RBX23197dae44b24590aff5baca97f4abeb">
						<Properties>
							<bool name="Anchored">true</bool>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<float name="BackParamA">-0.5</float>
							<float name="BackParamB">0.5</float>
							<token name="BackSurface">0</token>
							<token name="BackSurfaceInput">0</token>
							<float name="BottomParamA">-0.5</float>
							<float name="BottomParamB">0.5</float>
							<token name="BottomSurface">0</token>
							<token name="BottomSurfaceInput">0</token>
							<CoordinateFrame name="CFrame">
								<X>-49.4198837</X>
								<Y>-169.384796</Y>
								<Z>-42.1317291</Z>
								<R00>-0.707047462</R00>
								<R01>0.0138084264</R01>
								<R02>-0.707031786</R02>
								<R10>0.00488170423</R10>
								<R11>0.999882579</R11>
								<R12>0.0146477818</R12>
								<R20>0.707148552</R20>
								<R21>0.00690389238</R21>
								<R22>-0.707031786</R22>
							</CoordinateFrame>
							<bool name="CanCollide">true</bool>
							<bool name="CanQuery">true</bool>
							<bool name="CanTouch">true</bool>
							<bool name="CastShadow">true</bool>
							<int name="CollisionGroupId">0</int>
							<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
							<PhysicalProperties name="CustomPhysicalProperties">
								<CustomPhysics>false</CustomPhysics>
							</PhysicalProperties>
							<bool name="DoubleSided">false</bool>
							<float name="FrontParamA">-0.5</float>
							<float name="FrontParamB">0.5</float>
							<token name="FrontSurface">0</token>
							<token name="FrontSurfaceInput">0</token>
							<bool name="HasJointOffset">false</bool>
							<bool name="HasSkinnedMesh">false</bool>
							<Vector3 name="InitialSize">
								<X>39.7008667</X>
								<Y>49.590271</Y>
								<Z>32.8112335</Z>
							</Vector3>
							<Vector3 name="JointOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<BinaryString name="LODData"></BinaryString>
							<float name="LeftParamA">-0.5</float>
							<float name="LeftParamB">0.5</float>
							<token name="LeftSurface">0</token>
							<token name="LeftSurfaceInput">0</token>
							<bool name="Locked">false</bool>
							<bool name="Massless">false</bool>
							<token name="Material">256</token>
							<string name="MaterialVariantSerialized"></string>
							<Content name="MeshID"><url>rbxassetid://454473571</url></Content>
							<Content name="MeshId"><url>rbxassetid://454473571</url></Content>
							<string name="Name">Palm Tree</string>
							<SharedString name="PhysicalConfigData">LOo9aNwQ/Yf4oXY5DArdaw==</SharedString>
							<BinaryString name="PhysicsData"></BinaryString>
							<CoordinateFrame name="PivotOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<float name="Reflectance">0</float>
							<token name="RenderFidelity">1</token>
							<float name="RightParamA">-0.5</float>
							<float name="RightParamB">0.5</float>
							<token name="RightSurface">0</token>
							<token name="RightSurfaceInput">0</token>
							<int name="RootPriority">0</int>
							<Vector3 name="RotVelocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int64 name="SourceAssetId">454473582</int64>
							<BinaryString name="Tags"></BinaryString>
							<Content name="TextureID"><url>rbxassetid://454473577</url></Content>
							<float name="TopParamA">-0.5</float>
							<float name="TopParamB">0.5</float>
							<token name="TopSurface">0</token>
							<token name="TopSurfaceInput">0</token>
							<float name="Transparency">0</float>
							<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9c3</UniqueId>
							<Vector3 name="Velocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int name="VertexCount">0</int>
							<Vector3 name="size">
								<X>26.7008667</X>
								<Y>33.6275635</Y>
								<Z>22.0672417</Z>
							</Vector3>
						</Properties>
						<Item class="Part" referent="RBX91f9b2cbb1d046118e8dae2a0ae6be9f">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">0</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>-42.5721207</X>
									<Y>-183.397308</Y>
									<Z>-49.7008934</Z>
									<R00>0.697635233</R00>
									<R01>-0.221006691</R01>
									<R02>-0.681514442</R02>
									<R10>0.127436489</R10>
									<R11>0.974344671</R11>
									<R12>-0.18551527</R12>
									<R20>0.705029786</R20>
									<R21>0.0425704867</R21>
									<R22>0.707899332</R22>
								</CoordinateFrame>
								<bool name="CanCollide">true</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<bool name="CastShadow">true</bool>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">256</token>
								<string name="MaterialVariantSerialized"></string>
								<string name="Name">Base</string>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">0</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">0</float>
								<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9c4</UniqueId>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<token name="formFactorRaw">1</token>
								<token name="shape">1</token>
								<Vector3 name="size">
									<X>0.400000006</X>
									<Y>0.0999999642</Y>
									<Z>0.200000003</Z>
								</Vector3>
							</Properties>
							<Item class="ProximityPrompt" referent="RBXb40a1512cd954d9f90d62fe7fd2d13d0">
								<Properties>
									<string name="ActionText">Hit that tree!</string>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<bool name="ClickablePrompt">true</bool>
									<bool name="Enabled">false</bool>
									<token name="Exclusivity">0</token>
									<token name="GamepadKeyCode">1000</token>
									<float name="HoldDuration">1</float>
									<token name="KeyboardKeyCode">101</token>
									<float name="MaxActivationDistance">10</float>
									<string name="Name">ProximityPrompt</string>
									<string name="ObjectText"></string>
									<bool name="RequiresLineOfSight">false</bool>
									<Ref name="RootLocalizationTable">null</Ref>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<Vector2 name="UIOffset">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9c5</UniqueId>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="PackageLink" referent="RBXf5b598b841be4492be88dc4e80d847db">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoUpdate">false</bool>
							<string name="Name">PackageLink</string>
							<Content name="PackageIdSerialize"><url>rbxassetid://9641760243</url></Content>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9c6</UniqueId>
							<int64 name="VersionIdSerialize">6</int64>
						</Properties>
					</Item>
				</Item>
				<Item class="Model" referent="RBX0932ee96ada54b4f80086d2b9dfbda23">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="LevelOfDetail">0</token>
						<CoordinateFrame name="ModelMeshCFrame">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<Vector3 name="ModelMeshSize">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<string name="Name">Palm</string>
						<bool name="NeedsPivotMigration">false</bool>
						<Ref name="PrimaryPart">null</Ref>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags">SEFSVkVTVEFCTEU=</BinaryString>
						<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9cb</UniqueId>
						<OptionalCoordinateFrame name="WorldPivotData">
							<CFrame>
								<X>116.069504</X>
								<Y>-169.793579</Y>
								<Z>-6.92733765</Z>
								<R00>0.999237955</R00>
								<R01>-0.0390300639</R01>
								<R02>0.000457048416</R02>
								<R10>0.0390327312</R10>
								<R11>0.999169707</R11>
								<R12>-0.0116999764</R12>
								<R20>0</R20>
								<R21>0.0117091388</R21>
								<R22>0.999931693</R22>
							</CFrame>
						</OptionalCoordinateFrame>
					</Properties>
					<Item class="MeshPart" referent="RBXd048c1971d3b4f34aa91af488b7cd050">
						<Properties>
							<bool name="Anchored">true</bool>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<float name="BackParamA">-0.5</float>
							<float name="BackParamB">0.5</float>
							<token name="BackSurface">0</token>
							<token name="BackSurfaceInput">0</token>
							<float name="BottomParamA">-0.5</float>
							<float name="BottomParamB">0.5</float>
							<token name="BottomSurface">0</token>
							<token name="BottomSurfaceInput">0</token>
							<CoordinateFrame name="CFrame">
								<X>116.069504</X>
								<Y>-169.793579</Y>
								<Z>-6.92733765</Z>
								<R00>0.999237478</R00>
								<R01>-0.0390301272</R01>
								<R02>0.000457018585</R02>
								<R10>0.0390327126</R10>
								<R11>0.999171257</R11>
								<R12>-0.0116992099</R12>
								<R20>1.1640737e-10</R20>
								<R21>0.0117099332</R21>
								<R22>0.999932647</R22>
							</CoordinateFrame>
							<bool name="CanCollide">true</bool>
							<bool name="CanQuery">true</bool>
							<bool name="CanTouch">true</bool>
							<bool name="CastShadow">true</bool>
							<int name="CollisionGroupId">0</int>
							<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
							<PhysicalProperties name="CustomPhysicalProperties">
								<CustomPhysics>false</CustomPhysics>
							</PhysicalProperties>
							<bool name="DoubleSided">false</bool>
							<float name="FrontParamA">-0.5</float>
							<float name="FrontParamB">0.5</float>
							<token name="FrontSurface">0</token>
							<token name="FrontSurfaceInput">0</token>
							<bool name="HasJointOffset">false</bool>
							<bool name="HasSkinnedMesh">false</bool>
							<Vector3 name="InitialSize">
								<X>39.7008667</X>
								<Y>49.590271</Y>
								<Z>32.8112335</Z>
							</Vector3>
							<Vector3 name="JointOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<BinaryString name="LODData"></BinaryString>
							<float name="LeftParamA">-0.5</float>
							<float name="LeftParamB">0.5</float>
							<token name="LeftSurface">0</token>
							<token name="LeftSurfaceInput">0</token>
							<bool name="Locked">false</bool>
							<bool name="Massless">false</bool>
							<token name="Material">256</token>
							<string name="MaterialVariantSerialized"></string>
							<Content name="MeshID"><url>rbxassetid://454473571</url></Content>
							<Content name="MeshId"><url>rbxassetid://454473571</url></Content>
							<string name="Name">Palm Tree</string>
							<SharedString name="PhysicalConfigData">LOo9aNwQ/Yf4oXY5DArdaw==</SharedString>
							<BinaryString name="PhysicsData"></BinaryString>
							<CoordinateFrame name="PivotOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<float name="Reflectance">0</float>
							<token name="RenderFidelity">1</token>
							<float name="RightParamA">-0.5</float>
							<float name="RightParamB">0.5</float>
							<token name="RightSurface">0</token>
							<token name="RightSurfaceInput">0</token>
							<int name="RootPriority">0</int>
							<Vector3 name="RotVelocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int64 name="SourceAssetId">454473582</int64>
							<BinaryString name="Tags"></BinaryString>
							<Content name="TextureID"><url>rbxassetid://454473577</url></Content>
							<float name="TopParamA">-0.5</float>
							<float name="TopParamB">0.5</float>
							<token name="TopSurface">0</token>
							<token name="TopSurfaceInput">0</token>
							<float name="Transparency">0</float>
							<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9cc</UniqueId>
							<Vector3 name="Velocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int name="VertexCount">0</int>
							<Vector3 name="size">
								<X>26.7008667</X>
								<Y>33.6275635</Y>
								<Z>22.0672417</Z>
							</Vector3>
						</Properties>
						<Item class="Part" referent="RBX13a8e57a349d44219d1944414f2287be">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">0</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>106.360031</X>
									<Y>-184.154663</Y>
									<Z>-6.78610086</Z>
									<R00>-7.44989375e-05</R00>
									<R01>0.153124437</R01>
									<R02>0.988206506</R02>
									<R10>0.153617591</R10>
									<R11>0.976480722</R11>
									<R12>-0.151296139</R12>
									<R20>-0.988131344</R20>
									<R21>0.151796341</R21>
									<R22>-0.0235956535</R22>
								</CoordinateFrame>
								<bool name="CanCollide">true</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<bool name="CastShadow">true</bool>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">256</token>
								<string name="MaterialVariantSerialized"></string>
								<string name="Name">Base</string>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">0</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">0</float>
								<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9cd</UniqueId>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<token name="formFactorRaw">1</token>
								<token name="shape">1</token>
								<Vector3 name="size">
									<X>0.400000006</X>
									<Y>0.0999999642</Y>
									<Z>0.200000003</Z>
								</Vector3>
							</Properties>
							<Item class="ProximityPrompt" referent="RBXff20c19b6aa145b5a1df32eb79f5ff2f">
								<Properties>
									<string name="ActionText">Hit that tree!</string>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<bool name="ClickablePrompt">true</bool>
									<bool name="Enabled">false</bool>
									<token name="Exclusivity">0</token>
									<token name="GamepadKeyCode">1000</token>
									<float name="HoldDuration">1</float>
									<token name="KeyboardKeyCode">101</token>
									<float name="MaxActivationDistance">10</float>
									<string name="Name">ProximityPrompt</string>
									<string name="ObjectText"></string>
									<bool name="RequiresLineOfSight">false</bool>
									<Ref name="RootLocalizationTable">null</Ref>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<Vector2 name="UIOffset">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9ce</UniqueId>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="PackageLink" referent="RBX8fbb427e560e4da8bf2dbbfde69151cc">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoUpdate">false</bool>
							<string name="Name">PackageLink</string>
							<Content name="PackageIdSerialize"><url>rbxassetid://9641760243</url></Content>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002b9cf</UniqueId>
							<int64 name="VersionIdSerialize">6</int64>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="SoundService" referent="RBX9d5dfde169fc47c88eeae29f358060c2">
		<Properties>
			<token name="AmbientReverb">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="DistanceFactor">3.32999992</float>
			<float name="DopplerScale">1</float>
			<string name="Name">SoundService</string>
			<bool name="RespectFilteringEnabled">true</bool>
			<float name="RolloffScale">1</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e14b</UniqueId>
		</Properties>
	</Item>
	<Item class="NonReplicatedCSGDictionaryService" referent="RBX9f3a4212715f4d598ed4695d557fe877">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">NonReplicatedCSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506ad</UniqueId>
		</Properties>
	</Item>
	<Item class="CSGDictionaryService" referent="RBXf6e798ecf930421d97d5292d49fe530b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506ae</UniqueId>
		</Properties>
	</Item>
	<Item class="Chat" referent="RBXb8a6168ac1aa4c1c9527140a5c4937a6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="BubbleChatEnabled">false</bool>
			<bool name="LoadDefaultChat">true</bool>
			<string name="Name">Chat</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e15d</UniqueId>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBX74a3643a4d9d4fd6994d1154c823bcdc">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506b4</UniqueId>
		</Properties>
	</Item>
	<Item class="Players" referent="RBX17ed56f406344b74ac146b500168853d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CharacterAutoLoads">true</bool>
			<int name="MaxPlayersInternal">60</int>
			<string name="Name">Players</string>
			<int name="PreferredPlayersInternal">60</int>
			<float name="RespawnTime">5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e160</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedFirst" referent="RBX085d1ebcec804adfb57a486f3529cfc6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedFirst</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506ba</UniqueId>
		</Properties>
	</Item>
	<Item class="TweenService" referent="RBX2304bfaaebcd44b0b76eec1e0b5d1537">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TweenService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506bc</UniqueId>
		</Properties>
	</Item>
	<Item class="PermissionsService" referent="RBXb7cb1f6bbd2049e5b173b157ab42883f">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PermissionsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506c0</UniqueId>
		</Properties>
	</Item>
	<Item class="PlayerEmulatorService" referent="RBXdf5a9559313641c497d4540c42685cff">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CustomPoliciesEnabled">false</bool>
			<string name="EmulatedCountryCode"></string>
			<string name="EmulatedGameLocale"></string>
			<string name="Name">PlayerEmulatorService</string>
			<bool name="PlayerEmulationEnabled">false</bool>
			<BinaryString name="SerializedEmulatedPolicyInfo"></BinaryString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506c2</UniqueId>
		</Properties>
	</Item>
	<Item class="StudioData" referent="RBX1938a8f4b12c4cd2a62a42150f7eb5f4">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int64 name="CommitInflightAuthorId">0</int64>
			<string name="CommitInflightGuid"></string>
			<int name="CommitInflightPlaceVersion">0</int>
			<bool name="EnableScriptCollabByDefaultOnLoad">false</bool>
			<string name="Name">StudioData</string>
			<int64 name="SourceAssetId">-1</int64>
			<int64 name="SrcPlaceId">9630839598</int64>
			<int64 name="SrcUniverseId">3580712183</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e16e</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterPlayer" referent="RBX229fb54a9e9a4b10ae3c82e78c41a0a0">
		<Properties>
			<bool name="AllowCustomAnimations">true</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoJumpEnabled">true</bool>
			<float name="CameraMaxZoomDistance">400</float>
			<float name="CameraMinZoomDistance">0.5</float>
			<token name="CameraMode">0</token>
			<float name="CharacterJumpHeight">7.19999981</float>
			<float name="CharacterJumpPower">50</float>
			<float name="CharacterMaxSlopeAngle">89</float>
			<bool name="CharacterUseJumpPower">true</bool>
			<float name="CharacterWalkSpeed">16</float>
			<token name="DevCameraOcclusionMode">0</token>
			<token name="DevComputerCameraMovementMode">0</token>
			<token name="DevComputerMovementMode">0</token>
			<token name="DevTouchCameraMovementMode">0</token>
			<token name="DevTouchMovementMode">0</token>
			<bool name="EnableMouseLockOption">true</bool>
			<int64 name="GameSettingsAssetIDFace">0</int64>
			<int64 name="GameSettingsAssetIDHead">0</int64>
			<int64 name="GameSettingsAssetIDLeftArm">0</int64>
			<int64 name="GameSettingsAssetIDLeftLeg">0</int64>
			<int64 name="GameSettingsAssetIDPants">0</int64>
			<int64 name="GameSettingsAssetIDRightArm">0</int64>
			<int64 name="GameSettingsAssetIDRightLeg">0</int64>
			<int64 name="GameSettingsAssetIDShirt">0</int64>
			<int64 name="GameSettingsAssetIDTeeShirt">0</int64>
			<int64 name="GameSettingsAssetIDTorso">0</int64>
			<token name="GameSettingsAvatar">1</token>
			<token name="GameSettingsR15Collision">0</token>
			<NumberRange name="GameSettingsScaleRangeBodyType">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHead">0.95 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHeight">0.9 1.05 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeProportion">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeWidth">0.7 1 </NumberRange>
			<float name="HealthDisplayDistance">100</float>
			<bool name="LoadCharacterAppearance">true</bool>
			<token name="LoadCharacterLayeredClothing">0</token>
			<string name="Name">StarterPlayer</string>
			<float name="NameDisplayDistance">100</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e16f</UniqueId>
			<bool name="UserEmotesEnabled">true</bool>
		</Properties>
		<Item class="StarterPlayerScripts" referent="RBXf9e9773aad154d3085014036569ce17e">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterPlayerScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e20c</UniqueId>
			</Properties>
			<Item class="LocalScript" referent="RBX6ef9529f69524024b6e4fd42114c30bd">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">RoactAppRoot</string>
					<string name="ScriptGuid">{b9e3cfc7-2f7a-4c8a-9812-939535f6df25}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local Roact = require(ReplicatedStorage.Roact)
local RoactRodux = require(ReplicatedStorage.RoactRodux)
local clientStore = require(ReplicatedStorage.clientStore)
local App = require(ReplicatedStorage.Components.App)

local app = Roact.createElement(RoactRodux.StoreProvider, {
    store = clientStore,
}, {
    Roact.createElement(App),
})

local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
-- Create our UI, which now runs on its own!
local handle = Roact.mount(app, PlayerGui, "Root App")

-- Later, we can destroy our UI and disconnect everything correctly.
-- wait(10)
-- Roact.unmount(handle)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b820</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX99d7c962d31a4629845114a675298818">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">RoactAppRoot</string>
					<string name="ScriptGuid">{c64febe6-114b-4e39-8728-e31829d73d5f}</string>
					<ProtectedString name="Source"><![CDATA[return {
	properties = {
		Disabled = false,
	},
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b82a</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="StarterCharacterScripts" referent="RBX173edf673f0d4946836a8197abfa3955">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterCharacterScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e217</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBX0c99f8fe9ccc4f31904f2dc022e26fd6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterPack</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e170</UniqueId>
		</Properties>
		<Item class="Tool" referent="RBXc9d0a5c084ef42df8ed463fd3ca8c5a2">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="CanBeDropped">true</bool>
				<bool name="Enabled">true</bool>
				<CoordinateFrame name="Grip">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="ManualActivationOnly">false</bool>
				<string name="Name">Tiny Axe</string>
				<bool name="RequiresHandle">true</bool>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<Content name="TextureId"><null></null></Content>
				<string name="ToolTip"></string>
				<UniqueId name="UniqueId">3922028a5611b30b0291e4df001457bf</UniqueId>
			</Properties>
			<Item class="Part" referent="RBXecbfdbdc85b54283af1ab498adb4ba94">
				<Properties>
					<bool name="Anchored">false</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>32.5613518</X>
						<Y>-182.502838</Y>
						<Z>95.0056763</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CanQuery">true</bool>
					<bool name="CanTouch">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="MaterialVariantSerialized"></string>
					<string name="Name">Handle</string>
					<CoordinateFrame name="PivotOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<UniqueId name="UniqueId">3922028a5611b30b0291e4df000ff316</UniqueId>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>0.0772975385</X>
						<Y>0.0786442459</Y>
						<Z>0.0781953335</Z>
					</Vector3>
				</Properties>
				<Item class="MeshPart" referent="RBXa539ae3cad9c465f83d1f02cb6e1a359">
					<Properties>
						<bool name="Anchored">false</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>32.5733337</X>
							<Y>-182.043137</Y>
							<Z>94.7565842</Z>
							<R00>0</R00>
							<R01>0</R01>
							<R02>1</R02>
							<R10>-1</R10>
							<R11>0</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>-1</R21>
							<R22>0</R22>
						</CoordinateFrame>
						<bool name="CanCollide">true</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<bool name="CastShadow">true</bool>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DoubleSided">false</bool>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<Vector3 name="InitialSize">
							<X>49.9999962</X>
							<Y>21.2772751</Y>
							<Z>6.91341066</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="LODData"></BinaryString>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshID"><url>rbxassetid://3262861443</url></Content>
						<Content name="MeshId"><url>rbxassetid://3262861443</url></Content>
						<string name="Name">Meshes/Hatchet</string>
						<SharedString name="PhysicalConfigData">RWni7vnZUCWl+3S7SWu+1w==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<UniqueId name="UniqueId">3922028a5611b30b0291e4df000ff317</UniqueId>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.69999743</X>
							<Y>0.723426402</Y>
							<Z>0.235055581</Z>
						</Vector3>
					</Properties>
					<Item class="WeldConstraint" referent="RBX4e4ffc0c5c324489b89a288fc28b5eef">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<CoordinateFrame name="CFrame0">
								<X>0.0119819641</X>
								<Y>0.459701538</Y>
								<Z>-0.249092102</Z>
								<R00>0</R00>
								<R01>0</R01>
								<R02>1</R02>
								<R10>-1</R10>
								<R11>0</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>-1</R21>
								<R22>0</R22>
							</CoordinateFrame>
							<string name="Name">WeldConstraint</string>
							<Ref name="Part0Internal">RBXecbfdbdc85b54283af1ab498adb4ba94</Ref>
							<Ref name="Part1Internal">RBXa539ae3cad9c465f83d1f02cb6e1a359</Ref>
							<int64 name="SourceAssetId">-1</int64>
							<int name="State">3</int>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">3922028a5611b30b0291e4df000ff318</UniqueId>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="StarterGui" referent="RBXa5a9ac0658ff4aa2b1ac24f3507a3e96">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterGui</string>
			<bool name="ResetPlayerGuiOnSpawn">true</bool>
			<token name="ScreenOrientation">2</token>
			<bool name="ShowDevelopmentGui">true</bool>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e171</UniqueId>
			<token name="VirtualCursorMode">0</token>
		</Properties>
	</Item>
	<Item class="LocalizationService" referent="RBXc47519e3e7a04719bec8358329b726cf">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LocalizationService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e173</UniqueId>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX9689d51b9ffa43b8add5ec66c50b84e2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teleport Service</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e177</UniqueId>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX9fed430a69b740e88ac0ac9cbb96a097">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CollectionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506cf</UniqueId>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBXc6cf0907b385449c94b7dcfb9d90de7c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506d0</UniqueId>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX03789d0765b94934ac46e31334211b9a">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Geometry</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506d2</UniqueId>
		</Properties>
	</Item>
	<Item class="InsertService" referent="RBX98a4a3426f2943bd9915baf5df9fedeb">
		<Properties>
			<bool name="AllowClientInsertModels">false</bool>
			<bool name="AllowInsertFreeModels">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">InsertService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e17e</UniqueId>
		</Properties>
		<Item class="StringValue" referent="RBXc6e6f1f16d9b46c8ab6529b913df0d3a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">InsertionHash</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c800029d2b</UniqueId>
				<string name="Value">{7ffad34c-5240-474c-bf3e-7997855602a2}</string>
			</Properties>
		</Item>
	</Item>
	<Item class="GamePassService" referent="RBX1a11b359d5ad434f9b45fd5fa42d5f17">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GamePassService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506d5</UniqueId>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX798cba57dacf496597a9ac8ace357c8f">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506d6</UniqueId>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX0eedd261d85e46ad83664f5f8df81acb">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CookiesService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506d7</UniqueId>
		</Properties>
	</Item>
	<Item class="VRService" referent="RBXc76e09a1558841ab808aed2c9f8a420e">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VRService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506e1</UniqueId>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBXe99caa3f246a4a7cbf26c87982458c31">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ContextActionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506e3</UniqueId>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBXfb4c876de30b46aaa66797a1479e8af6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506e5</UniqueId>
		</Properties>
	</Item>
	<Item class="AssetService" referent="RBX35a6c3eea7984953a4b724a7e7bb7640">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AssetService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506e6</UniqueId>
		</Properties>
	</Item>
	<Item class="TouchInputService" referent="RBX5ec847bbbedd4f208dfc9760469f84ea">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TouchInputService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506e7</UniqueId>
		</Properties>
	</Item>
	<Item class="AnalyticsService" referent="RBX5ede871a4db844bea2458c9a81140dd2">
		<Properties>
			<string name="ApiKey"></string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AnalyticsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e194</UniqueId>
		</Properties>
	</Item>
	<Item class="Selection" referent="RBX5e3425b20b124ebe943736a3c9362b89">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Selection</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506ed</UniqueId>
		</Properties>
	</Item>
	<Item class="ServerScriptService" referent="RBXed15d3beeb264bf9a2572e20b9067f90">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="LoadStringEnabled">false</bool>
			<string name="Name">ServerScriptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e199</UniqueId>
		</Properties>
		<Item class="Script" referent="RBX66843c0fce814ab091ab177e8a647533">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ServerHandler</string>
				<string name="ScriptGuid">{5b17ff63-f99f-427d-ade0-825a919ec608}</string>
				<ProtectedString name="Source"><![CDATA[-- Load all modules parented to this script and require them
-- put them each in their own thread so if one is slow or errors ir
-- doesn't impact the rest 
for _, module in pairs(script:GetChildren()) do
	local loadMod = coroutine.create(function()
		require(module)
	end)

	coroutine.resume(loadMod)
end]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000293d6</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBXa3774694e9ea4425a2d15e5d6a889704">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Data</string>
					<string name="ScriptGuid">{370e8615-b31e-4d8d-97df-aada6609ad40}</string>
					<ProtectedString name="Source"><![CDATA[local playerService = game:GetService("Players")
local dataService = game:GetService("DataStoreService")

-- Getting store will fail if game isn't published
local store = nil
local success, err = pcall(function()
    return dataService:GetDataStore("DataStoreV1")
end)
if success then
    store = success
else
	print("Unable to load data store, is this game published?")
end

local sessionData = {}
local dataMod = {}
local AUTOSAVE_INTERVAL = 120

local defaultData = {
	Wood = 0;
}

dataMod.recursiveCopy = function(dataTable)
	local tableCopy = {}
	
	for index, value in pairs(dataTable) do
		if type(value) == "table" then
			value = dataMod.recursiveCopy(value)
		end
		tableCopy[index] = value
	end
	
	return tableCopy
end

dataMod.load = function(player, count)
	count = count or 1
	if count > 3 then
		return
	end

	local key = player.UserId
	local data 
	local success, err = pcall(function()
		data = store:GetAsync(key)
	end)
	
	if not success then
		if store ~= nil then
			data = dataMod.load(player, count + 1)
		else
			print("Failed to load data, store is nil")
		end
	end
	
	return data
end

dataMod.setupData = function(player)
	local key = player.UserId
	local data = dataMod.load(player)
	
	sessionData[key] = dataMod.recursiveCopy(defaultData)
	
	if data then
		for index, value in pairs(data) do
			print(index, value)
			dataMod.set(player, index, value)
		end
		
		print(player.Name.. "'s data has been loaded!")
	else
		print(player.Name.. " is a new player!")
	end
end

playerService.PlayerAdded:Connect(function(player)
	local folder = Instance.new("Folder")
	folder.Name = "leaderstats"
	folder.Parent = player
	
	local Wood = Instance.new("IntValue")
	Wood.Name = "Wood"
	Wood.Parent = folder
	Wood.Value = defaultData.Wood
	
	print("setting up data for ".. player.Name)
	dataMod.setupData(player)
end)

dataMod.set = function(player, stat, value)
	local key = player.UserId
	sessionData[key][stat] = value
	player.leaderstats[stat].Value = value
end

dataMod.increment = function(player, stat, value)
	local key = player.UserId
	sessionData[key][stat] = dataMod.get(player, stat) + value
	player.leaderstats[stat].Value = dataMod.get(player, stat)
end

dataMod.get = function(player, stat)
	local key = player.UserId
	return sessionData[key][stat]
end

dataMod.save = function(player, count)
	count = count or 1
	if count > 3 then
		return
	end

	local key = player.UserId
	local data = dataMod.recursiveCopy(sessionData[key])
	
	local success, err = pcall(function()
		store:SetAsync(key, data)
	end)
	
	if success then
		print(player.Name.. "'s data has been saved!")
	else
		if store ~= nil then
			print("Loading data failed with error: " .. err .. ", trying again.")
			dataMod.save(player, count + 1)
		else
			print("Failed to save data, store is nil")
		end
	end
end

dataMod.removeSessionData = function(player)
	local key = player.UserId
	sessionData[key] = nil
end

playerService.PlayerRemoving:Connect(function(player)
	dataMod.save(player)
	dataMod.removeSessionData(player)
end)


local function autoSave()
	while wait(AUTOSAVE_INTERVAL) do
		print("Auto-saving data for all players")
		
		for key, dataTable in pairs(sessionData) do
			local player = playerService:GetPlayerByUserId(key)
			dataMod.save(player)
		end
	end
end

spawn(autoSave) --Initialize autosave loop

game:BindToClose(function()
	for _, player in pairs(playerService:GetPlayers()) do
		dataMod.save(player)
		player:Kick("Shutting down game. All data saved.")
	end
end)

return dataMod
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000293d7</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX529ec3f1f5cf410fa978919dc9b5e3fb">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">HarvestingModule</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c51</UniqueId>
			</Properties>
			<Item class="Script" referent="RBX687f4d9e252e4540b98033205157c696">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Install</string>
					<string name="ScriptGuid">{cc0b7a9b-33d0-4ab9-8939-9d91d1b6d314}</string>
					<ProtectedString name="Source"><![CDATA[local ModuleInstaller = require(script.ModuleInstaller)

ModuleInstaller.install(script.Parent)
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c52</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX52cdaad07e4b4fd7a76c047f4c149b0e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ModuleInstaller</string>
						<string name="ScriptGuid">{5ff2f5eb-1832-4e56-9287-d356a31eb169}</string>
						<ProtectedString name="Source"><![CDATA[--!strict
local events = require(script.events)
local install = require(script.install)

local DevModuleInstaller: { [string]: any } = {
	verboseLogging = false,
	pruneDevelopmentFiles = true,

	started = events.started.Event,
	finished = events.finished.Event,
}

function DevModuleInstaller.install(devModule: Folder)
	return install(devModule, {
		verboseLogging = DevModuleInstaller.verboseLogging,
		pruneDevelopmentFiles = DevModuleInstaller.pruneDevelopmentFiles,
	})
end

return DevModuleInstaller
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c53</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBX2332ccca69cb4348a6f01eb5050fcd36">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">install</string>
							<string name="ScriptGuid">{53644f9b-9d61-4d53-8ff4-0925c9e24349}</string>
							<ProtectedString name="Source"><![CDATA[--!strict
local events = require(script.Parent.events)
local constants = require(script.Parent.constants)

local useVerboseLogging = false

local function log(messageType: string, message: string)
	if useVerboseLogging then
		print(("[%s] %s"):format(messageType, message))
	end
end

-- Reparents an instance and outputs helpful logging information so we can see
-- where instances are going at runtime.
local function move(instance: Instance, newParent: Instance)
	instance.Parent = newParent
	log("move", ("%s -> %s"):format(instance.Name, instance:GetFullName()))
end

-- Gets the storage location for packages used by each Dev Modules. The packages
-- that get put in this folder are deduplicated so every distinct version of a
-- package has only one copy.
local function getPackageStorage(): Folder
	local packageStorage = constants.PACKAGE_STORAGE_LOCATION:FindFirstChild(constants.PACKAGE_STORAGE_NAME) :: Folder

	if not packageStorage then
		packageStorage = Instance.new("Folder")
		packageStorage.Name = constants.PACKAGE_STORAGE_NAME
		packageStorage.Parent = constants.PACKAGE_STORAGE_LOCATION
	end

	return packageStorage
end

-- Prunes any stories and test files that are included with the DevModule. These
-- are not needed at runtime.
local function prune(instance: Instance)
	for _, descendant in ipairs(instance:GetDescendants()) do
		local name = descendant.Name
		if name:match("%.story$") or name:match("%.spec$") then
			descendant:Destroy()
		end
	end
end

local function getPackageVersion(package: ModuleScript): string
	local version = package:FindFirstChild(constants.PACKAGE_VERSION_NAME)

	assert(
		version and version:IsA("StringValue"),
		constants.PACKAGE_VERSION_OBJECT_MISSING:format(
			package.Name,
			constants.PACKAGE_VERSION_NAME,
			package:GetFullName()
		)
	)
	assert(version.Value ~= "", constants.PACKAGE_VERSION_EMPTY:format(package.Name, version:GetFullName()))

	return version.Value
end

-- This function merges the Packages folder from a DevModule into a shared
-- location. Until we have an improved package implementation, we need to
-- manually dedupe our libraries to cut down on bloat
local function dedupePackages(packages: Instance)
	local packageStorage = getPackageStorage()

	for _, package in ipairs(packages:GetChildren()) do
		if package ~= script and package:IsA("ModuleScript") then
			local version = getPackageVersion(package)

			local existingVersion: ModuleScript
			for _, otherPackage in ipairs(packageStorage:GetChildren()) do
				if otherPackage.Name:match(("^%s_"):format(package.Name)) and otherPackage:IsA("ModuleScript") then
					if version == getPackageVersion(otherPackage) then
						existingVersion = otherPackage
						break
					end
				end
			end

			if not existingVersion then
				local clone = package:Clone() :: ModuleScript
				clone.Parent = packageStorage
				clone.Name = ("%s_%s"):format(clone.Name, version)
				existingVersion = clone
			end

			-- Link the package with the existing version (which was either
			-- there previously, or is the one we just generated)
			local packageRef = constants.PACKAGE_REF:Clone()
			packageRef.Name = package.Name

			local packageObject = packageRef:FindFirstChild("package")
			if packageObject and packageObject:IsA("ObjectValue") then
				packageObject.Value = existingVersion
			end
			packageRef.Parent = package.Parent

			package:Destroy()

			log("link", ("%s <-> %s"):format(package.Name, existingVersion:GetFullName()))
		end
	end
end

-- Takes an instance and overlays it on top of a parent. This is used for
-- overlaying a DevModule's DataModel-based layout on top of existing services.
local function overlay(instance: Instance, parent: Instance)
	for _, child in ipairs(instance:GetChildren()) do
		local existingChild = parent:FindFirstChild(child.Name)

		if existingChild and child.ClassName == "Folder" then
			overlay(child, existingChild)
		else
			move(child, parent)
		end
	end
end

-- Gathers up all the scripts in the DevModule. We use the resulting array to
-- enable all scripts in one step.
local function getDevModuleScripts(devModule: Instance): { BaseScript }
	local scripts = {}
	for _, descendant in ipairs(devModule:GetDescendants()) do
		if descendant.Parent == devModule then
			continue
		end

		if descendant:IsA("Script") or descendant:IsA("LocalScript") then
			table.insert(scripts, descendant)
		end
	end
	return scripts
end

-- Ensures that all scripts included with a DevModule are marked as Disabled.
-- This makes sure there are no race conditions resulting in the Install script
-- running after the scripts included with the module.
local function assertScriptsAreDisabled(devModuleScripts: { BaseScript })
	local enabledScripts = {}

	for _, devModuleScript in ipairs(devModuleScripts) do
		if not devModuleScript.Disabled then
			table.insert(enabledScripts, devModuleScript.Name)
		end
	end

	if #enabledScripts > 0 then
		error(constants.ENABLED_SCRIPTS_ERROR:format(table.concat(enabledScripts, ", ")))
	end
end

type Options = { verboseLogging: boolean?, pruneDevelopmentFiles: boolean? }

local defaultOptions: Options = {
	verboseLogging = false,
	pruneDevelopmentFiles = true,
}

local function install(devModule: Instance, options: Options?)
	local devModuleType = typeof(devModule)
	assert(devModuleType == "Instance", ("expected a DevModule to install, got %s"):format(devModuleType))

	assert(devModule.Parent, ("%s must be parented to be installed"):format(devModule.Name))

	local mergedOptions = defaultOptions
	for key, value in pairs(options or {}) do
		mergedOptions[key] = value
	end

	if mergedOptions.verboseLogging then
		useVerboseLogging = mergedOptions.verboseLogging
	end

	events.started:Fire()

	log("info", ("Installing %s from %s..."):format(devModule.Name, devModule.Parent.Name))

	local devModuleScripts = getDevModuleScripts(devModule)
	assertScriptsAreDisabled(devModuleScripts)

	if constants.DEV_MODULE_STORAGE:FindFirstChild(devModule.Name) then
		log("info", "A version of this DevModule already exists. Skipping...")
		devModule:Destroy()
		return
	end

	if mergedOptions.pruneDevelopmentFiles then
		log("info", "Pruning development files...")
		prune(devModule)
	end

	-- The `true` flag searches all descendants of an instance, which is needed
	-- here since the Packages folder is nested.
	local packages = devModule:FindFirstChild(constants.PACKAGE_NAME, true)
	if packages then
		log("info", "Linking packages...")
		dedupePackages(packages)
	end

	log("info", "Overlaying services...")
	for _, child in ipairs(devModule:GetChildren()) do
		-- GetService errors if the given name is not a service so we wrap it in
		-- a pcall to use the result in a conditional.
		local success, service = pcall(function()
			return game:GetService(child.Name)
		end)

		if success then
			overlay(child, service)
		end
	end

	log("info", "Enabling scripts...")
	for _, devModuleScript in ipairs(devModuleScripts) do
		devModuleScript.Disabled = false
		log("info", ("Enabled %s"):format(devModuleScript.Name))
	end

	events.finished:Fire()

	log("info", ("Safe to remove %s"):format(devModule:GetFullName()))
	log("info", ("Removing %s..."):format(devModule:GetFullName()))
	devModule:Destroy()

	log("info", ("Successfully installed %s!"):format(devModule.Name))
end

return install
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c54</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX8d9e8c2acd9f46d0a6a49f5562855202">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">events</string>
							<string name="ScriptGuid">{2a583804-ce42-4567-b1ca-daf3266e6c13}</string>
							<ProtectedString name="Source"><![CDATA[--!strict
local events = {
	started = Instance.new("BindableEvent"),
	finished = Instance.new("BindableEvent"),
}

return events]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c55</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX4ca9aedfbd124084b003448fd4cc24da">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">constants</string>
							<string name="ScriptGuid">{ad473e95-a4f2-486d-8e2c-f611070862a0}</string>
							<ProtectedString name="Source"><![CDATA[--!strict
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local constants = {
	-- The location where all DevModules are moved at runtime. Note that a DevModule
	-- is moved after its scripts and other instances have been moved to their
	-- proper locations. What remains of the DevModule is the Packages folder, and
	-- any ModuleScripts that are used by the DevModule.
	DEV_MODULE_STORAGE = ReplicatedStorage,

	-- DevModules rely on dependencies. By convention, these are stored in a folder
	-- named "Packages" inside the root of the DevModule. At runtime, the Packages
	-- folders from every DevModule are deduplicated, resulting in only one version
	-- of each package in use across all the DevModules in the game
	PACKAGE_NAME = "Packages",
	PACKAGE_STORAGE_LOCATION = ReplicatedStorage,
	PACKAGE_STORAGE_NAME = "DevModulePackages",
	PACKAGE_REF = script.Parent.packageRef,

	-- The version of a package is controlled by a StringValue included as a child
	-- of the package. This constant controls the name of that StringValue.
	--
	-- Initially we wanted to use Attributes for the version, however Rojo does not
	-- support syncing Attributes yet. As such, we've opted to go the old fashioned
	-- way of including a StringValue.
	PACKAGE_VERSION_NAME = "_Version",

	PACKAGE_VERSION_OBJECT_MISSING = "%s is missing a %s StringValue at %s",
	PACKAGE_VERSION_EMPTY = "%s cannot have an empty value for its version at %s",
	ENABLED_SCRIPTS_ERROR = "All scripts included with a DevModule must be Disabled. Please disable the "
		.. "following script(s): %s",
}

return constants
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c56</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX4a30dc6f3fa44b2f8a9fabf4a5f9ecd0">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">packageRef</string>
							<string name="ScriptGuid">{f2337840-9687-4e8d-a17f-a401b3e8f0e3}</string>
							<ProtectedString name="Source"><![CDATA[--!strict
local package = script.package
assert(
	package and package:IsA("ObjectValue"),
	("could not require package. %q does not have a 'package' ObjectValue"):format(script:GetFullName())
)
local value = package.Value
assert(
	value and value:IsA("ModuleScript"),
	("could not require package. %q does not have a package set as its Value"):format(package:GetFullName())
)
return require(value :: ModuleScript)
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c57</UniqueId>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXd25271eb355948feb5a1b08be301af16">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">ServerScriptService</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c58</UniqueId>
				</Properties>
				<Item class="Script" referent="RBX9f575b5583ed4c2a9c62aeea5ff85c53">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">HarvestingServer</string>
						<string name="ScriptGuid">{6560b656-252e-465b-ac09-5eadd4f1ddab}</string>
						<ProtectedString name="Source"><![CDATA[local CollectionService = game:GetService("CollectionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HARVESTABLE_TAG = "HARVESTABLE"
local Data = require(script.Parent.ServerHandler.Data)

local function OnHarvest(player, inst)
    print("Destroying tree")
    inst:Destroy()
    Data.increment(player, "Wood", 1)
    ReplicatedStorage.InventoryChanged:FireClient(player)
end

local function attachPromptLogic(inst)
    if inst:IsA("Model") then
        for _,part in pairs(inst:GetDescendants()) do
            if part:IsA("ProximityPrompt") then
                part.Triggered:Connect(function (player)
                    OnHarvest(player, inst)
                end)
            end
        end
    end
end


for _,inst in pairs(CollectionService:GetTagged(HARVESTABLE_TAG)) do
    attachPromptLogic(inst)
end

CollectionService:GetInstanceAddedSignal(HARVESTABLE_TAG):Connect(attachPromptLogic)]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c59</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX387dbeda499c417d86ff2f931f678901">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">StarterPlayer</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c5a</UniqueId>
				</Properties>
				<Item class="Folder" referent="RBX0743d323e17543b9b2d2f2d8d6af0fde">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">StarterPlayerScripts</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c5b</UniqueId>
					</Properties>
					<Item class="LocalScript" referent="RBXbc5fe41cfb7c4d6ebccd60d3a8036d9e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">HarvestingClient</string>
							<string name="ScriptGuid">{2d650297-5e64-4095-9bf8-c778b114ada9}</string>
							<ProtectedString name="Source"><![CDATA[local CollectionService = game:GetService("CollectionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ProximityPromptService = game:GetService("ProximityPromptService")
local HARVESTABLE_TAG = "HARVESTABLE"

local playerService = game:GetService("Players")
local player = playerService.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local startingWalkSpeed = humanoid.WalkSpeed

local ToolChangedEvent = ReplicatedStorage.ToolChanged

local runningAnimationTrack = nil

local setAllProxPrompts = function(enabled)
    for _,inst in pairs(CollectionService:GetTagged(HARVESTABLE_TAG)) do
        for _,part in pairs(inst:GetDescendants()) do
            if part:IsA("ProximityPrompt") then
                part.Enabled = enabled
            end
        end
    end
end

local setProxPrompt = function()
    -- get currently equipped tool of local player
    local tool
    for _,child in pairs(char:GetChildren()) do
        if child:IsA("Tool") then
            tool = child
            break
        end
    end
    if tool then
        setAllProxPrompts(true)
    else
        setAllProxPrompts(false)
    end
end

ToolChangedEvent.Event:Connect(setProxPrompt)

char.ChildAdded:Connect(function(tool)
	if tool:IsA("Tool") then
		ToolChangedEvent:Fire()
	end
end)

local getAnimationTrackForCurrentToolOrDefault = function()
    local defaultAnimation = Instance.new("Animation")
    defaultAnimation.AnimationId = "rbxassetid://9633674639"

    local animator = humanoid:WaitForChild("Animator")

    local tool
    for _,child in pairs(char:GetChildren()) do
        if child:IsA("Tool") then
            tool = child
            break
        end
    end

    local animation
    for _,child in pairs(tool:GetChildren()) do
        if child:IsA("Animation") then
            animation = child
            break
        end
    end

    if not animation then
        defaultAnimation.Parent = tool
    end

    local animationTrack
    if animation then
        animationTrack = animator:LoadAnimation(animation)
    else
        animationTrack = animator:LoadAnimation(defaultAnimation)
    end

    animationTrack.Priority = Enum.AnimationPriority.Action
    animationTrack.Looped = true

    return animationTrack
end

ProximityPromptService.PromptButtonHoldBegan:Connect(function()
	print("Swing axe")
    humanoid.WalkSpeed = 0
    runningAnimationTrack = getAnimationTrackForCurrentToolOrDefault()
    runningAnimationTrack:Play()
end)

ProximityPromptService.PromptButtonHoldEnded:Connect(function()
    print("Stop Swinging")
	humanoid.WalkSpeed = startingWalkSpeed
    if runningAnimationTrack then
        runningAnimationTrack:Stop()
    end
    runningAnimationTrack = nil
end)]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300029c5c</UniqueId>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX31b94cf4377f4a79be1dd1b77ccc0eed">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">ReplicatedStorage</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300093b28</UniqueId>
				</Properties>
				<Item class="BindableEvent" referent="RBXe1dc48e8036646b5a0d1d39050cb7583">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">ToolChanged</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">2f127d22d44fdbb0029c228300093b29</UniqueId>
					</Properties>
				</Item>
				<Item class="RemoteEvent" referent="RBX73de9eaca32a420fafb887bbe1ccd66c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">InventoryChanged</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da0b</UniqueId>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="ServerStorage" referent="RBX4737e11298b64ead816e65ea2c406bab">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ServerStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506f0</UniqueId>
		</Properties>
		<Item class="Folder" referent="RBX492262cc89fe478690392cf4da73fc10">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">TagList</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags">VGFnRWRpdG9yVGFnQ29udGFpbmVy</BinaryString>
				<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002a59a</UniqueId>
			</Properties>
			<Item class="Configuration" referent="RBX36d7015ec339430a9d8c9ec5e2d1072e">
				<Properties>
					<BinaryString name="AttributesSerialize"><![CDATA[BgAAAAsAAABBbHdheXNPblRvcAMABQAAAENvbG9yD3q9Lz85zu88Mph+PwgAAABEcmF3VHlw
ZQIDAAAAQm94BQAAAEdyb3VwAgAAAAAEAAAASWNvbgIUAAAAZW1vamk6ZXZlcmdyZWVuLXRy
ZWUHAAAAVmlzaWJsZQMB]]></BinaryString>
					<string name="Name">HARVESTABLE</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">49520e3dd1a1adb8029bfd570002a59b</UniqueId>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="ReplicatedStorage" referent="RBXad84534939da42d5b84df1ae94e7bfb8">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e19b</UniqueId>
		</Properties>
		<Item class="ModuleScript" referent="RBXf9f50ee7c2d440ce80534bd3b9b66e11">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Roact</string>
				<string name="ScriptGuid">{49c381fc-220e-455b-8402-0f2cb9aa75ba}</string>
				<ProtectedString name="Source"><![CDATA[--~strict
--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconciler = require(script.createReconciler)
local createReconcilerCompat = require(script.createReconcilerCompat)
local RobloxRenderer = require(script.RobloxRenderer)
local strict = require(script.strict)
local Binding = require(script.Binding)

local robloxReconciler = createReconciler(RobloxRenderer)
local reconcilerCompat = createReconcilerCompat(robloxReconciler)

local Roact = strict({
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	forwardRef = require(script.forwardRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,
	createContext = require(script.createContext),

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = robloxReconciler.mountVirtualTree,
	unmount = robloxReconciler.unmountVirtualTree,
	update = robloxReconciler.updateVirtualTree,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {},
})

return Roact
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029588</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBX7dea88c623cd4c6a8143cb917f329fd3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">strict.spec</string>
					<string name="ScriptGuid">{68aeb545-6c3e-4a54-b07e-c22e87d21160}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local strict = require(script.Parent.strict)

	it("should error when getting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			return t.c
		end).to.throw()
	end)

	it("should error when setting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			t.c = 3
		end).to.throw()
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029589</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX8e3720f2b4cc4341a3d6f9bb01a9ac74">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">strict</string>
					<string name="ScriptGuid">{cd4c39a8-b451-4e68-8fc1-e718870eaad7}</string>
					<ProtectedString name="Source"><![CDATA[--!nonstrict
local function strict(t, name)
	name = name or tostring(t)

	return setmetatable(t, {
		__index = function(_self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,

		__newindex = function(_self, key, _value)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,
	})
end

return strict
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002958a</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXc5684858d442490cad1bd0bf4859729e">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">oneChild.spec</string>
					<string name="ScriptGuid">{61c0ae3d-e618-4bfd-90b2-7d19d57a1f7b}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)

	local oneChild = require(script.Parent.oneChild)

	it("should get zero children from a table", function()
		local children = {}

		expect(oneChild(children)).to.equal(nil)
	end)

	it("should get exactly one child", function()
		local child = createElement("Frame")
		local children = {
			foo = child,
		}

		expect(oneChild(children)).to.equal(child)
	end)

	it("should error with more than one child", function()
		local children = {
			a = createElement("Frame"),
			b = createElement("Frame"),
		}

		expect(function()
			oneChild(children)
		end).to.throw()
	end)

	it("should handle being passed nil", function()
		expect(oneChild(nil)).to.equal(nil)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002958b</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX3c22308934314fe38b02810128cd5007">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">oneChild</string>
					<string name="ScriptGuid">{94d36d07-c895-42bc-935d-ffb6d0d69805}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002958c</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX350e60d5833748d995bf4c39ded031f9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">invalidSetStateMessages</string>
					<string name="ScriptGuid">{0c11eda4-c266-46bb-9fe9-90e6f0cbc55c}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.WillUnmount] = [[
setState cannot be used in the willUnmount lifecycle method.
A component that is being unmounted cannot be updated!

Check the definition of willUnmount in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002958d</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX2935cd7baa3545328c96799b4ee94c62">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">internalAssert</string>
					<string name="ScriptGuid">{552edea0-6db4-4f4d-8bf9-254b7238be7f}</string>
					<ProtectedString name="Source"><![CDATA[local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002958e</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX9272c8c6252b48309853bfa6a7a4540a">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">init.spec</string>
					<string name="ScriptGuid">{be9faf5c-6840-465f-88fd-be27f6a2abb5}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Roact = require(script.Parent)

	it("should load with all public APIs", function()
		local publicApi = {
			createElement = "function",
			createFragment = "function",
			createRef = "function",
			forwardRef = "function",
			createBinding = "function",
			joinBindings = "function",
			mount = "function",
			unmount = "function",
			update = "function",
			oneChild = "function",
			setGlobalConfig = "function",
			createContext = "function",

			-- These functions are deprecated and throw warnings!
			reify = "function",
			teardown = "function",
			reconcile = "function",

			Component = true,
			PureComponent = true,
			Portal = true,
			Children = true,
			Event = true,
			Change = true,
			Ref = true,
			None = true,
			UNSTABLE = true,
		}

		expect(Roact).to.be.ok()

		for key, valueType in pairs(publicApi) do
			local success
			if typeof(valueType) == "string" then
				success = typeof(Roact[key]) == valueType
			else
				success = Roact[key] ~= nil
			end

			if not success then
				local existence = typeof(valueType) == "boolean" and "present" or "of type " .. valueType
				local message = ("Expected public API member %q to be %s, but instead it was of type %s"):format(
					tostring(key),
					existence,
					typeof(Roact[key])
				)

				error(message)
			end
		end

		for key in pairs(Roact) do
			if publicApi[key] == nil then
				local message = ("Found unknown public API key %q!"):format(tostring(key))

				error(message)
			end
		end
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002958f</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1977c129db2147368acee6837acb3562">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">getDefaultInstanceProperty.spec</string>
					<string name="ScriptGuid">{20aaeced-78d0-454e-8077-1171caab0c90}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)

	it("should get default name string values", function()
		local _, defaultName = getDefaultInstanceProperty("StringValue", "Name")

		expect(defaultName).to.equal("Value")
	end)

	it("should get default empty string values", function()
		local _, defaultValue = getDefaultInstanceProperty("StringValue", "Value")

		expect(defaultValue).to.equal("")
	end)

	it("should get default number values", function()
		local _, defaultValue = getDefaultInstanceProperty("IntValue", "Value")

		expect(defaultValue).to.equal(0)
	end)

	it("should get nil default values", function()
		local _, defaultValue = getDefaultInstanceProperty("ObjectValue", "Value")

		expect(defaultValue).to.equal(nil)
	end)

	it("should get bool default values", function()
		local _, defaultValue = getDefaultInstanceProperty("BoolValue", "Value")

		expect(defaultValue).to.equal(false)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029590</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXedffd344592b4c0d99d4b7998250e59c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">getDefaultInstanceProperty</string>
					<string name="ScriptGuid">{c4da26e4-02ed-4dd9-a007-5910ba701233}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029591</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf41b516bb8ab4bccb3453395846b4088">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">forwardRef.spec</string>
					<string name="ScriptGuid">{47a10cd9-ff31-4793-98bd-4e7c5dcc3e4f}</string>
					<ProtectedString name="Source"><![CDATA[-- Tests loosely adapted from those found at:
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.js
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.internal.js
return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createRef = require(script.Parent.createRef)
	local forwardRef = require(script.Parent.forwardRef)
	local createReconciler = require(script.Parent.createReconciler)
	local Component = require(script.Parent.Component)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Ref = require(script.Parent.PropMarkers.Ref)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	it("should update refs when switching between children", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local setRefOnDiv = props.setRefOnDiv
			-- deviation: clearer to express this way, since we don't have real
			-- ternaries
			local firstRef, secondRef
			if setRefOnDiv then
				firstRef = forwardedRef
			else
				secondRef = forwardedRef
			end
			return createElement("Frame", nil, {
				First = createElement("Frame", {
					[Ref] = firstRef,
				}, {
					Child = createElement("TextLabel", {
						Text = "First",
					}),
				}),
				Second = createElement("ScrollingFrame", {
					[Ref] = secondRef,
				}, {
					Child = createElement("TextLabel", {
						Text = "Second",
					}),
				}),
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(FunctionComponent, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = true,
		})
		local tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)

		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = false,
		})
		tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil", function()
		local RefForwardingComponent = forwardRef(function(_props, _ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil for multiple children", function()
		local RefForwardingComponent = forwardRef(function(_props, _ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multiple children nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	-- We could support this by having forwardRef return a stateful component,
	-- but it's likely not necessary
	itSKIP("should support defaultProps", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local optional = props.optional
			local required = props.required
			return createElement("Frame", {
				[Ref] = forwardedRef,
			}, {
				OptionalChild = optional,
				RequiredChild = required,
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(
				FunctionComponent,
				assign({}, props, {
					forwardedRef = ref,
				})
			)
		end)
		RefForwardingComponent.defaultProps = {
			optional = createElement("TextLabel"),
		}

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			optional = createElement("Frame"),
			required = createElement("ScrollingFrame"),
		})

		local tree = reconciler.mountVirtualTree(element, nil, "with optional")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("Frame")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")

		reconciler.unmountVirtualTree(tree)
		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			required = createElement("ScrollingFrame"),
		})
		tree = reconciler.mountVirtualTree(element, nil, "with default")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("TextLabel")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should error if not provided a callback when type checking is enabled", function()
		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef(nil)
			end).to.throw()
		end)

		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef("foo")
			end).to.throw()
		end)
	end)

	it("should work without a ref to be forwarded", function()
		local function Child()
			return nil
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local element = createElement(RefForwardingComponent, { value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for a single child", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "single child ref")
		expect(value).to.equal(123)
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for multiple children", function()
		local function Child(props)
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multi child ref")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should maintain child instance and ref through updates", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local setRefCount = 0
		local refValue

		local setRef = function(r)
			setRefCount = setRefCount + 1
			refValue = r
		end

		local element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "maintains instance")

		expect(value).to.equal(123)
		expect(refValue.ClassName).to.equal("Frame")
		expect(setRefCount).to.equal(1)

		element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 456 })
		tree = reconciler.updateVirtualTree(tree, element)

		expect(value).to.equal(456)
		expect(setRefCount).to.equal(1)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not re-run the render callback on a deep setState", function()
		local inst
		local renders = {}

		local Inner = Component:extend("Inner")
		function Inner:render()
			table.insert(renders, "Inner")
			inst = self
			return createElement("Frame", { [Ref] = self.props.forwardedRef })
		end

		local function Middle(props)
			table.insert(renders, "Middle")
			return createElement(Inner, props)
		end

		local Forward = forwardRef(function(props, ref)
			table.insert(renders, "Forward")
			return createElement(Middle, assign({}, props, { forwardedRef = ref }))
		end)

		local function App()
			table.insert(renders, "App")
			return createElement(Forward)
		end

		local tree = reconciler.mountVirtualTree(createElement(App), nil, "deep setState")
		expect(#renders).to.equal(4)
		expect(renders[1]).to.equal("App")
		expect(renders[2]).to.equal("Forward")
		expect(renders[3]).to.equal("Middle")
		expect(renders[4]).to.equal("Inner")

		renders = {}
		inst:setState({})
		expect(#renders).to.equal(1)
		expect(renders[1]).to.equal("Inner")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not include the ref in the forwarded props", function()
		local capturedProps
		local function CaptureProps(props)
			capturedProps = props
			return createElement("Frame", { [Ref] = props.forwardedRef })
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(CaptureProps, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()
		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
		})

		local tree = reconciler.mountVirtualTree(element, nil, "no ref in props")
		expect(capturedProps).to.be.ok()
		expect(capturedProps.forwardedRef).to.equal(ref)
		expect(capturedProps[Ref]).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029592</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX868f4b98d2e44e9b8224064db19758ea">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">forwardRef</string>
					<string name="ScriptGuid">{7c064d95-c9b1-40cb-bcb8-310e437e51ac}</string>
					<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local None = require(script.Parent.None)
local Ref = require(script.Parent.PropMarkers.Ref)

local config = require(script.Parent.GlobalConfig).get()

local excludeRef = {
	[Ref] = None,
}

--[[
	Allows forwarding of refs to underlying host components. Accepts a render
	callback which accepts props and a ref, and returns an element.
]]
local function forwardRef(render)
	if config.typeChecks then
		assert(typeof(render) == "function", "Expected arg #1 to be a function")
	end

	return function(props)
		local ref = props[Ref]
		local propsWithoutRef = assign({}, props, excludeRef)

		return render(propsWithoutRef, ref)
	end
end

return forwardRef
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029593</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX58575e0d852a4feba8a48109dd5b99a5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createSpy.spec</string>
					<string name="ScriptGuid">{7281aae5-ad23-4c82-adfd-2fb6d0fe950a}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)

	describe("createSpy", function()
		it("should create spies", function()
			local spy = createSpy(function() end)

			expect(spy).to.be.ok()
		end)

		it("should throw if spies are indexed by an invalid key", function()
			local spy = createSpy(function() end)

			expect(function()
				return spy.test
			end).to.throw()
		end)
	end)

	describe("value", function()
		it("should increment callCount when called", function()
			local spy = createSpy(function() end)
			spy.value()

			expect(spy.callCount).to.equal(1)
		end)

		it("should store all values passed", function()
			local spy = createSpy(function() end)
			spy.value(1, true, "3")

			expect(spy.valuesLength).to.equal(3)
			expect(spy.values[1]).to.equal(1)
			expect(spy.values[2]).to.equal(true)
			expect(spy.values[3]).to.equal("3")
		end)

		it("should return the value of the inner function", function()
			local spy = createSpy(function()
				return true
			end)

			expect(spy.value()).to.equal(true)
		end)
	end)

	describe("assertCalledWith", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1)
			end).to.throw()
		end)

		it("should throw if any value differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1, 3)
			end).to.throw()

			expect(function()
				spy:assertCalledWith(2, 3)
			end).to.throw()
		end)
	end)

	describe("captureValues", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:captureValues("a")
			end).to.throw()
		end)

		it("should capture all values in a table", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			local captured = spy:captureValues("a", "b")
			expect(captured.a).to.equal(1)
			expect(captured.b).to.equal(2)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029594</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX61cba83b8f6e4ac3b2511b98562b1aa2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createSpy</string>
					<string name="ScriptGuid">{d43dec61-0a2d-47d4-918a-775a1b040004}</string>
					<ProtectedString name="Source"><![CDATA[--!strict
--[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {}
	self.callCount = 0
	self.values = {}
	self.valuesLength = 0
	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = { ... }
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
		return nil
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029595</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXb377357992694ce8bdf5f5010f7bd0af">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createSignal.spec</string>
					<string name="ScriptGuid">{5eb701fd-ee7e-4b6a-9067-3ca7bef95453}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local createSignal = require(script.Parent.createSignal)

	local createSpy = require(script.Parent.createSpy)

	it("should fire subscribers and disconnect them", function()
		local signal = createSignal()

		local spy = createSpy()
		local disconnect = signal:subscribe(spy.value)

		expect(spy.callCount).to.equal(0)

		local a = 1
		local b = {}
		local c = "hello"
		signal:fire(a, b, c)

		expect(spy.callCount).to.equal(1)
		spy:assertCalledWith(a, b, c)

		disconnect()

		signal:fire()

		expect(spy.callCount).to.equal(1)
	end)

	it("should handle multiple subscribers", function()
		local signal = createSignal()

		local spyA = createSpy()
		local spyB = createSpy()

		local disconnectA = signal:subscribe(spyA.value)
		local disconnectB = signal:subscribe(spyB.value)

		expect(spyA.callCount).to.equal(0)
		expect(spyB.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		expect(spyB.callCount).to.equal(1)
		spyB:assertCalledWith(a, b)

		disconnectA()

		signal:fire(b, a)

		expect(spyA.callCount).to.equal(1)

		expect(spyB.callCount).to.equal(2)
		spyB:assertCalledWith(b, a)

		disconnectB()
	end)

	it("should stop firing a connection if disconnected mid-fire", function()
		local signal = createSignal()

		-- In this test, we'll connect two listeners that each try to disconnect
		-- the other. Because the order of listeners firing isn't defined, we
		-- have to be careful to handle either case.

		local disconnectA
		local disconnectB

		local spyA = createSpy(function()
			disconnectB()
		end)

		local spyB = createSpy(function()
			disconnectA()
		end)

		disconnectA = signal:subscribe(spyA.value)
		disconnectB = signal:subscribe(spyB.value)

		signal:fire()

		-- Exactly once listener should have been called.
		expect(spyA.callCount + spyB.callCount).to.equal(1)
	end)

	it("should allow adding listener in the middle of firing", function()
		local signal = createSignal()

		local disconnectA
		local spyA = createSpy()
		local listener = function(_a, _b)
			disconnectA = signal:subscribe(spyA.value)
		end

		local disconnectListener = signal:subscribe(listener)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(0)

		-- The new listener should be picked up in next fire.
		signal:fire(b, a)
		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(b, a)

		disconnectA()
		disconnectListener()

		signal:fire(a)

		expect(spyA.callCount).to.equal(1)
	end)

	it("should have one connection instance when add the same listener multiple times", function()
		local signal = createSignal()

		local spyA = createSpy()
		local disconnect1 = signal:subscribe(spyA.value)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		local disconnect2 = signal:subscribe(spyA.value)

		signal:fire(b, a)
		expect(spyA.callCount).to.equal(2)
		spyA:assertCalledWith(b, a)

		disconnect2()

		signal:fire(a)

		expect(spyA.callCount).to.equal(2)

		-- should have no effect.
		disconnect1()
		signal:fire(a)
		expect(spyA.callCount).to.equal(2)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029596</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXb0d86071301445a59460aa6a153a2155">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createSignal</string>
					<string name="ScriptGuid">{4379d560-e73b-42d5-a532-3c57baea8a37}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function createSignal()
	local connections = {}
	local suspendedConnections = {}
	local firing = false

	local function subscribe(_self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
			disconnected = false,
		}

		-- If the callback is already registered, don't add to the suspendedConnection. Otherwise, this will disable
		-- the existing one.
		if firing and not connections[callback] then
			suspendedConnections[callback] = connection
		end

		connections[callback] = connection

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections[callback] = nil
			suspendedConnections[callback] = nil
		end

		return disconnect
	end

	local function fire(_self, ...)
		firing = true
		for callback, connection in pairs(connections) do
			if not connection.disconnected and not suspendedConnections[callback] then
				callback(...)
			end
		end

		firing = false

		for callback, _ in pairs(suspendedConnections) do
			suspendedConnections[callback] = nil
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029597</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf8baa908f3014f48862f48530b79d429">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createRef.spec</string>
					<string name="ScriptGuid">{37dca673-67f9-4f94-a514-85a187f4a326}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Binding = require(script.Parent.Binding)
	local Type = require(script.Parent.Type)

	local createRef = require(script.Parent.createRef)

	it("should create refs, which are specialized bindings", function()
		local ref = createRef()

		expect(Type.of(ref)).to.equal(Type.Binding)
		expect(ref.current).to.equal(nil)
	end)

	it("should have a 'current' field that is the same as the internal binding's value", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 10)
		expect(ref.current).to.equal(10)
	end)

	it("should support tostring on refs", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)
		expect(tostring(ref)).to.equal("RoactRef(nil)")

		Binding.update(ref, 10)
		expect(tostring(ref)).to.equal("RoactRef(10)")
	end)

	it("should not allow assignments to the 'current' field", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 99)
		expect(ref.current).to.equal(99)

		expect(function()
			ref.current = 77
		end).to.throw()

		expect(ref.current).to.equal(99)
	end)

	it("should return the same thing from getValue as its current field", function()
		local ref = createRef()
		Binding.update(ref, 10)

		expect(ref:getValue()).to.equal(10)
		expect(ref:getValue()).to.equal(ref.current)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029598</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXcfcf6486bf5346a4b8eaf8dd705fc630">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createRef</string>
					<string name="ScriptGuid">{921c08c6-778a-481d-b0e3-1c07590f30fb}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(_self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(_self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(_self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d00029599</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX954888ae45134637b908198b362dc1f2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createReconcilerCompat.spec</string>
					<string name="ScriptGuid">{5103e12b-f401-44ed-a1d6-ed31543b26d0}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local createReconciler = require(script.Parent.createReconciler)
	local Logging = require(script.Parent.Logging)
	local NoopRenderer = require(script.Parent.NoopRenderer)

	local createReconcilerCompat = require(script.Parent.createReconcilerCompat)

	local noopReconciler = createReconciler(NoopRenderer)
	local compatReconciler = createReconcilerCompat(noopReconciler)

	it("reify should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = compatReconciler.reify(createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = compatReconciler.reify(createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()
	end)

	it("teardown should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.teardown(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.teardown(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()
	end)

	it("update should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.reconcile(handle, createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.reconcile(handle, createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002959a</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1adb451b51004e249f6f286546f5f8c7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createReconcilerCompat</string>
					<string name="ScriptGuid">{939e97cc-6880-4fa0-963f-bb7bfedf6bed}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(reconciler)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return reconciler.mountVirtualTree(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return reconciler.unmountVirtualTree(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return reconciler.updateVirtualTree(...)
	end

	return compat
end

return createReconcilerCompat
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002959b</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf5983f1183fb496db7dabb805b3420f9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createReconciler.spec</string>
					<string name="ScriptGuid">{9f6f0401-ae04-4655-8579-429ad96277c2}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createSpy = require(script.Parent.createSpy)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Type = require(script.Parent.Type)
	local ElementKind = require(script.Parent.ElementKind)

	local createReconciler = require(script.Parent.createReconciler)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("tree operations", function()
		it("should mount and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should mount, update, and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.updateVirtualTree(tree, createElement("StringValue"))

			noopReconciler.unmountVirtualTree(tree)
		end)
	end)

	describe("booleans", function()
		it("should mount booleans as nil", function()
			local node = noopReconciler.mountVirtualNode(false, nil, "test")
			expect(node).to.equal(nil)
		end)

		it("should unmount nodes if they are updated to a boolean value", function()
			local node = noopReconciler.mountVirtualNode(createElement("StringValue"), nil, "test")

			expect(node).to.be.ok()

			node = noopReconciler.updateVirtualNode(node, true)

			expect(node).to.equal(nil)
		end)
	end)

	describe("invalid elements", function()
		it("should throw errors when attempting to mount invalid elements", function()
			-- These function components return values with incorrect types
			local returnsString = function()
				return "Hello"
			end
			local returnsNumber = function()
				return 1
			end
			local returnsFunction = function()
				return function() end
			end
			local returnsTable = function()
				return {}
			end

			local hostParent = nil
			local key = "Some Key"

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsString), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsNumber), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsFunction), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsTable), hostParent, key)
			end).to.throw()
		end)
	end)

	describe("Host components", function()
		it("should invoke the renderer to mount host nodes", function()
			local mountHostNode = createSpy(NoopRenderer.mountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = mountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(mountHostNode.callCount).to.equal(1)

			local values = mountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)

		it("should invoke the renderer to update host nodes", function()
			local updateHostNode = createSpy(NoopRenderer.updateHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				updateHostNode = updateHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			local newElement = createElement("StringValue")
			local newNode = reconciler.updateVirtualNode(node, newElement)

			expect(newNode).to.equal(node)

			expect(updateHostNode.callCount).to.equal(1)

			local values = updateHostNode:captureValues("reconciler", "node", "newElement")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
			expect(values.newElement).to.equal(newElement)
		end)

		it("should invoke the renderer to unmount host nodes", function()
			local unmountHostNode = createSpy(NoopRenderer.unmountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				unmountHostNode = unmountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			reconciler.unmountVirtualNode(node)

			expect(unmountHostNode.callCount).to.equal(1)

			local values = unmountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)
	end)

	describe("Function components", function()
		it("should mount and unmount function components", function()
			local componentSpy = createSpy(function(_props)
				return nil
			end)

			local element = createElement(componentSpy.value, {
				someValue = 5,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(componentSpy.callCount).to.equal(1)

			local calledWith = componentSpy:captureValues("props")

			expect(calledWith.props).to.be.a("table")
			expect(calledWith.props.someValue).to.equal(5)

			noopReconciler.unmountVirtualNode(node)

			expect(componentSpy.callCount).to.equal(1)
		end)

		it("should mount single children of function components", function()
			local childComponentSpy = createSpy(function(_props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createElement(childComponentSpy.value, {
					value = props.value + 1,
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 13,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childCalledWith = childComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(13)

			expect(childCalledWith.props).to.be.a("table")
			expect(childCalledWith.props.value).to.equal(14)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)
		end)

		it("should mount fragments returned by function components", function()
			local childAComponentSpy = createSpy(function(_props)
				return nil
			end)

			local childBComponentSpy = createSpy(function(_props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createFragment({
					A = createElement(childAComponentSpy.value, {
						value = props.value + 1,
					}),
					B = createElement(childBComponentSpy.value, {
						value = props.value + 5,
					}),
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 17,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childACalledWith = childAComponentSpy:captureValues("props")
			local childBCalledWith = childBComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(17)

			expect(childACalledWith.props).to.be.a("table")
			expect(childACalledWith.props.value).to.equal(18)

			expect(childBCalledWith.props).to.be.a("table")
			expect(childBCalledWith.props.value).to.equal(22)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)
		end)
	end)

	describe("Fragments", function()
		it("should mount fragments", function()
			local fragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(fragment, nil, "test")

			expect(node).to.be.ok()
			expect(ElementKind.of(node.currentElement)).to.equal(ElementKind.Fragment)
		end)

		it("should mount an empty fragment", function()
			local emptyFragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(emptyFragment, nil, "test")

			expect(node).to.be.ok()
			expect(next(node.children)).to.never.be.ok()
		end)

		it("should mount all fragment's children", function()
			local childComponentSpy = createSpy(function(_props)
				return nil
			end)
			local elements = {}
			local totalElements = 5

			for i = 1, totalElements do
				elements["key" .. tostring(i)] = createElement(childComponentSpy.value, {})
			end

			local fragments = createFragment(elements)
			local node = noopReconciler.mountVirtualNode(fragments, nil, "test")

			expect(node).to.be.ok()
			expect(childComponentSpy.callCount).to.equal(totalElements)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002959c</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX689ca5e678d7429a8948bd8995e54823">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createReconciler</string>
					<string name="ScriptGuid">{eec093ee-5f8d-41b6-a53c-c48372075466}</string>
					<ProtectedString name="Source"><![CDATA[--!nonstrict
local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local Symbol = require(script.Parent.Symbol)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local InternalData = Symbol.named("InternalData")

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and legacyContext from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parent = virtualNode.parent

		-- If the node that is being replaced has modified context, we need to
		-- use the original *unmodified* context for the new node
		-- The `originalContext` field will be nil if the context was unchanged
		local context = virtualNode.originalContext or virtualNode.context
		local parentLegacyContext = virtualNode.parentLegacyContext

		-- If updating this node has caused a component higher up the tree to re-render
		-- and updateChildren to be re-entered then this node could already have been
		-- unmounted in the previous updateChildren pass.
		if not virtualNode.wasUnmounted then
			unmountVirtualNode(virtualNode)
		end
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, context, parentLegacyContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
			newNode.parent = parent
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.updateChildrenCount = virtualNode.updateChildrenCount + 1

		local currentUpdateChildrenCount = virtualNode.updateChildrenCount

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			-- If updating this node has caused a component higher up the tree to re-render
			-- and updateChildren to be re-entered for this virtualNode then
			-- this result is invalid and needs to be disgarded.
			if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
				if newNode and newNode ~= virtualNode.children[childKey] then
					unmountVirtualNode(newNode)
				end
				return
			end

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(
					newElement,
					hostParent,
					concreteKey,
					virtualNode.context,
					virtualNode.legacyContext
				)

				-- If updating this node has caused a component higher up the tree to re-render
				-- and updateChildren to be re-entered for this virtualNode then
				-- this result is invalid and needs to be discarded.
				if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
					if childNode then
						unmountVirtualNode(childNode)
					end
					return
				end

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					childNode.parent = virtualNode
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		if Type.of(renderResult) == Type.Element or renderResult == nil or typeof(renderResult) == "boolean" then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(
				("%s\n%s"):format(
					"Component returned invalid children:",
					virtualNode.currentElement.source or "<enable element tracebacks>"
				),
				0
			)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.wasUnmounted = true

		local kind = ElementKind.of(virtualNode.currentElement)

		-- selene: allow(if_same_then_else)
		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			parent = nil,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			updateChildrenCount = 0,
			wasUnmounted = false,

			-- Legacy Context API
			-- A table of context values inherited from the parent node
			legacyContext = legacyContext,

			-- A saved copy of the parent context, used when replacing a node
			parentLegacyContext = legacyContext,

			-- Context API
			-- A table of context values inherited from the parent node
			context = context or {},

			-- A saved copy of the unmodified context; this will be updated when
			-- a component adds new context and used when a node is replaced
			originalContext = nil,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context, legacyContext)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		return virtualNode
	end

	--[[
		Constructs a new Roact virtual tree, constructs a root node for
		it, and mounts it.
	]]
	local function mountVirtualTree(element, hostParent, hostKey)
		if config.typeChecks then
			assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
			assert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
		end

		if hostKey == nil then
			hostKey = "RoactTree"
		end

		local tree = {
			[Type] = Type.VirtualTree,
			[InternalData] = {
				-- The root node of the tree, which starts into the hierarchy of
				-- Roact component instances.
				rootNode = nil,
				mounted = true,
			},
		}

		tree[InternalData].rootNode = mountVirtualNode(element, hostParent, hostKey)

		return tree
	end

	--[[
		Unmounts the virtual tree, freeing all of its resources.

		No further operations should be done on the tree after it's been
		unmounted, as indicated by its the `mounted` field.
	]]
	local function unmountVirtualTree(tree)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
		end

		internalData.mounted = false

		if internalData.rootNode ~= nil then
			unmountVirtualNode(internalData.rootNode)
		end
	end

	--[[
		Utility method for updating the root node of a virtual tree given a new
		element.
	]]
	local function updateVirtualTree(tree, newElement)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		end

		internalData.rootNode = updateVirtualNode(internalData.rootNode, newElement)

		return tree
	end

	reconciler = {
		mountVirtualTree = mountVirtualTree,
		unmountVirtualTree = unmountVirtualTree,
		updateVirtualTree = updateVirtualTree,

		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002959d</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXcb26dff926df4f88be16a6027185a1db">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createFragment.spec</string>
					<string name="ScriptGuid">{9339d4fa-d8c7-4ea3-a139-4c70b2450820}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local ElementKind = require(script.Parent.ElementKind)
	local Type = require(script.Parent.Type)

	local createFragment = require(script.Parent.createFragment)

	it("should create new primitive elements", function()
		local fragment = createFragment({})

		expect(fragment).to.be.ok()
		expect(Type.of(fragment)).to.equal(Type.Element)
		expect(ElementKind.of(fragment)).to.equal(ElementKind.Fragment)
	end)

	it("should accept children", function()
		local subFragment = createFragment({})
		local fragment = createFragment({ key = subFragment })

		expect(fragment.elements.key).to.equal(subFragment)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002959e</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX8e3404f881434c17a9e7e0e81af55571">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createFragment</string>
					<string name="ScriptGuid">{968fc98e-b614-4e42-b684-bc1d9f7e6ad4}</string>
					<ProtectedString name="Source"><![CDATA[local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0002959f</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXb4a5a1d4a92347379bc292a080aa02e8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createElement.spec</string>
					<string name="ScriptGuid">{f28ed239-2f78-4d84-9f51-3c4a623fd1ac}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Component = require(script.Parent.Component)
	local ElementKind = require(script.Parent.ElementKind)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Logging = require(script.Parent.Logging)
	local Type = require(script.Parent.Type)
	local Portal = require(script.Parent.Portal)
	local Children = require(script.Parent.PropMarkers.Children)

	local createElement = require(script.Parent.createElement)

	it("should create new primitive elements", function()
		local element = createElement("Frame")

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Host)
	end)

	it("should create new functional elements", function()
		local element = createElement(function() end)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Function)
	end)

	it("should create new stateful components", function()
		local Foo = Component:extend("Foo")

		local element = createElement(Foo)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Stateful)
	end)

	it("should create new portal elements", function()
		local element = createElement(Portal)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Portal)
	end)

	it("should accept props", function()
		local element = createElement("StringValue", {
			Value = "Foo",
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
	end)

	it("should accept props and children", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", {
			Value = "Foo",
		}, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should accept children with without props", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", nil, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should warn once if children is specified in two different ways", function()
		local logInfo = Logging.capture(function()
			-- Using a loop here to ensure that multiple occurences of the same
			-- warning only cause output once.
			for _ = 1, 2 do
				createElement("Frame", {
					[Children] = {},
				}, {})
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("createElement")).to.be.ok()
		expect(logInfo.warnings[1]:find("Children")).to.be.ok()
	end)

	it("should have a `source` member if elementTracing is set", function()
		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement("StringValue")

			expect(element.source).to.be.a("string")
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a0</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX5589b5ae912e450f80fb8859821b733a">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createElement</string>
					<string name="ScriptGuid">{530929f5-c22f-4e32-87fc-d48041411930}</string>
					<ProtectedString name="Source"><![CDATA[local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a1</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXbabc8fa308904af7b966885920919ccc">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createContext.spec</string>
					<string name="ScriptGuid">{56653637-336a-4967-84e7-03606830a1f3}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local Component = require(script.Parent.Component)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Children = require(script.Parent.PropMarkers.Children)
	local createContext = require(script.Parent.createContext)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createSpy = require(script.Parent.createSpy)

	local noopReconciler = createReconciler(NoopRenderer)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)
	local robloxReconciler = createReconciler(RobloxRenderer)

	it("should return a table", function()
		local context = createContext("Test")
		expect(context).to.be.ok()
		expect(type(context)).to.equal("table")
	end)

	it("should contain a Provider and a Consumer", function()
		local context = createContext("Test")
		expect(context.Provider).to.be.ok()
		expect(context.Consumer).to.be.ok()
	end)

	describe("Provider", function()
		it("should render its children", function()
			local context = createContext("Test")

			local Listener = createSpy(function()
				return nil
			end)

			local element = createElement(context.Provider, {
				value = "Test",
			}, {
				Listener = createElement(Listener.value),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			expect(Listener.callCount).to.equal(1)
		end)
	end)

	describe("Consumer", function()
		it("should expect a render function", function()
			local context = createContext("Test")
			local element = createElement(context.Consumer)

			expect(function()
				noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			end).to.throw()
		end)

		it("should return the default value if there is no Provider", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local element = createElement(context.Consumer, {
				render = valueSpy.value,
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("Test")
		end)

		it("should pass the value to the render function", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("NewTest")
		end)

		it("should update when the value updates", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(
				tree,
				createElement(context.Provider, {
					value = "ThirdTest",
				}, {
					Listener = createElement(Listener),
				})
			)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		--[[
			This test is the same as the one above, but with a component that
			always blocks updates in the middle. We expect behavior to be the
			same.
		]]
		it("should update when the value updates through an update blocking component", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local UpdateBlocker = Component:extend("UpdateBlocker")

			function UpdateBlocker:render()
				return createFragment(self.props[Children])
			end

			function UpdateBlocker:shouldUpdate()
				return false
			end

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Blocker = createElement(UpdateBlocker, nil, {
					Listener = createElement(Listener),
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(
				tree,
				createElement(context.Provider, {
					value = "ThirdTest",
				}, {
					Blocker = createElement(UpdateBlocker, nil, {
						Listener = createElement(Listener),
					}),
				})
			)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should behave correctly when the default value is nil", function()
			local context = createContext(nil)

			local valueSpy = createSpy()
			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local tree = noopReconciler.mountVirtualTree(createElement(Listener), nil, "Provide Tree")
			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith(nil)

			tree = noopReconciler.updateVirtualTree(tree, createElement(Listener))
			noopReconciler.unmountVirtualTree(tree)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith(nil)
		end)
	end)

	describe("Update order", function()
		--[[
			This test ensures that there is no scenario where we can observe
			'update tearing' when props and context are updated at the same
			time.

			Update tearing is scenario where a single update is partially
			applied in multiple steps instead of atomically. This is observable
			by components and can lead to strange bugs or errors.

			This instance of update tearing happens when updating a prop and a
			context value in the same update. Image we represent our tree's
			state as the current prop and context versions. Our initial state
			is:

			(prop_1, context_1)

			The next state we would like to update to is:

			(prop_2, context_2)

			Under the bug reported in issue 259, Roact reaches three different
			states in sequence:

			1: (prop_1, context_1) - the initial state
			2: (prop_2, context_1) - woops!
			3: (prop_2, context_2) - correct end state

			In state 2, a user component was added that tried to access the
			current context value, which was not set at the time. This raised an
			error, because this state is not valid!

			The first proposed solution was to move the context update to happen
			before the props update. It is easy to show that this will still
			result in update tearing:

			1: (prop_1, context_1)
			2: (prop_1, context_2)
			3: (prop_2, context_2)

			Although the initial concern about newly added components observing
			old context values is fixed, there is still a state
			desynchronization between props and state.

			We would instead like the following update sequence:

			1: (prop_1, context_1)
			2: (prop_2, context_2)

			This test tries to ensure that is the case.

			The initial bug report is here:
			https://github.com/Roblox/roact/issues/259
		]]
		it("should update context at the same time as props", function()
			-- These values are used to make sure we reach both the first and
			-- second state combinations we want to visit.
			local observedA = false
			local observedB = false
			local updateCount = 0

			local context = createContext("default")

			local function Listener(props)
				return createElement(context.Consumer, {
					render = function(value)
						updateCount = updateCount + 1

						if value == "context_1" then
							expect(props.someProp).to.equal("prop_1")
							observedA = true
						elseif value == "context_2" then
							expect(props.someProp).to.equal("prop_2")
							observedB = true
						else
							error("Unexpected context value")
						end
					end,
				})
			end

			local element1 = createElement(context.Provider, {
				value = "context_1",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_1",
				}),
			})

			local element2 = createElement(context.Provider, {
				value = "context_2",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_2",
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element1, nil, "UpdateObservationIsFun")
			noopReconciler.updateVirtualTree(tree, element2)

			expect(updateCount).to.equal(2)
			expect(observedA).to.equal(true)
			expect(observedB).to.equal(true)
		end)
	end)

	-- issue https://github.com/Roblox/roact/issues/319
	it("does not throw if willUnmount is called twice on a context consumer", function()
		local context = createContext({})

		local LowestComponent = Component:extend("LowestComponent")
		function LowestComponent:init() end

		function LowestComponent:render()
			return createElement("Frame")
		end

		function LowestComponent:didMount()
			self.props.onDidMountCallback()
		end

		local FirstComponent = Component:extend("FirstComponent")
		function FirstComponent:init() end

		function FirstComponent:render()
			return createElement(context.Consumer, {
				render = function()
					return createElement("TextLabel")
				end,
			})
		end

		local ChildComponent = Component:extend("ChildComponent")

		function ChildComponent:init()
			self:setState({ firstTime = true })
		end

		local childCallback

		function ChildComponent:render()
			if self.state.firstTime then
				return createElement(FirstComponent)
			end

			return createElement(LowestComponent, {
				onDidMountCallback = self.props.onDidMountCallback,
			})
		end

		function ChildComponent:didMount()
			childCallback = function()
				self:setState({ firstTime = false })
			end
		end

		local ParentComponent = Component:extend("ParentComponent")

		local didMountCallbackCalled = 0

		function ParentComponent:init()
			self:setState({ count = 1 })

			self.onDidMountCallback = function()
				didMountCallbackCalled = didMountCallbackCalled + 1
				if self.state.count < 5 then
					self:setState({ count = self.state.count + 1 })
				end
			end
		end

		function ParentComponent:render()
			return createElement("Frame", {}, {
				Provider = createElement(context.Provider, {
					value = {},
				}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				}),
			})
		end

		local parent = Instance.new("ScreenGui")
		parent.Parent = ReplicatedStorage

		local hostKey = "Some Key"
		robloxReconciler.mountVirtualNode(createElement(ParentComponent), parent, hostKey)

		expect(function()
			-- calling setState on ChildComponent will trigger `willUnmount` multiple times
			childCallback()
		end).never.to.throw()
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a2</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX83eb2ac3a6c14b7992b4d37fca60aa48">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createContext</string>
					<string name="ScriptGuid">{9aa06dec-2f8e-48c3-8c3a-3b178981c1ad}</string>
					<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local createFragment = require(script.Parent.createFragment)
local createSignal = require(script.Parent.createSignal)
local Children = require(script.Parent.PropMarkers.Children)
local Component = require(script.Parent.Component)

--[[
	Construct the value that is assigned to Roact's context storage.
]]
local function createContextEntry(currentValue)
	return {
		value = currentValue,
		onUpdate = createSignal(),
	}
end

local function createProvider(context)
	local Provider = Component:extend("Provider")

	function Provider:init(props)
		self.contextEntry = createContextEntry(props.value)
		self:__addContext(context.key, self.contextEntry)
	end

	function Provider:willUpdate(nextProps)
		-- If the provided value changed, immediately update the context entry.
		--
		-- During this update, any components that are reachable will receive
		-- this updated value at the same time as any props and state updates
		-- that are being applied.
		if nextProps.value ~= self.props.value then
			self.contextEntry.value = nextProps.value
		end
	end

	function Provider:didUpdate(prevProps)
		-- If the provided value changed, after we've updated every reachable
		-- component, fire a signal to update the rest.
		--
		-- This signal will notify all context consumers. It's expected that
		-- they will compare the last context value they updated with and only
		-- trigger an update on themselves if this value is different.
		--
		-- This codepath will generally only update consumer components that has
		-- a component implementing shouldUpdate between them and the provider.
		if prevProps.value ~= self.props.value then
			self.contextEntry.onUpdate:fire(self.props.value)
		end
	end

	function Provider:render()
		return createFragment(self.props[Children])
	end

	return Provider
end

local function createConsumer(context)
	local Consumer = Component:extend("Consumer")

	function Consumer.validateProps(props)
		if type(props.render) ~= "function" then
			return false, "Consumer expects a `render` function"
		else
			return true
		end
	end

	function Consumer:init(_props)
		-- This value may be nil, which indicates that our consumer is not a
		-- descendant of a provider for this context item.
		self.contextEntry = self:__getContext(context.key)
	end

	function Consumer:render()
		-- Render using the latest available for this context item.
		--
		-- We don't store this value in state in order to have more fine-grained
		-- control over our update behavior.
		local value
		if self.contextEntry ~= nil then
			value = self.contextEntry.value
		else
			value = context.defaultValue
		end

		return self.props.render(value)
	end

	function Consumer:didUpdate()
		-- Store the value that we most recently updated with.
		--
		-- This value is compared in the contextEntry onUpdate hook below.
		if self.contextEntry ~= nil then
			self.lastValue = self.contextEntry.value
		end
	end

	function Consumer:didMount()
		if self.contextEntry ~= nil then
			-- When onUpdate is fired, a new value has been made available in
			-- this context entry, but we may have already updated in the same
			-- update cycle.
			--
			-- To avoid sending a redundant update, we compare the new value
			-- with the last value that we updated with (set in didUpdate) and
			-- only update if they differ. This may happen when an update from a
			-- provider was blocked by an intermediate component that returned
			-- false from shouldUpdate.
			self.disconnect = self.contextEntry.onUpdate:subscribe(function(newValue)
				if newValue ~= self.lastValue then
					-- Trigger a dummy state update.
					self:setState({})
				end
			end)
		end
	end

	function Consumer:willUnmount()
		if self.disconnect ~= nil then
			self.disconnect()
			self.disconnect = nil
		end
	end

	return Consumer
end

local Context = {}
Context.__index = Context

function Context.new(defaultValue)
	return setmetatable({
		defaultValue = defaultValue,
		key = Symbol.named("ContextKey"),
	}, Context)
end

function Context:__tostring()
	return "RoactContext"
end

local function createContext(defaultValue)
	local context = Context.new(defaultValue)

	return {
		Provider = createProvider(context),
		Consumer = createConsumer(context),
	}
end

return createContext
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a3</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX5268d71f56f24facbe36528a8f4079ff">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">assign.spec</string>
					<string name="ScriptGuid">{34f43c8f-e5d1-4f35-a7e6-c7a7ed0e9a64}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local None = require(script.Parent.None)

	local assign = require(script.Parent.assign)

	it("should accept zero additional tables", function()
		local input = {}
		local result = assign(input)

		expect(input).to.equal(result)
	end)

	it("should merge multiple tables onto the given target table", function()
		local target = {
			a = 5,
			b = 6,
		}

		local source1 = {
			b = 7,
			c = 8,
		}

		local source2 = {
			b = 8,
		}

		assign(target, source1, source2)

		expect(target.a).to.equal(5)
		expect(target.b).to.equal(source2.b)
		expect(target.c).to.equal(source1.c)
	end)

	it("should remove keys if specified as None", function()
		local target = {
			foo = 2,
			bar = 3,
		}

		local source = {
			foo = None,
		}

		assign(target, source)

		expect(target.foo).to.equal(nil)
		expect(target.bar).to.equal(3)
	end)

	it("should re-add keys if specified after None", function()
		local target = {
			foo = 2,
		}

		local source1 = {
			foo = None,
		}

		local source2 = {
			foo = 3,
		}

		assign(target, source1, source2)

		expect(target.foo).to.equal(source2.foo)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a4</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX929ae0d355b24e52b0b86fdc37cbbf8d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">assign</string>
					<string name="ScriptGuid">{c5ca7eb4-82ba-45c4-bd6f-b031a9b57921}</string>
					<ProtectedString name="Source"><![CDATA[local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a5</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX3d52c40ee73d45258a7694c866c121ba">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">assertDeepEqual.spec</string>
					<string name="ScriptGuid">{c01b58d9-8241-469c-a8c7-8e9d208cab26}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)

	it("should fail with a message when args are not equal", function()
		local success, message = pcall(assertDeepEqual, 1, 2)

		expect(success).to.equal(false)
		expect(message:find("first ~= second")).to.be.ok()

		success, message = pcall(assertDeepEqual, {
			foo = 1,
		}, {
			foo = 2,
		})

		expect(success).to.equal(false)
		expect(message:find("first%[foo%] ~= second%[foo%]")).to.be.ok()
	end)

	it("should compare non-table values using standard '==' equality", function()
		assertDeepEqual(1, 1)
		assertDeepEqual("hello", "hello")
		assertDeepEqual(nil, nil)

		local someFunction = function() end
		local theSameFunction = someFunction

		assertDeepEqual(someFunction, theSameFunction)

		local A = {
			foo = someFunction,
		}
		local B = {
			foo = theSameFunction,
		}

		assertDeepEqual(A, B)
	end)

	it("should fail when types differ", function()
		local success, message = pcall(assertDeepEqual, 1, "1")

		expect(success).to.equal(false)
		expect(message:find("first is of type number, but second is of type string")).to.be.ok()
	end)

	it("should compare (and report about) nested tables", function()
		local A = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			},
		}
		local B = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			},
		}

		assertDeepEqual(A, B)

		local C = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 3,
			},
		}

		local success, message = pcall(assertDeepEqual, A, C)

		expect(success).to.equal(false)
		expect(message:find("first%[nested%]%[bar%] ~= second%[nested%]%[bar%]")).to.be.ok()
	end)

	it("should be commutative", function()
		local equalArgsA = {
			foo = "bar",
			hello = "world",
		}
		local equalArgsB = {
			foo = "bar",
			hello = "world",
		}

		assertDeepEqual(equalArgsA, equalArgsB)
		assertDeepEqual(equalArgsB, equalArgsA)

		local nonEqualArgs = {
			foo = "bar",
		}

		expect(function()
			assertDeepEqual(equalArgsA, nonEqualArgs)
		end).to.throw()
		expect(function()
			assertDeepEqual(nonEqualArgs, equalArgsA)
		end).to.throw()
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a6</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX7774a2c16cf54d58b1bd15f33005dfdb">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">assertDeepEqual</string>
					<string name="ScriptGuid">{6423c037-5d68-4898-a82e-96a0165bd7ee}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]

local function deepEqual(a, b)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(typeof(a), typeof(b))
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true
	end

	if a == b then
		return true
	end

	local message = "{1} ~= {2}"
	return false, message
end

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success then
		local innerMessage = innerMessageTemplate:gsub("{1}", "first"):gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a7</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXba80eaf236124cb6a00bcfefd478fed4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Type.spec</string>
					<string name="ScriptGuid">{4d21f22e-d122-4950-9293-3e5351703334}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Type)

	describe("of", function()
		it("should return nil if the value is not a table", function()
			expect(Type.of(1)).to.equal(nil)
			expect(Type.of(true)).to.equal(nil)
			expect(Type.of("test")).to.equal(nil)
			expect(Type.of(print)).to.equal(nil)
		end)

		it("should return nil if the table has no type", function()
			expect(Type.of({})).to.equal(nil)
		end)

		it("should return the assigned type", function()
			local test = {
				[Type] = Type.Element,
			}

			expect(Type.of(test)).to.equal(Type.Element)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a8</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXfb347208faa64f958baf73d321cd32ce">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Type</string>
					<string name="ScriptGuid">{6480824b-9245-4fe9-88d0-7d594a59b9a7}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295a9</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX02f79a2684b545b9a75eda768348ee9e">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Symbol.spec</string>
					<string name="ScriptGuid">{1e1bc99f-c3cd-46c6-84c8-4d9f04568020}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			expect(tostring(symbol):find("foo")).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295aa</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX69036df25d584c9abd379b90d2c60d67">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Symbol</string>
					<string name="ScriptGuid">{00195aa8-d1e7-49c0-b024-ffb1c1eb0281}</string>
					<ProtectedString name="Source"><![CDATA[--!nonstrict
--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295ab</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1568b773bde8440294fe1cab8504c396">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">SingleEventManager.spec</string>
					<string name="ScriptGuid">{ffb58fba-3542-4bfa-ba55-c60712e4fcde}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.createSpy)
	local Logging = require(script.Parent.Logging)

	local SingleEventManager = require(script.Parent.SingleEventManager)

	describe("new", function()
		it("should create a SingleEventManager", function()
			local manager = SingleEventManager.new()

			expect(manager).to.be.ok()
		end)
	end)

	describe("connectEvent", function()
		it("should connect to events", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")

			manager:connectEvent("Event", nil)

			instance:Fire("baz")
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should drop events until resumed initially", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(0)

			manager:resume()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke suspended events when resumed", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			manager:suspend()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)

			manager:resume()
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke events triggered during resumption in the correct order", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			local recordedValues = {}
			local eventSpy = createSpy(function(_, value)
				table.insert(recordedValues, value)

				if value == 2 then
					instance:Fire(3)
				elseif value == 3 then
					instance:Fire(4)
				end
			end)

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)
			instance:Fire(2)

			manager:resume()
			expect(eventSpy.callCount).to.equal(4)
			assertDeepEqual(recordedValues, { 1, 2, 3, 4 })
		end)

		it("should not invoke events fired during suspension but disconnected before resumption", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)

			manager:connectEvent("Event", nil)

			manager:resume()
			expect(eventSpy.callCount).to.equal(0)
		end)

		it("should not yield events through the SingleEventManager when resuming", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				coroutine.yield()
			end)

			manager:resume()

			local co = coroutine.create(function()
				instance:Fire(5)
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")

			manager:suspend()
			instance:Fire(5)

			co = coroutine.create(function()
				manager:resume()
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")
		end)

		it("should not throw errors through SingleEventManager when resuming", function()
			local errorText = "Error from SingleEventManager test"

			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				error(errorText)
			end)

			manager:resume()

			-- If we call instance:Fire() here, the error message will leak to
			-- the console since the thread's resumption will be handled by
			-- Roblox's scheduler.

			manager:suspend()
			instance:Fire(5)

			local logInfo = Logging.capture(function()
				manager:resume()
			end)

			expect(#logInfo.errors).to.equal(0)
			expect(#logInfo.warnings).to.equal(1)
			expect(#logInfo.infos).to.equal(0)

			expect(logInfo.warnings[1]:find(errorText)).to.be.ok()
		end)

		it("should not overflow with events if manager:resume() is invoked when resuming a suspended event", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			-- This connection emulates what happens if reconciliation is
			-- triggered again in response to reconciliation. Without
			-- appropriate guards, the inner resume() call will process the
			-- Fire(1) event again, causing a nasty stack overflow.
			local eventSpy = createSpy(function(_, value)
				if value == 1 then
					manager:suspend()
					instance:Fire(2)
					manager:resume()
				end
			end)

			manager:connectEvent("Event", eventSpy.value)

			manager:suspend()
			instance:Fire(1)
			manager:resume()

			expect(eventSpy.callCount).to.equal(2)
		end)
	end)

	describe("connectPropertyChange", function()
		-- Since property changes utilize the same mechanisms as other events,
		-- the tests here are slimmed down to reduce redundancy.

		it("should connect to property changes", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectPropertyChange("Name", eventSpy.value)
			manager:resume()

			instance.Name = "foo"
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance)

			instance.Name = "bar"
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance)

			manager:connectPropertyChange("Name")

			instance.Name = "baz"
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should throw an error if the property is invalid", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)

			expect(function()
				manager:connectPropertyChange("foo", function() end)
			end).to.throw()
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295ac</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX305b07aab798477ba35fe4819f89cb14">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">SingleEventManager</string>
					<string name="ScriptGuid">{a8f4ec43-5a21-4948-bba8-1f48f5c8ccd0}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(function()
		return self._instance:GetPropertyChangedSignal(key)
	end)

	if not success then
		error(("Cannot get changed signal on property %q: %s"):format(tostring(key), event), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index <= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount)
			)

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295ad</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXa140af4ec37541d4867918f9c5bf413b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">RobloxRenderer.spec</string>
					<string name="ScriptGuid">{0704887e-9498-4d31-9f44-7e1b869dbc8f}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local Binding = require(script.Parent.Binding)
	local Children = require(script.Parent.PropMarkers.Children)
	local Component = require(script.Parent.Component)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createRef = require(script.Parent.createRef)
	local createSpy = require(script.Parent.createSpy)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Portal = require(script.Parent.Portal)
	local Ref = require(script.Parent.PropMarkers.Ref)
	local Event = require(script.Parent.PropMarkers.Event)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	describe("mountHostNode", function()
		it("should create instances with correct props", function()
			local parent = Instance.new("Folder")
			local value = "Hello!"
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(value)
			expect(root.Name).to.equal(key)
		end)

		it("should create children with correct names and props", function()
			local parent = Instance.new("Folder")
			local rootValue = "Hey there!"
			local childValue = 173
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = rootValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = childValue,
				}),

				ChildB = createElement("Folder"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(rootValue)
			expect(root.Name).to.equal(key)

			expect(#root:GetChildren()).to.equal(2)

			local childA = root.ChildA
			local childB = root.ChildB

			expect(childA).to.be.ok()
			expect(childB).to.be.ok()

			expect(childA.ClassName).to.equal("IntValue")
			expect(childA.Value).to.equal(childValue)

			expect(childB.ClassName).to.equal("Folder")
		end)

		it("should attach Bindings to Roblox properties", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(instance.ClassName).to.equal("IntValue")
			expect(instance.Value).to.equal(10)

			update(20)

			expect(instance.Value).to.equal(20)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should connect Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(ref.current).to.be.ok()
			expect(ref.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call function refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local element = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(element, parent, key)

				local success, message = pcall(RobloxRenderer.mountHostNode, reconciler, node)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)
	end)

	describe("updateHostNode", function()
		it("should update node props and children", function()
			-- TODO: Break up test

			local parent = Instance.new("Folder")
			local key = "updateHostNodeTest"
			local firstValue = "foo"
			local newValue = "bar"

			local defaultStringValue = Instance.new("StringValue").Value

			local element = createElement("StringValue", {
				Value = firstValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = 1,
				}),
				ChildB = createElement("BoolValue", {
					Value = true,
				}),
				ChildC = createElement("StringValue", {
					Value = "test",
				}),
				ChildD = createElement("StringValue", {
					Value = "test",
				}),
			})

			local node = reconciler.createVirtualNode(element, parent, key)
			RobloxRenderer.mountHostNode(reconciler, node)

			-- Not testing mountHostNode's work here, only testing that the
			-- node is properly updated.

			local newElement = createElement("StringValue", {
				Value = newValue,
			}, {
				-- ChildA changes element type.
				ChildA = createElement("StringValue", {
					Value = "test",
				}),
				-- ChildB changes child properties.
				ChildB = createElement("BoolValue", {
					Value = false,
				}),
				-- ChildC should reset its Value property back to the default.
				ChildC = createElement("StringValue", {}),
				-- ChildD is deleted.
				-- ChildE is added.
				ChildE = createElement("Folder", {}),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			local root = parent[key]
			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(newValue)
			expect(#root:GetChildren()).to.equal(4)

			local childA = root.ChildA
			expect(childA.ClassName).to.equal("StringValue")
			expect(childA.Value).to.equal("test")

			local childB = root.ChildB
			expect(childB.ClassName).to.equal("BoolValue")
			expect(childB.Value).to.equal(false)

			local childC = root.ChildC
			expect(childC.ClassName).to.equal("StringValue")
			expect(childC.Value).to.equal(defaultStringValue)

			local childE = root.ChildE
			expect(childE.ClassName).to.equal("Folder")
		end)

		it("should update Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local bindingA, updateA = Binding.create(10)
			local element = createElement("IntValue", {
				Value = bindingA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			local bindingB, updateB = Binding.create(99)
			local newElement = createElement("IntValue", {
				Value = bindingB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(instance.Value).to.equal(99)

			updateA(123)

			expect(instance.Value).to.equal(99)

			updateB(123)

			expect(instance.Value).to.equal(123)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should update Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local refA = createRef()
			local refB = createRef()

			local element = createElement("Frame", {
				[Ref] = refA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(refA.current).to.equal(instance)
			expect(refB.current).never.to.be.ok()

			local newElement = createElement("Frame", {
				[Ref] = refB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(refA.current).never.to.be.ok()
			expect(refB.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call old function refs with nil and new function refs with a valid rbx", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRefA = createSpy()
			local spyRefB = createSpy()

			local element = createElement("Frame", {
				[Ref] = spyRefA.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRefA.callCount).to.equal(1)
			spyRefA:assertCalledWith(instance)
			expect(spyRefB.callCount).to.equal(0)

			local newElement = createElement("Frame", {
				[Ref] = spyRefB.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(spyRefA.callCount).to.equal(2)
			spyRefA:assertCalledWith(nil)
			expect(spyRefB.callCount).to.equal(1)
			spyRefB:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should not call function refs again if they didn't change", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
				[Ref] = spyRef.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			-- Not called again
			expect(spyRef.callCount).to.equal(1)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local firstElement = createElement("Frame")
				local secondElement = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(firstElement, parent, key)
				RobloxRenderer.mountHostNode(reconciler, node)

				local success, message = pcall(RobloxRenderer.updateHostNode, reconciler, node, secondElement)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)

		it("should delete instances when reconciling to nil children", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
			}, {
				child = createElement("Frame"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]
			expect(#instance:GetChildren()).to.equal(1)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)
			expect(#instance:GetChildren()).to.equal(0)
		end)
	end)

	describe("unmountHostNode", function()
		it("should delete instances from the inside-out", function()
			local parent = Instance.new("Folder")
			local key = "Root"
			local element = createElement("Folder", nil, {
				Child = createElement("Folder", nil, {
					Grandchild = createElement("Folder"),
				}),
			})

			local node = reconciler.mountVirtualNode(element, parent, key)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]
			expect(#root:GetChildren()).to.equal(1)

			local child = root:GetChildren()[1]
			expect(#child:GetChildren()).to.equal(1)

			local grandchild = child:GetChildren()[1]

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(grandchild.Parent).to.equal(nil)
			expect(child.Parent).to.equal(nil)
			expect(root.Parent).to.equal(nil)
		end)

		it("should unsubscribe from any Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			RobloxRenderer.unmountHostNode(reconciler, node)
			update(56)

			expect(instance.Value).to.equal(10)
		end)

		it("should clear Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(ref.current).to.be.ok()

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(ref.current).never.to.be.ok()
		end)

		it("should call function refs with nil", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(1)

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(2)
			spyRef:assertCalledWith(nil)
		end)
	end)

	describe("Portals", function()
		it("should create and destroy instances as children of `target`", function()
			local target = Instance.new("Folder")

			local function FunctionComponent(props)
				return createElement("IntValue", {
					Value = props.value,
				})
			end

			local element = createElement(Portal, {
				target = target,
			}, {
				folderOne = createElement("Folder"),
				folderTwo = createElement("Folder"),
				intValueOne = createElement(FunctionComponent, {
					value = 42,
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(3)

			expect(target:FindFirstChild("folderOne")).to.be.ok()
			expect(target:FindFirstChild("folderTwo")).to.be.ok()
			expect(target:FindFirstChild("intValueOne")).to.be.ok()
			expect(target:FindFirstChild("intValueOne").Value).to.equal(42)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should pass prop updates through to children", function()
			local target = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "A Host Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(1)

			local firstValue = target.ChildValue
			expect(firstValue.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#target:GetChildren()).to.equal(1)

			local secondValue = target.ChildValue
			expect(firstValue).to.equal(secondValue)
			expect(secondValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should throw if `target` is nil", function()
			-- TODO: Relax this restriction?
			local element = createElement(Portal)
			local hostParent = nil
			local hostKey = "Keys for Everyone"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should throw if `target` is not a Roblox instance", function()
			local element = createElement(Portal, {
				target = {},
			})
			local hostParent = nil
			local hostKey = "Unleash the keys!"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should recreate instances if `target` changes in an update", function()
			local firstTarget = Instance.new("Folder")
			local secondTarget = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = firstTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = secondTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#firstTarget:GetChildren()).to.equal(1)
			expect(#secondTarget:GetChildren()).to.equal(0)

			local firstChild = firstTarget.ChildValue
			expect(firstChild.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(1)

			local secondChild = secondTarget.ChildValue
			expect(secondChild.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(0)
		end)
	end)

	describe("Fragments", function()
		it("should parent the fragment's elements into the fragment's parent", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createElement("IntValue", {
					Value = 1,
				}),
				key2 = createElement("IntValue", {
					Value = 2,
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "test")

			expect(hostParent:FindFirstChild("key")).to.be.ok()
			expect(hostParent.key.ClassName).to.equal("IntValue")
			expect(hostParent.key.Value).to.equal(1)

			expect(hostParent:FindFirstChild("key2")).to.be.ok()
			expect(hostParent.key2.ClassName).to.equal("IntValue")
			expect(hostParent.key2.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should allow sibling fragment to have common keys", function()
			local hostParent = Instance.new("Folder")
			local hostKey = "Test"

			local function parent(_props)
				return createElement("IntValue", {}, {
					fragmentA = createFragment({
						key = createElement("StringValue", {
							Value = "A",
						}),
						key2 = createElement("StringValue", {
							Value = "B",
						}),
					}),
					fragmentB = createFragment({
						key = createElement("StringValue", {
							Value = "C",
						}),
						key2 = createElement("StringValue", {
							Value = "D",
						}),
					}),
				})
			end

			local node = reconciler.mountVirtualNode(createElement(parent), hostParent, hostKey)
			local parentChildren = hostParent[hostKey]:GetChildren()

			expect(#parentChildren).to.equal(4)

			local childValues = {}

			for _, child in pairs(parentChildren) do
				expect(child.ClassName).to.equal("StringValue")
				childValues[child.Value] = 1 + (childValues[child.Value] or 0)
			end

			-- check if the StringValues have not collided
			expect(childValues.A).to.equal(1)
			expect(childValues.B).to.equal(1)
			expect(childValues.C).to.equal(1)
			expect(childValues.D).to.equal(1)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should render nested fragments", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createFragment({
					TheValue = createElement("IntValue", {
						Value = 1,
					}),
					TheOtherValue = createElement("IntValue", {
						Value = 2,
					}),
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "Test")

			expect(hostParent:FindFirstChild("TheValue")).to.be.ok()
			expect(hostParent.TheValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheValue.Value).to.equal(1)

			expect(hostParent:FindFirstChild("TheOtherValue")).to.be.ok()
			expect(hostParent.TheOtherValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheOtherValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should not add any instances if the fragment is empty", function()
			local hostParent = Instance.new("Folder")

			local node = reconciler.mountVirtualNode(createFragment({}), hostParent, "test")

			expect(#hostParent:GetChildren()).to.equal(0)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)
	end)

	describe("Context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					hello = self:__getContext("hello"),
				}
			end

			function Consumer:render() end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer),
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self:__addContext("foo", "bar")
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					foo = self:__getContext("foo"),
				}
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar",
			})
		end)
	end)

	describe("Legacy context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render() end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer),
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self._context.foo = "bar"
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar",
			})
		end)
	end)

	describe("Integration Tests", function()
		local temporaryParent = nil
		beforeEach(function()
			temporaryParent = Instance.new("Folder")
			temporaryParent.Parent = ReplicatedStorage
		end)

		afterEach(function()
			temporaryParent:Destroy()
			temporaryParent = nil
		end)

		it("should not allow re-entrancy in updateChildren", function()
			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement("Frame")
				end

				return createElement("TextLabel")
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.childAdded = function()
					self:setState({
						count = self.state.count + 1,
					})
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {
					[Event.ChildAdded] = self.childAdded,
				}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			reconciler.unmountVirtualNode(instance)
		end)

		it("should not allow re-entrancy in updateChildren even with callbacks", function()
			local LowestComponent = Component:extend("LowestComponent")

			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didMount()
				self.props.onDidMountCallback()
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement("Frame")
				end

				return createElement(LowestComponent, {
					onDidMountCallback = self.props.onDidMountCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			local didMountCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onDidMountCallback = function()
					didMountCallbackCalled = didMountCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
			-- LowestComponent instantiations 2 is also acceptable though.
			expect(didMountCallbackCalled <= 2).to.equal(true)

			reconciler.unmountVirtualNode(instance)
		end)

		it("should never call unmount twice in the case of update children re-rentrancy", function()
			local unmountCounts = {}

			local function addUnmount(id)
				unmountCounts[id] = unmountCounts[id] + 1
			end

			local function addInit(id)
				unmountCounts[id] = 0
			end

			local LowestComponent = Component:extend("LowestComponent")
			function LowestComponent:init()
				addInit(tostring(self))
			end

			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didMount()
				self.props.onDidMountCallback()
			end

			function LowestComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local FirstComponent = Component:extend("FirstComponent")
			function FirstComponent:init()
				addInit(tostring(self))
			end

			function FirstComponent:render()
				return createElement("TextLabel")
			end

			function FirstComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				addInit(tostring(self))

				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement(FirstComponent)
				end

				return createElement(LowestComponent, {
					onDidMountCallback = self.props.onDidMountCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			function ChildComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local ParentComponent = Component:extend("ParentComponent")

			local didMountCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onDidMountCallback = function()
					didMountCallbackCalled = didMountCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
			-- LowestComponent instantiations 2 is also acceptable though.
			expect(didMountCallbackCalled <= 2).to.equal(true)

			reconciler.unmountVirtualNode(instance)

			for _, value in pairs(unmountCounts) do
				expect(value).to.equal(1)
			end
		end)

		it("should never unmount a node unnecesarily in the case of re-rentry", function()
			local LowestComponent = Component:extend("LowestComponent")
			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didUpdate(prevProps, _prevState)
				if prevProps.firstTime and not self.props.firstTime then
					self.props.onChangedCallback()
				end
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				return createElement(LowestComponent, {
					firstTime = self.state.firstTime,
					onChangedCallback = self.props.onChangedCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			local onChangedCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onChangedCallback = function()
					onChangedCallbackCalled = onChangedCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onChangedCallback = self.onChangedCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			expect(onChangedCallbackCalled).to.equal(1)

			reconciler.unmountVirtualNode(instance)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295ae</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXe238dfb697854e3d9a4106222ac1d69a">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">RobloxRenderer</string>
					<string name="ScriptGuid">{0b602cf6-82a4-469d-86ba-e6a3985c8b41}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(typeof(ref)))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295af</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX96f0091726784255ad8a15c013300a44">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">PureComponent.spec</string>
					<string name="ScriptGuid">{ba42f0d2-598c-4ff0-8e63-5f8b1a1fce99}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local createReconciler = require(script.Parent.createReconciler)

	local PureComponent = require(script.Parent.PureComponent)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be extendable", function()
		local MyComponent = PureComponent:extend("MyComponent")

		expect(MyComponent).to.be.ok()
	end)

	it("should skip updates for shallow-equal props", function()
		local updateCount = 0
		local setValue

		local PureChild = PureComponent:extend("PureChild")

		function PureChild:willUpdate()
			updateCount = updateCount + 1
		end

		function PureChild:render()
			return nil
		end

		local PureContainer = PureComponent:extend("PureContainer")

		function PureContainer:init()
			self.state = {
				value = 0,
			}
		end

		function PureContainer:didMount()
			setValue = function(value)
				self:setState({
					value = value,
				})
			end
		end

		function PureContainer:render()
			return createElement(PureChild, {
				value = self.state.value,
			})
		end

		local element = createElement(PureContainer)
		local tree = noopReconciler.mountVirtualTree(element, nil, "PureComponent Tree")

		expect(updateCount).to.equal(0)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(2)

		expect(updateCount).to.equal(2)

		setValue(1)

		expect(updateCount).to.equal(3)

		noopReconciler.unmountVirtualTree(tree)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b0</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXae191e1d47e74261b1a54b86fdde6610">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">PureComponent</string>
					<string name="ScriptGuid">{5ce38d6a-df68-4cc0-923b-d4a2541e7e77}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b1</UniqueId>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX65864e083e0d4f3c95fc42bd9e74d710">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">PropMarkers</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b2</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBXbab9acf8f6f04769ab5c4245d71606bd">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Ref</string>
						<string name="ScriptGuid">{12a3debe-37d7-4e6f-b293-e906f6ce5708}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b3</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX15c4da1c4398433aa48fd582e049ae2e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Event.spec</string>
						<string name="ScriptGuid">{27a5ff5c-e378-4406-bb33-6de5d3d3b18e}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Event = require(script.Parent.Event)

	it("should yield event objects when indexed", function()
		expect(Type.of(Event.MouseButton1Click)).to.equal(Type.HostEvent)
		expect(Type.of(Event.Touched)).to.equal(Type.HostEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Event.MouseButton1Click
		local b = Event.MouseButton1Click
		local c = Event.Touched

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b4</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX49411458751449f9b3238594f3f3bdb8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Event</string>
						<string name="ScriptGuid">{a609caf8-fb6a-4949-aaa6-2020f13430b0}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(_self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b5</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXfb967b5c6dc7456a91264ee321ed1911">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Children</string>
						<string name="ScriptGuid">{bb5f33e9-8721-4c36-8f14-c51305fbb023}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b6</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX83259fec337142a7b221c8cad299888d">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Change.spec</string>
						<string name="ScriptGuid">{26fd8e06-750c-44ce-bd24-0ec17a858bbd}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Change = require(script.Parent.Change)

	it("should yield change listener objects when indexed", function()
		expect(Type.of(Change.Text)).to.equal(Type.HostChangeEvent)
		expect(Type.of(Change.Selected)).to.equal(Type.HostChangeEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Change.Text
		local b = Change.Text
		local c = Change.Selected

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b7</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX33232826221a473a8a42d7c0569ecc68">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Change</string>
						<string name="ScriptGuid">{87ef703b-ccfe-4ef6-890f-c91f61e9e332}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(_self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b8</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX928eee245f8b47d499ce7f09d113daef">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Portal</string>
					<string name="ScriptGuid">{c2b6e272-9f1a-40a7-bf9b-5c111b1382b3}</string>
					<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295b9</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX8eb499f3732b41548cde724f0b601351">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">NoopRenderer</string>
					<string name="ScriptGuid">{d1fac43c-3cb3-41d0-b407-d6fbe57530a4}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(_reconciler, _node) end

function NoopRenderer.unmountHostNode(_reconciler, _node) end

function NoopRenderer.updateHostNode(_reconciler, node, _newElement)
	return node
end

return NoopRenderer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295ba</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXde535c47ab40400c863b5fbee2a1feb3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">None</string>
					<string name="ScriptGuid">{97667580-63d0-406d-aadd-4adef44773a4}</string>
					<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295bb</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX4ba0616230f34d8e8e1e07c38308fe28">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Logging</string>
					<string name="ScriptGuid">{193d59b1-986c-41a5-add5-27b00d47d53e}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = { "LogInfo {" }

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295bc</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXa848964b87664ef6af52be382e6adc0d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">GlobalConfig.spec</string>
					<string name="ScriptGuid">{b2f94061-5d54-413c-85fb-58b556ee8f78}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local GlobalConfig = require(script.Parent.GlobalConfig)

	it("should have the correct methods", function()
		expect(GlobalConfig).to.be.ok()
		expect(GlobalConfig.set).to.be.ok()
		expect(GlobalConfig.get).to.be.ok()
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295bd</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXe2a12fb78696425c8f5f8ccd3b3ced30">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">GlobalConfig</string>
					<string name="ScriptGuid">{1fc11250-d672-4207-94a3-f80da710df12}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295be</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX7532b545dd1a4125926298e42ed42a2b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ElementUtils.spec</string>
					<string name="ScriptGuid">{174ca915-2873-4dc5-a26b-a5ba16caf381}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local ElementUtils = require(script.Parent.ElementUtils)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local Type = require(script.Parent.Type)

	describe("iterateElements", function()
		it("should iterate once for a single child", function()
			local child = createElement("TextLabel")
			local iterator = ElementUtils.iterateElements(child)
			local iteratedKey, iteratedChild = iterator()
			-- For single elements, the key should be UseParentKey
			expect(iteratedKey).to.equal(ElementUtils.UseParentKey)
			expect(iteratedChild).to.equal(child)

			iteratedKey = iterator()
			expect(iteratedKey).to.equal(nil)
		end)

		it("should iterate over tables", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			local seenChildren = {}
			local count = 0

			for key, child in ElementUtils.iterateElements(children) do
				expect(typeof(key)).to.equal("string")
				expect(Type.of(child)).to.equal(Type.Element)
				seenChildren[child] = key
				count = count + 1
			end

			expect(count).to.equal(2)
			expect(seenChildren[children.a]).to.equal("a")
			expect(seenChildren[children.b]).to.equal("b")
		end)

		it("should return a zero-element iterator for booleans", function()
			local booleanIterator = ElementUtils.iterateElements(false)
			expect(booleanIterator()).to.equal(nil)
		end)

		it("should return a zero-element iterator for nil", function()
			local nilIterator = ElementUtils.iterateElements(nil)
			expect(nilIterator()).to.equal(nil)
		end)

		it("should throw if given an illegal value", function()
			expect(function()
				ElementUtils.iterateElements(1)
			end).to.throw()
		end)
	end)

	describe("getElementByKey", function()
		it("should return nil for booleans", function()
			expect(ElementUtils.getElementByKey(true, "test")).to.equal(nil)
		end)

		it("should return nil for nil", function()
			expect(ElementUtils.getElementByKey(nil, "test")).to.equal(nil)
		end)

		describe("single elements", function()
			local element = createElement("TextLabel")

			it("should return the element if the key is UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, ElementUtils.UseParentKey)).to.equal(element)
			end)

			it("should return nil if the key is not UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, "test")).to.equal(nil)
			end)
		end)

		it("should return the corresponding element from a table", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(children.a)
			expect(ElementUtils.getElementByKey(children, "b")).to.equal(children.b)
		end)

		it("should return nil if the key does not exist", function()
			local children = createFragment({})

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(nil)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295bf</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXc517ea388d09453f9c55839e1da0a8ba">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ElementUtils</string>
					<string name="ScriptGuid">{7fad64ae-8138-420e-bf03-82e6e49d4252}</string>
					<ProtectedString name="Source"><![CDATA[local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements(elementOrElements)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function()
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return noop
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c0</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX46e905b28d8647db8d1e4114bedd8834">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ElementKind.spec</string>
					<string name="ScriptGuid">{550d8dee-8794-43ff-853f-1aba87c85183}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Portal = require(script.Parent.Portal)
	local Component = require(script.Parent.Component)

	local ElementKind = require(script.Parent.ElementKind)

	describe("of", function()
		it("should return nil for non-table values", function()
			expect(ElementKind.of(nil)).to.equal(nil)
			expect(ElementKind.of(5)).to.equal(nil)
			expect(ElementKind.of(newproxy(true))).to.equal(nil)
		end)

		it("should return nil for table values without an ElementKind key", function()
			expect(ElementKind.of({})).to.equal(nil)
		end)

		it("should return the ElementKind from a table", function()
			local value = {
				[ElementKind] = ElementKind.Stateful,
			}

			expect(ElementKind.of(value)).to.equal(ElementKind.Stateful)
		end)
	end)

	describe("fromComponent", function()
		it("should handle host components", function()
			expect(ElementKind.fromComponent("foo")).to.equal(ElementKind.Host)
		end)

		it("should handle function components", function()
			local function foo() end

			expect(ElementKind.fromComponent(foo)).to.equal(ElementKind.Function)
		end)

		it("should handle stateful components", function()
			local Foo = Component:extend("Foo")

			expect(ElementKind.fromComponent(Foo)).to.equal(ElementKind.Stateful)
		end)

		it("should handle portals", function()
			expect(ElementKind.fromComponent(Portal)).to.equal(ElementKind.Portal)
		end)

		it("should return nil for invalid inputs", function()
			expect(ElementKind.fromComponent(5)).to.equal(nil)
			expect(ElementKind.fromComponent(newproxy(true))).to.equal(nil)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c1</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX60084aba1e3345f5a072d6db3467927a">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ElementKind</string>
					<string name="ScriptGuid">{405d6987-3e87-449b-b5df-9ecabb7349d2}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c2</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1d63dd1f8f00428c92fa0a527fddb700">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Config.spec</string>
					<string name="ScriptGuid">{04adcd61-e7ec-4d11-9882-aa0de0e30065}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Config = require(script.Parent.Config)

	it("should accept valid configuration", function()
		local config = Config.new()
		local values = config.get()

		expect(values.elementTracing).to.equal(false)

		config.set({
			elementTracing = true,
		})

		expect(values.elementTracing).to.equal(true)
	end)

	it("should reject invalid configuration keys", function()
		local config = Config.new()

		local badKey = "garblegoop"

		local ok, err = pcall(function()
			config.set({
				[badKey] = true,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention our bad key somewhere.
		expect(err:find(badKey)).to.be.ok()
	end)

	it("should reject invalid configuration values", function()
		local config = Config.new()

		local goodKey = "elementTracing"
		local badValue = "Hello there!"

		local ok, err = pcall(function()
			config.set({
				[goodKey] = badValue,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention both our key and value
		expect(err:find(goodKey)).to.be.ok()
		expect(err:find(badValue)).to.be.ok()
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c3</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX4cab0c5bad5d48ebaed91ab26aa78514">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Config</string>
					<string name="ScriptGuid">{5a4e7ddf-2515-40a7-b132-d55d47055dcc}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = ("Invalid global configuration key %q. Valid configuration keys are: %s"):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end,
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = ("Invalid global configuration key %q (type %s). Valid configuration keys are: %s"):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(tostring(value), typeof(value), tostring(key))

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c4</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX2ee99c1b648946fe88c8c9be72b9ee57">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ComponentLifecyclePhase</string>
					<string name="ScriptGuid">{eefe486a-5630-4141-9d85-674269016e12}</string>
					<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c5</UniqueId>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBXb5b8c8091ab44b4193327a0b90bedf4f">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Component.spec</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c6</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX9bc326e3c4d0406ca0a52e82f4b24ac6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">willUpdate.spec</string>
						<string name="ScriptGuid">{39b432b0-3914-4a9f-9ff1-a4100af7e14d}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, newProps)
		assertDeepEqual(values.newState, {})
	end)

	it("it should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")
		local setComponentState

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:init()
			setComponentState = function(state)
				self:setState(state)
			end

			self:setState({
				foo = 1,
			})
		end

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(willUpdateSpy.callCount).to.equal(0)

		setComponentState({
			foo = 2,
		})

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, {})
		assertDeepEqual(values.newState, {
			foo = 2,
		})
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c7</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX138df245f88d46d7ab8a012196f16ea4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">willUnmount.spec</string>
						<string name="ScriptGuid">{71d6602f-01cc-43be-9564-93a7dfbedcd2}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when unmounted", function()
		local MyComponent = Component:extend("MyComponent")

		local willUnmountSpy = createSpy()

		MyComponent.willUnmount = willUnmountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)
		noopReconciler.unmountVirtualNode(node)

		expect(willUnmountSpy.callCount).to.equal(1)

		local values = willUnmountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c8</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXdc2fc141eb02450a8a277ea69de4afa6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">validateProps.spec</string>
						<string name="ScriptGuid">{c7d1995b-b994-4dff-8b78-5eec14d4aa8a}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should be invoked when props change", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
			})
		end)
	end)

	it("should not be invoked when state changes", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local setStateCallback = nil
			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			setStateCallback({
				b = 1,
			})

			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should throw if validateProps is not a function", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = 1

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should throw if validateProps returns false", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should include the component name in the error message", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local success, error = pcall(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end)

			expect(success).to.equal(false)
			local startIndex = error:find("MyComponent")
			expect(startIndex).to.be.ok()
		end)
	end)

	it("should be invoked after defaultProps are applied", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			MyComponent.defaultProps = {
				b = 2,
			}

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
				b = 2,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
				b = 2,
			})
		end)
	end)

	it("should not be invoked if the flag is off", function()
		local config = {
			propValidation = false,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(0)

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(0)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295c9</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX7581ceb539674f24a19e89f15df4e50c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">shouldUpdate.spec</string>
						<string name="ScriptGuid">{6931a1e9-1b15-463e-8ca4-7e15c713c0f1}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when props update", function()
		local MyComponent = Component:extend("MyComponent")

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		assertDeepEqual(values.newProps, newProps)

		assertDeepEqual(capturedProps, initialProps)

		expect(values.newState).to.equal(capturedState)
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when state is updated", function()
		local MyComponent = Component:extend("MyComponent")

		local initialState = {
			a = 1,
		}

		local setState
		local initState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)

			initState = self.state
		end

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newState = {
			a = 2,
			b = 3,
		}

		setState(newState)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		expect(values.newProps).to.equal(capturedProps)
		assertDeepEqual(capturedProps, {})

		assertDeepEqual(capturedState, initialState)
		expect(capturedState).to.equal(initState)
		assertDeepEqual(values.newState, newState)
	end)

	it("should not abort an update when returning true", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return true
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)
	end)

	it("should abort an update when retuning false", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return false
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(1)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295ca</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8495651de4904263886a3c9bbbd41d48">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">setState.spec</string>
						<string name="ScriptGuid">{9a49b44a-b8d8-483a-9018-ad41a4ac26d2}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("setState", function()
		it("should not trigger an extra update when called in init", function()
			local renderCount = 0
			local updateCount = 0
			local capturedState

			local InitComponent = Component:extend("InitComponent")

			function InitComponent:init()
				self:setState({
					a = 1,
				})
			end

			function InitComponent:willUpdate()
				updateCount = updateCount + 1
			end

			function InitComponent:render()
				renderCount = renderCount + 1
				capturedState = self.state
				return nil
			end

			local initElement = createElement(InitComponent)

			noopReconciler.mountVirtualTree(initElement)

			expect(renderCount).to.equal(1)
			expect(updateCount).to.equal(0)
			expect(capturedState.a).to.equal(1)
		end)

		it("should throw when called in render", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				self:setState({
					a = 1,
				})
			end

			local renderElement = createElement(TestComponent)

			local success, result = pcall(noopReconciler.mountVirtualTree, renderElement)

			expect(success).to.equal(false)
			expect(result:match("render")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in shouldUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:shouldUpdate()
				self:setState({
					a = 1,
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)

			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("shouldUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUpdate()
				self:setState({
					a = 1,
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("willUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUnmount", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUnmount()
				self:setState({
					a = 1,
				})
			end

			local element = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(element)

			local success, result = pcall(noopReconciler.unmountVirtualTree, tree)

			expect(success).to.equal(false)
			expect(result:match("willUnmount")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should remove values from state when the value is None", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback({
				value = None,
			})

			expect(getStateCallback().value).to.equal(nil)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should invoke functions to compute a partial state", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback, getPropsCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				getPropsCallback = function()
					return self.props
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback(function(state, props)
				expect(state).to.equal(getStateCallback())
				expect(props).to.equal(getPropsCallback())

				return {
					value = state.value + 1,
				}
			end)

			expect(getStateCallback().value).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should cancel rendering if the function returns nil", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback
			local renderCount = 0

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				renderCount = renderCount + 1
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")
			expect(renderCount).to.equal(1)

			setStateCallback(function(_state, _props)
				return nil
			end)

			expect(renderCount).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)
	end)

	describe("setState suspension", function()
		it("should defer setState triggered while reconciling", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						self:setState({
							foo = "bar",
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")
		end)

		it("should defer setState triggered while reconciling during an update", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didUpdate()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						-- This guards against a stack overflow that would be OUR fault
						if not self.state.foo then
							self:setState({
								foo = "bar",
							})
						end
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(nil)

			result = noopReconciler.updateVirtualNode(result, createElement(Parent))

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should combine pending state changes properly", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback("foo", 1)
				self.props.callback("bar", 3)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(key, value)
						self:setState({
							[key] = value,
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)
			expect(getParentStateCallback().bar).to.equal(3)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should abort properly when functional setState returns nil while deferred", function()
			local Child = Component:extend("Child")

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			local renderSpy = createSpy(function(self)
				return createElement(Child, {
					callback = function()
						self:setState(function()
							-- abort the setState
							return nil
						end)
					end,
				})
			end)

			Parent.render = renderSpy.value

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(renderSpy.callCount).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should still apply pending state if a subsequent state update was aborted", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback(function()
					return {
						foo = 1,
					}
				end)
				self.props.callback(function()
					return nil
				end)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(stateUpdater)
						self:setState(stateUpdater)
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should not re-process new state when pending state is present after update", function()
			local setComponentState
			local getComponentState

			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					hasUpdatedOnce = false,
					counter = 0,
				})

				setComponentState = function(mapState)
					self:setState(mapState)
				end

				getComponentState = function()
					return self.state
				end
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didUpdate()
				if self.state.hasUpdatedOnce == false then
					self:setState({
						hasUpdatedOnce = true,
					})
				end
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(getComponentState().hasUpdatedOnce).to.equal(false)
			expect(getComponentState().counter).to.equal(0)

			setComponentState(function(state)
				return {
					counter = state.counter + 1,
				}
			end)

			expect(getComponentState().hasUpdatedOnce).to.equal(true)
			expect(getComponentState().counter).to.equal(1)
		end)

		it("should throw when an infinite update is triggered", function()
			local InfiniteUpdater = Component:extend("InfiniteUpdater")

			function InfiniteUpdater:render()
				return nil
			end

			function InfiniteUpdater:didMount()
				self:setState({})
			end

			function InfiniteUpdater:didUpdate()
				self:setState({})
			end

			local element = createElement(InfiniteUpdater)
			local hostParent = nil
			local key = "Test"

			local success, result = pcall(noopReconciler.mountVirtualNode, element, hostParent, key)

			expect(success).to.equal(false)
			expect(result:find("InfiniteUpdater")).to.be.ok()
			expect(result:find("reached the setState update recursion limit")).to.be.ok()
		end)

		itSKIP("should process single updates with both new and pending state", function()
			--[[
				This situation shouldn't be possible currently, but the implementation
				should support it for future update de-duplication
			]]
		end)

		it("should call trigger update after didMount when setting state in didMount", function()
			--[[
				Before setState suspension, it was possible to call setState in didMount but it would
				not actually finish resolving didMount until after the entire update.

				This is theoretically problematic, as it means that lifecycle methods like didUpdate
				could be called before didMount is finished. setState suspension resolves this by
				suspending state updates made in didMount and didUpdate as well as reconciliation
			]]
			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					status = "initial mount",
				})

				self.isMounted = false
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didMount()
				self:setState({
					status = "mounted",
				})

				self.isMounted = true
			end

			function MyComponent:didUpdate(_oldProps, oldState)
				expect(oldState.status).to.equal("initial mount")
				expect(self.state.status).to.equal("mounted")

				expect(self.isMounted).to.equal(true)
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295cb</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXa0e7ff38d9c3480aa159ed798155ab15">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">render.spec</string>
						<string name="ScriptGuid">{759b5f5e-6e1f-443b-a079-4fda6f4caf7d}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should throw on mount if not overridden", function()
		local MyComponent = Component:extend("MyComponent")

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local success, result = pcall(function()
			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(success).to.equal(false)
		expect(result:match("MyComponent")).to.be.ok()
		expect(result:match("render")).to.be.ok()
	end)

	it("should be invoked when a component is mounted", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(capturedProps, {})
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when a component is updated via props", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local initialProps = {
			a = 2,
		}
		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Foo Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(firstProps, initialProps)
		assertDeepEqual(firstState, {})

		local updatedProps = {
			a = 3,
		}
		local newElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)

		local secondRenderArguments = renderSpy:captureValues("self")
		local secondProps = capturedProps
		local secondState = capturedState

		expect(Type.of(secondRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(secondProps).never.to.equal(firstProps)
		assertDeepEqual(secondProps, updatedProps)
		expect(secondState).to.equal(firstState)
	end)

	it("should be invoked when a component is updated via state", function()
		local Foo = Component:extend("Foo")

		local setState
		function Foo:init()
			setState = function(...)
				return self:setState(...)
			end
		end

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)

		setState({})

		expect(renderSpy.callCount).to.equal(2)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(capturedProps).to.equal(firstProps)
		expect(capturedState).never.to.equal(firstState)
	end)

	itSKIP("Test defaultProps on initial render", function() end)
	itSKIP("Test defaultProps on prop update", function() end)
	itSKIP("Test defaultProps on state update", function() end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295cc</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXf3076513faba4f0b90282e0a0eaa551c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">legacyContext.spec</string>
						<string name="ScriptGuid">{7786e707-3167-4e62-95d3-d0a752b59fb8}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as a mutable self._context in Component:init", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.foo = "bar"
		end

		function Provider:render() end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.legacyContext, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.legacyContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.legacyContext, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local capturedContextA
		function ConsumerA:init()
			self._context.A = "hello"

			capturedContextA = self._context
		end

		function ConsumerA:render() end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self._context.B = "hello"

			capturedContextB = self._context
		end

		function ConsumerB:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295cd</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXff5a6359437648f2baf92aea313c73ab">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">init.spec</string>
						<string name="ScriptGuid">{08d773e6-2865-4bfb-a5d2-1f12834cf6b4}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked with props when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local initSpy = createSpy()

		MyComponent.init = initSpy.value

		function MyComponent:render()
			return nil
		end

		local props = {
			a = 5,
		}
		local element = createElement(MyComponent, props)
		local hostParent = nil
		local key = "Some Component Key"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(initSpy.callCount).to.equal(1)

		local values = initSpy:captureValues("self", "props")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		expect(typeof(values.props)).to.equal("table")
		assertDeepEqual(values.props, props)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295ce</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX50ba5871a94c466cbb817d10aaec441e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getElementTraceback.spec</string>
						<string name="ScriptGuid">{60df09f9-eab9-4e60-b309-a6a66adbc449}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should return stack traces in initial renders", function()
		local TestComponent = Component:extend("TestComponent")

		local stackTrace
		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.be.a("string")
	end)

	itSKIP("it should return an updated stack trace after an update", function() end)

	it("should return nil when elementTracing is off", function()
		local stackTrace = nil

		local config = {
			elementTracing = false,
		}

		local TestComponent = Component:extend("TestComponent")

		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.equal(nil)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295cf</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0de125a9c74640e3bfac7c619a5bc2c3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getDerivedStateFromProps.spec</string>
						<string name="ScriptGuid">{1f2f5a85-2962-4b83-8605-40fd64f5c5cd}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.Parent.createSpy)
	local createElement = require(script.Parent.Parent.createElement)
	local createFragment = require(script.Parent.Parent.createFragment)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked on initial mount", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 1 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via props", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(
			createElement(WithDerivedState, {
				someProp = 1,
			}),
			hostParent,
			hostKey
		)

		noopReconciler.updateVirtualNode(
			node,
			createElement(WithDerivedState, {
				someProp = 2,
			})
		)

		expect(getDerivedSpy.callCount).to.equal(2)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 2 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via state", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				someState = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState)
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, element, {
			someState = 2,
		})

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		-- * On updating with new state via updateVirtualNode
		expect(getDerivedSpy.callCount).to.equal(4)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {})
		assertDeepEqual(values.state, { someState = 2 })
	end)

	it("should be invoked when updating via state in init (which skips reconciliation)", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				stateFromInit = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		expect(getDerivedSpy.callCount).to.equal(3)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someProp = 1,
		})
		assertDeepEqual(values.state, {
			stateFromInit = 1,
		})
	end)

	it("should receive defaultProps", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.defaultProps = {
			someDefaultProp = "foo",
		}

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 1,
		})

		-- Update via props, confirm that defaultProp is still present
		element = createElement(WithDerivedState, {
			someProp = 2,
		})

		noopReconciler.updateVirtualNode(node, element)

		expect(getDerivedSpy.callCount).to.equal(2)

		values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 2,
		})
	end)

	it("should derive state for all setState updates, even when deferred", function()
		local Child = Component:extend("Child")
		local stateUpdaterSpy = createSpy(function()
			return {}
		end)
		local stateDerivedSpy = createSpy()

		function Child:render()
			return nil
		end

		function Child:didMount()
			self.props.callback()
		end

		local Parent = Component:extend("Parent")

		Parent.getDerivedStateFromProps = stateDerivedSpy.value

		function Parent:render()
			local callback = function()
				self:setState(stateUpdaterSpy.value)
			end

			return createFragment({
				ChildA = createElement(Child, {
					callback = callback,
				}),
				ChildB = createElement(Child, {
					callback = callback,
				}),
			})
		end

		local element = createElement(Parent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(stateUpdaterSpy.callCount).to.equal(2)

		-- getDerivedStateFromProps is always called on initial state
		expect(stateDerivedSpy.callCount).to.equal(3)
	end)

	it("should have derived state after assigning to state in init", function()
		local getStateCallback
		local getDerivedSpy = createSpy(function()
			return {
				derived = true,
			}
		end)
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self.state = {
				init = true,
			}

			getStateCallback = function()
				return self.state
			end
		end

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"
		local element = createElement(WithDerivedState)

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(2)

		assertDeepEqual(getStateCallback(), {
			init = true,
			derived = true,
		})
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d0</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXbfa2a6c02eae45b0a5ef7a8db6985251">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">extend.spec</string>
						<string name="ScriptGuid">{35b484c5-f800-46b4-8c56-4f6648a48242}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	it("should be extendable", function()
		local MyComponent = Component:extend("The Senate")

		expect(MyComponent).to.be.ok()
		expect(Type.of(MyComponent)).to.equal(Type.StatefulComponentClass)
	end)

	it("should prevent extending a user component", function()
		local MyComponent = Component:extend("Sheev")

		expect(function()
			MyComponent:extend("Frank")
		end).to.throw()
	end)

	it("should use a given name", function()
		local MyComponent = Component:extend("FooBar")

		local name = tostring(MyComponent)

		expect(name).to.be.a("string")
		expect(name:find("FooBar")).to.be.ok()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d1</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXa0b8ecb269a34eb6b326dad7cc822307">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">didUpdate.spec</string>
						<string name="ScriptGuid">{dd284301-ff4b-4635-b7d0-5b6d87a0ce84}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local virtualNode = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(virtualNode, newElement)

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, initialProps)
		assertDeepEqual(values.oldState, {})
	end)

	it("should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		local initialState = {
			a = 4,
		}

		local setState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)
		end

		function MyComponent:render() end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		setState({
			a = 5,
		})

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, {})
		assertDeepEqual(values.oldState, initialState)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d2</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX638dd08a602b49acad3ddc981c17304c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">didMount.spec</string>
						<string name="ScriptGuid">{6c6d4a1c-967a-4532-b492-cd31c5847dec}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local didMountSpy = createSpy()

		MyComponent.didMount = didMountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didMountSpy.callCount).to.equal(1)

		local values = didMountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d3</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX764b413677d3480abe9c68f853a333bb">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">defaultProps.spec</string>
						<string name="ScriptGuid">{02709ecf-7b36-4472-b22c-0ef42705e682}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should fill in when mounting before init", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:init()
			capturedProps = self.props
		end

		function Foo:render() end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = initialProps.b,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should fill in when updating via props", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		local updatedProps = {
			c = 5,
		}
		local updatedElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, updatedElement)

		local expectedProps = {
			a = defaultProps.a,
			b = defaultProps.b,
			c = updatedProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should respect None to override a default prop with nil", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = None,
			c = 4,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = nil,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d4</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX033807d8d7a64136b39e989ece2d0b95">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">context.spec</string>
						<string name="ScriptGuid">{e1b31edb-a8eb-439b-b105-673045263719}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local oneChild = require(script.Parent.Parent.oneChild)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as an internal api on Component", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("foo", "bar")
		end

		function Provider:render() end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.context, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render() end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render() end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should not copy the context table if it doesn't need to", function()
		local Parent = Component:extend("Parent")

		function Parent:init()
			self:__addContext("parent", "I'm here!")
		end

		function Parent:render()
			-- Create some child element
			return createElement(function() end)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			parent = "I'm here!",
		}

		assertDeepEqual(parentNode.context, expectedContext)

		local childNode = oneChild(parentNode.children)

		-- Parent and child should have the same context table
		expect(parentNode.context).to.equal(childNode.context)
	end)

	it("should not allow context to move up the tree", function()
		local ChildProvider = Component:extend("ChildProvider")

		function ChildProvider:init()
			self:__addContext("child", "I'm here too!")
		end

		function ChildProvider:render() end

		local ParentProvider = Component:extend("ParentProvider")

		function ParentProvider:init()
			self:__addContext("parent", "I'm here!")
		end

		function ParentProvider:render()
			return createElement(ChildProvider)
		end

		local element = createElement(ParentProvider)
		local hostParent = nil
		local hostKey = "Parent"

		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)
		local childNode = oneChild(parentNode.children)

		local expectedParentContext = {
			parent = "I'm here!",
			-- Context does not travel back up
		}

		local expectedChildContext = {
			parent = "I'm here!",
			child = "I'm here too!",
		}

		assertDeepEqual(parentNode.context, expectedParentContext)
		assertDeepEqual(childNode.context, expectedChildContext)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				dont = self:__getContext("dont"),
				frob = self:__getContext("frob"),
			}
		end

		function Consumer:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.context).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.context, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local function captureAllContext(component)
			return {
				A = component:__getContext("A"),
				B = component:__getContext("B"),
				frob = component:__getContext("frob"),
			}
		end

		local capturedContextA
		function ConsumerA:init()
			self:__addContext("A", "hello")

			capturedContextA = captureAllContext(self)
		end

		function ConsumerA:render() end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self:__addContext("B", "hello")

			capturedContextB = captureAllContext(self)
		end

		function ConsumerB:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d5</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXc9cb40c0ce7a4c60835d5caef31bc094">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Component</string>
					<string name="ScriptGuid">{5eb4b407-8d4d-4152-a60e-36903a010103}</string>
					<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, rendering, or unmounting, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if
		lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate
		or lifecyclePhase == ComponentLifecyclePhase.WillUpdate
		or lifecyclePhase == ComponentLifecyclePhase.Render
		or lifecyclePhase == ComponentLifecyclePhase.WillUnmount
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)
	elseif
		lifecyclePhase == ComponentLifecyclePhase.DidMount
		or lifecyclePhase == ComponentLifecyclePhase.DidUpdate
		or lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)
	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)
	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(tostring(internalData.componentClass))

	error(message, 0)
end

--[[
	Retrieves the context value corresponding to the given key. Can return nil
	if a requested context key is not present
]]
function Component:__getContext(key)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getContext`")
		internalAssert(key ~= nil, "Context key cannot be nil")
	end

	local virtualNode = self[InternalData].virtualNode
	local context = virtualNode.context

	return context[key]
end

--[[
	Adds a new context entry to this component's context table (which will be
	passed down to child components).
]]
function Component:__addContext(key, value)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__addContext`")
	end
	local virtualNode = self[InternalData].virtualNode

	-- Make sure we store a reference to the component's original, unmodified
	-- context the virtual node. In the reconciler, we'll restore the original
	-- context if we need to replace the node (this happens when a node gets
	-- re-rendered as a different component)
	if virtualNode.originalContext == nil then
		virtualNode.originalContext = virtualNode.context
	end

	-- Build a new context table on top of the existing one, then apply it to
	-- our virtualNode
	local existing = virtualNode.context
	virtualNode.context = assign({}, existing, { [key] = value })
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(
			("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
				typeof(validator),
				self.__componentName
			)
		)
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "<Validator function did not supply a message>"
		error(
			("Property validation failed in %s: %s\n\n%s"):format(
				self.__componentName,
				tostring(failureReason),
				self:getElementTraceback() or "<enable element tracebacks>"
			),
			0
		)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.legacyContext)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
		assign(instance.state, instance:__getDerivedState(instance.props, instance.state))
	end

	-- It's possible for init() to redefine _context!
	virtualNode.legacyContext = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d6</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXd65970a45d684c7fb3f8dbec68c67805">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Binding.spec</string>
					<string name="ScriptGuid">{c2cb65db-71bf-4589-8d99-273ee0ad729a}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)
	local Type = require(script.Parent.Type)
	local GlobalConfig = require(script.Parent.GlobalConfig)

	local Binding = require(script.Parent.Binding)

	describe("Binding.create", function()
		it("should return a Binding object and an update function", function()
			local binding, update = Binding.create(1)

			expect(Type.of(binding)).to.equal(Type.Binding)
			expect(typeof(update)).to.equal("function")
		end)

		it("should support tostring on bindings", function()
			local binding, update = Binding.create(1)
			expect(tostring(binding)).to.equal("RoactBinding(1)")

			update("foo")
			expect(tostring(binding)).to.equal("RoactBinding(foo)")
		end)
	end)

	describe("Binding object", function()
		it("should provide a getter and setter", function()
			local binding, update = Binding.create(1)

			expect(binding:getValue()).to.equal(1)

			update(3)

			expect(binding:getValue()).to.equal(3)
		end)

		it("should let users subscribe and unsubscribe to its updates", function()
			local binding, update = Binding.create(1)

			local spy = createSpy()
			local disconnect = Binding.subscribe(binding, spy.value)

			expect(spy.callCount).to.equal(0)

			update(2)

			expect(spy.callCount).to.equal(1)
			spy:assertCalledWith(2)

			disconnect()
			update(3)

			expect(spy.callCount).to.equal(1)
		end)
	end)

	describe("Mapped bindings", function()
		it("should be composable", function()
			local word, updateWord = Binding.create("hi")

			local wordLength = word:map(string.len)
			local isEvenLength = wordLength:map(function(value)
				return value % 2 == 0
			end)

			expect(word:getValue()).to.equal("hi")
			expect(wordLength:getValue()).to.equal(2)
			expect(isEvenLength:getValue()).to.equal(true)

			updateWord("sup")

			expect(word:getValue()).to.equal("sup")
			expect(wordLength:getValue()).to.equal(3)
			expect(isEvenLength:getValue()).to.equal(false)
		end)

		it("should cascade updates when subscribed", function()
			-- base binding
			local word, updateWord = Binding.create("hi")

			local wordSpy = createSpy()
			local disconnectWord = Binding.subscribe(word, wordSpy.value)

			-- binding -> base binding
			local length = word:map(string.len)

			local lengthSpy = createSpy()
			local disconnectLength = Binding.subscribe(length, lengthSpy.value)

			-- binding -> binding -> base binding
			local isEvenLength = length:map(function(value)
				return value % 2 == 0
			end)

			local isEvenLengthSpy = createSpy()
			local disconnectIsEvenLength = Binding.subscribe(isEvenLength, isEvenLengthSpy.value)

			expect(wordSpy.callCount).to.equal(0)
			expect(lengthSpy.callCount).to.equal(0)
			expect(isEvenLengthSpy.callCount).to.equal(0)

			updateWord("nice")

			expect(wordSpy.callCount).to.equal(1)
			wordSpy:assertCalledWith("nice")

			expect(lengthSpy.callCount).to.equal(1)
			lengthSpy:assertCalledWith(4)

			expect(isEvenLengthSpy.callCount).to.equal(1)
			isEvenLengthSpy:assertCalledWith(true)

			disconnectWord()
			disconnectLength()
			disconnectIsEvenLength()

			updateWord("goodbye")

			expect(wordSpy.callCount).to.equal(1)
			expect(isEvenLengthSpy.callCount).to.equal(1)
			expect(lengthSpy.callCount).to.equal(1)
		end)

		it("should throw when updated directly", function()
			local source = Binding.create(1)
			local mapped = source:map(function(v)
				return v
			end)

			expect(function()
				Binding.update(mapped, 5)
			end).to.throw()
		end)
	end)

	describe("Binding.join", function()
		it("should have getValue", function()
			local binding1 = Binding.create(1)
			local binding2 = Binding.create(2)
			local binding3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local bindingValue = joinedBinding:getValue()
			expect(bindingValue).to.be.a("table")
			expect(bindingValue[1]).to.equal(1)
			expect(bindingValue[2]).to.equal(2)
			expect(bindingValue.foo).to.equal(3)
		end)

		it("should update when any one of the subscribed bindings updates", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)
			local binding3, update3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local spy = createSpy()
			Binding.subscribe(joinedBinding, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			local args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(2)
			expect(args.value["foo"]).to.equal(3)

			update2(4)
			expect(spy.callCount).to.equal(2)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(3)

			update3(8)
			expect(spy.callCount).to.equal(3)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(8)
		end)

		it("should disconnect from all upstream bindings", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)

			local joined = Binding.join({ binding1, binding2 })

			local spy = createSpy()
			local disconnect = Binding.subscribe(joined, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			update2(3)
			expect(spy.callCount).to.equal(2)

			disconnect()
			update1(4)
			expect(spy.callCount).to.equal(2)

			update2(2)
			expect(spy.callCount).to.equal(2)

			local value = joined:getValue()
			expect(value[1]).to.equal(4)
			expect(value[2]).to.equal(2)
		end)

		it("should be okay with calling disconnect multiple times", function()
			local joined = Binding.join({})

			local disconnect = Binding.subscribe(joined, function() end)

			disconnect()
			disconnect()
		end)

		it("should throw if updated directly", function()
			local joined = Binding.join({})

			expect(function()
				Binding.update(joined, 0)
			end)
		end)

		it("should throw when a non-table value is passed", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					Binding.join("hi")
				end).to.throw()
			end)
		end)

		it("should throw when a non-binding value is passed via table", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					local binding = Binding.create(123)

					Binding.join({
						binding,
						"abcde",
					})
				end).to.throw()
			end)
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d7</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX837aacd985e64dc99b82ebc29bcb6f80">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Binding</string>
					<string name="ScriptGuid">{7ed8c333-cef4-4591-94ea-99633e627b9b}</string>
					<ProtectedString name="Source"><![CDATA[local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(_newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = ("Expected arg #1 to contain only bindings, but key %q had a non-binding value"):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(_newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(_newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d000295d8</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXa006e5cfe56e42a29dcec7a9ffbe46ef">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Rodux</string>
				<string name="ScriptGuid">{c7c119d4-5d38-4d88-bdc6-fa29b75966ea}</string>
				<ProtectedString name="Source"><![CDATA[local Store = require(script.Store)
local createReducer = require(script.createReducer)
local combineReducers = require(script.combineReducers)
local makeActionCreator = require(script.makeActionCreator)
local loggerMiddleware = require(script.loggerMiddleware)
local thunkMiddleware = require(script.thunkMiddleware)

return {
	Store = Store,
	createReducer = createReducer,
	combineReducers = combineReducers,
	makeActionCreator = makeActionCreator,
	loggerMiddleware = loggerMiddleware.middleware,
	thunkMiddleware = thunkMiddleware,
}
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da0c</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBXeb6f2bc588eb4da2bbc37a957622464e">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">thunkMiddleware.spec</string>
					<string name="ScriptGuid">{161929ca-1d8c-4fea-9593-8630d65a58f9}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Store = require(script.Parent.Store)
	local thunkMiddleware = require(script.Parent.thunkMiddleware)

	it("should dispatch thunks", function()
		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {}, { thunkMiddleware })
		local thunkCount = 0

		local function thunk(_store)
			thunkCount = thunkCount + 1
		end

		store:dispatch(thunk)

		expect(thunkCount).to.equal(1)
	end)

	it("should allow normal actions to pass through", function()
		local reducerCount = 0

		local function reducer(state, action)
			reducerCount = reducerCount + 1
			return state
		end

		local store = Store.new(reducer, {}, { thunkMiddleware })

		store:dispatch({
			type = "test",
		})

		-- Reducer will be invoked twice:
		-- Once when creating the store (@@INIT action)
		-- Once when the test action is dispatched
		expect(reducerCount).to.equal(2)
	end)

	it("should return the value from the thunk", function()
		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {}, { thunkMiddleware })
		local thunkValue = "test"

		local function thunk(_store)
			return thunkValue
		end

		local result = store:dispatch(thunk)

		expect(result).to.equal(thunkValue)
	end)

	it("should report errors captured in thunks via the provided error reporter", function()
		local caughtState, caughtAction, caughtErrorResult
		local errorReporter = {
			reportReducerError = function(state, action, errorResult)
				caughtState = state
				caughtAction = action
				caughtErrorResult = errorResult
			end
		}

		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {
			Value = 1
		}, { thunkMiddleware }, errorReporter)

		local innerErrorMessage = "thunk failed"
		local function thunk(_store)
			error(innerErrorMessage)
		end

		store:dispatch(thunk)

		expect(caughtState.Value).to.equal(1)
		expect(caughtAction).to.equal(thunk)
		expect(caughtErrorResult.message).to.equal("Caught error in thunk")
	end)

	it("should recover and continue to update after a thunk errors", function()
		local caughtErrorResult
		local errorReporter = {
			reportReducerError = function(_state, _action, errorResult)
				caughtErrorResult = errorResult
			end
		}

		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {
			Value = 1
		}, { thunkMiddleware }, errorReporter)

		local innerErrorMessage = "thunk failed"
		local function errorThunk(_store)
			error(innerErrorMessage)
		end
		local ranSafeThunk = false
		local function safeThunk(_store)
			ranSafeThunk = true
		end

		store:dispatch(errorThunk)
		expect(caughtErrorResult.message).to.equal("Caught error in thunk")

		store:dispatch(safeThunk)
		expect(ranSafeThunk).to.equal(true)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da0d</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX349c817ee1a347b0b63e555ae60728cd">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">thunkMiddleware</string>
					<string name="ScriptGuid">{25c40b1f-b2fa-44d0-8957-1fa1e460ff18}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A middleware that allows for functions to be dispatched.
	Functions will receive a single argument, the store itself.
	This middleware consumes the function; middleware further down the chain
	will not receive it.
]]
local function tracebackReporter(message)
	return debug.traceback(message)
end

local function thunkMiddleware(nextDispatch, store)
	return function(action)
		if typeof(action) == "function" then
			local ok, result = xpcall(function()
				return action(store)
			end, tracebackReporter)

			if not ok then
				-- report the error and move on so it's non-fatal app
				store._errorReporter.reportReducerError(store:getState(), action, {
					message = "Caught error in thunk",
					thrownValue = result,
				})
				return nil
			end

			return result
		end

		return nextDispatch(action)
	end
end

return thunkMiddleware
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da0e</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXca7f3823be1c4a6397f158ec8eae6035">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">prettyPrint</string>
					<string name="ScriptGuid">{f9ac67c4-6428-4134-a493-b25de49e8e80}</string>
					<ProtectedString name="Source"><![CDATA[local indent = "    "

local function prettyPrint(value, indentLevel)
	indentLevel = indentLevel or 0
	local output = {}

	if typeof(value) == "table" then
		table.insert(output, "{\n")

		for tableKey, tableValue in pairs(value) do
			table.insert(output, indent:rep(indentLevel + 1))
			table.insert(output, tostring(tableKey))
			table.insert(output, " = ")

			table.insert(output, prettyPrint(tableValue, indentLevel + 1))
			table.insert(output, "\n")
		end

		table.insert(output, indent:rep(indentLevel))
		table.insert(output, "}")
	elseif typeof(value) == "string" then
		table.insert(output, string.format("%q", value))
		table.insert(output, " (string)")
	else
		table.insert(output, tostring(value))
		table.insert(output, " (")
		table.insert(output, typeof(value))
		table.insert(output, ")")
	end

	return table.concat(output, "")
end

return prettyPrint]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da0f</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1c95fa25af3f437a8fed591fb60714ba">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">makeActionCreator.spec</string>
					<string name="ScriptGuid">{89d97458-c4d2-4de0-af7d-ffefb6a6fd89}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local makeActionCreator = require(script.Parent.makeActionCreator)

	it("should set the name of the actionCreator creator", function()
		local FooAction = makeActionCreator("foo", function()
			return {}
		end)

		expect(FooAction.name).to.equal("foo")
	end)

	it("should return a table when called as a function", function()
		local FooAction = makeActionCreator("foo", function()
			return {}
		end)

		expect(FooAction()).to.be.a("table")
	end)

	it("should set the type of the action creator", function()
		local FooAction = makeActionCreator("foo", function()
			return {}
		end)

		expect(FooAction().type).to.equal("foo")
	end)

	it("should set values", function()
		local FooAction = makeActionCreator("foo", function(value)
			return {
				value = value
			}
		end)

		expect(FooAction(100).value).to.equal(100)
	end)

	it("should throw when its result does not return a table", function()
		local FooAction = makeActionCreator("foo", function()
			return function() end
		end)

		expect(FooAction).to.throw()
	end)

	it("should throw if the first argument is not a string", function()
		expect(function()
			makeActionCreator(nil, function()
				return {}
			end)
		end).to.throw()

		expect(function()
			makeActionCreator(100, function()
				return {}
			end)
		end).to.throw()
	end)

	it("should throw if the second argument is not a function", function()
		expect(function()
			makeActionCreator("foo", nil)
		end).to.throw()

		expect(function()
			makeActionCreator("foo", {})
		end).to.throw()
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da10</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXb2ccfc9ff78047919e76543d1ca0d057">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">makeActionCreator</string>
					<string name="ScriptGuid">{549b6126-ee26-4231-9f9b-63fa93b78290}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A helper function to define a Rodux action creator with an associated name.
]]
local function makeActionCreator(name, fn)
	assert(type(name) == "string", "Bad argument #1: Expected a string name for the action creator")

	assert(type(fn) == "function", "Bad argument #2: Expected a function that creates action objects")

	return setmetatable({
		name = name,
	}, {
		__call = function(self, ...)
			local result = fn(...)

			assert(type(result) == "table", "Invalid action: An action creator must return a table")

			result.type = name

			return result
		end
	})
end

return makeActionCreator
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da11</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXcb03c9b1558a47bb83dc477592150005">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">loggerMiddleware.spec</string>
					<string name="ScriptGuid">{708ee061-bbe0-4e51-87ae-0090c31b4e2c}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Store = require(script.Parent.Store)
	local loggerMiddleware = require(script.Parent.loggerMiddleware)

	it("should print whenever an action is dispatched", function()
		local outputCount = 0
		local outputMessage

		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {
			fooValue = 12345,
			barValue = {
				bazValue = "hiBaz",
			},
		}, { loggerMiddleware.middleware })

		loggerMiddleware.outputFunction = function(message)
			outputCount = outputCount + 1
			outputMessage = message
		end

		store:dispatch({
			type = "testActionType",
		})

		expect(outputCount).to.equal(1)
		expect(outputMessage:find("testActionType")).to.be.ok()
		expect(outputMessage:find("fooValue")).to.be.ok()
		expect(outputMessage:find("12345")).to.be.ok()
		expect(outputMessage:find("barValue")).to.be.ok()
		expect(outputMessage:find("bazValue")).to.be.ok()
		expect(outputMessage:find("hiBaz")).to.be.ok()

		loggerMiddleware.outputFunction = print
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da12</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX4a6e50f81e5944c989d76b39563f3411">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">loggerMiddleware</string>
					<string name="ScriptGuid">{e4b8b5b4-c3de-4721-b142-751de43aa98e}</string>
					<ProtectedString name="Source"><![CDATA[-- We want to be able to override outputFunction in tests, so the shape of this
-- module is kind of unconventional.
--
-- We fix it this weird shape in init.lua.
local prettyPrint = require(script.Parent.prettyPrint)
local loggerMiddleware = {
	outputFunction = print,
}

function loggerMiddleware.middleware(nextDispatch, store)
	return function(action)
		local result = nextDispatch(action)

		loggerMiddleware.outputFunction(("Action dispatched: %s\nState changed to: %s"):format(
			prettyPrint(action),
			prettyPrint(store:getState())
		))

		return result
	end
end

return loggerMiddleware
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da13</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1d1cd6d6de82443ab8899c80984c1098">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">init.spec</string>
					<string name="ScriptGuid">{b493b615-9683-453c-ab5c-bef5954a0791}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	describe("Rodux", function()
		it("should load", function()
			local Rodux = require(script.Parent)

			expect(Rodux.Store).to.be.ok()
		end)
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da14</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0ee07bc555d7402e88f7795f6531f492">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createReducer.spec</string>
					<string name="ScriptGuid">{0168b550-7527-402e-b7b6-cbe490220627}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local createReducer = require(script.Parent.createReducer)

	it("should handle actions", function()
		local reducer = createReducer({
			a = 0,
			b = 0,
		}, {
			a = function(state, action)
				return {
					a = state.a + 1,
					b = state.b,
				}
			end,
			b = function(state, action)
				return {
					a = state.a,
					b = state.b + 2,
				}
			end,
		})

		local newState = reducer({
			a = 0,
			b = 0,
		}, {
			type = "a",
		})

		expect(newState.a).to.equal(1)

		newState = reducer(newState, {
			type = "b",
		})

		expect(newState.b).to.equal(2)
	end)

	it("should return the initial state if the state is nil", function()
		local reducer = createReducer({
			a = 0,
			b = 0,
		-- We don't care about the actions here
		}, {})

		local newState = reducer(nil, {})
		expect(newState).to.be.ok()
		expect(newState.a).to.equal(0)
		expect(newState.b).to.equal(0)
	end)

	it("should still run action handlers if the state is nil", function()
		local callCount = 0

		local reducer = createReducer(0, {
			foo = function(state, action)
				callCount = callCount + 1
				return nil
			end
		})

		expect(callCount).to.equal(0)

		local newState = reducer(nil, {
			type = "foo",
		})

		expect(callCount).to.equal(1)
		expect(newState).to.equal(nil)

		newState = reducer(newState, {
			type = "foo",
		})

		expect(callCount).to.equal(2)
		expect(newState).to.equal(nil)
	end)

	it("should return the same state if the action is not handled", function()
		local initialState = {
			a = 0,
			b = 0,
		}

		local reducer = createReducer(initialState, {
			a = function(state, action)
				return {
					a = state.a + 1,
					b = state.b,
				}
			end,
			b = function(state, action)
				return {
					a = state.a,
					b = state.b + 2,
				}
			end,
		})

		local newState = reducer(initialState, {
			type = "c",
		})

		expect(newState).to.equal(initialState)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da15</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX9785abc84c5e48aeb3602b918c0a0050">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">createReducer</string>
					<string name="ScriptGuid">{c4223569-eeef-4011-8d25-336e06fb70d7}</string>
					<ProtectedString name="Source"><![CDATA[return function(initialState, handlers)
	return function(state, action)
		if state == nil then
			state = initialState
		end

		local handler = handlers[action.type]

		if handler then
			return handler(state, action)
		end

		return state
	end
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da16</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXc7c2570881eb46cc8d652905452c766d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">combineReducers.spec</string>
					<string name="ScriptGuid">{5ce5708c-4749-48ca-8fd0-9600b66d4bfe}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local combineReducers = require(script.Parent.combineReducers)

	it("should invoke each sub-reducer for every action", function()
		local aCount = 0
		local bCount = 0

		local reducer = combineReducers({
			a = function(state, action)
				aCount = aCount + 1
			end,
			b = function(state, action)
				bCount = bCount + 1
			end,
		})

		-- Mock reducer invocation
		reducer({}, {})
		expect(aCount).to.equal(1)
		expect(bCount).to.equal(1)
	end)

	it("should assign each sub-reducer's value to the new state", function()
		local reducer = combineReducers({
			a = function(state, action)
				return (state or 0) + 1
			end,
			b = function(state, action)
				return (state or 0) + 3
			end,
		})

		local newState = reducer({}, {})
		expect(newState.a).to.equal(1)
		expect(newState.b).to.equal(3)
	end)

	it("should not throw when state is nil", function()
		local reducer = combineReducers({
			a = function(state, action)
				return (state or 0) + 1
			end,
			b = function(state, action)
				return (state or 0) + 3
			end,
		})

		expect(function()
			reducer(nil, {})
		end).to.never.throw()
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da17</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0431e2ab36c4433b9e3d6da3635f4f87">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">combineReducers</string>
					<string name="ScriptGuid">{3564bebc-0033-4690-bf28-9985a8cbc78e}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Create a composite reducer from a map of keys and sub-reducers.
]]
local function combineReducers(map)
	return function(state, action)
		-- If state is nil, substitute it with a blank table.
		if state == nil then
			state = {}
		end

		local newState = {}

		for key, reducer in pairs(map) do
			-- Each reducer gets its own state, not the entire state table
			newState[key] = reducer(state[key], action)
		end

		return newState
	end
end

return combineReducers
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da18</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXcc01507d87bb4164908a6fa62d425ec3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Store.spec</string>
					<string name="ScriptGuid">{60894004-8b0a-4a73-924d-3e977dae539a}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Store = require(script.Parent.Store)

	describe("new", function()
		it("should instantiate with a reducer", function()
			local store = Store.new(function(state, action)
				return "hello, world"
			end)

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("hello, world")

			store:destruct()
		end)

		it("should instantiate with a reducer and an initial state", function()
			local store = Store.new(function(state, action)
				return state
			end, "initial state")

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("initial state")

			store:destruct()
		end)

		it("should instantiate with a reducer, initial state, and middlewares", function()
			local store = Store.new(function(state, action)
				return state
			end, "initial state", {})

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("initial state")

			store:destruct()
		end)

		it("should modify the dispatch method when middlewares are passed", function()
			local middlewareInstantiateCount = 0
			local middlewareInvokeCount = 0
			local passedDispatch
			local passedStore
			local passedAction

			local function reducer(state, action)
				if action.type == "test" then
					return "test state"
				end

				return state
			end

			local function testMiddleware(nextDispatch, store)
				middlewareInstantiateCount = middlewareInstantiateCount + 1
				passedDispatch = nextDispatch
				passedStore = store

				return function(action)
					middlewareInvokeCount = middlewareInvokeCount + 1
					passedAction = action

					nextDispatch(action)
				end
			end

			local store = Store.new(reducer, "initial state", { testMiddleware })

			expect(middlewareInstantiateCount).to.equal(1)
			expect(middlewareInvokeCount).to.equal(0)
			expect(passedDispatch).to.be.a("function")
			expect(passedStore).to.equal(store)

			store:dispatch({
				type = "test",
			})

			expect(middlewareInstantiateCount).to.equal(1)
			expect(middlewareInvokeCount).to.equal(1)
			expect(passedAction.type).to.equal("test")

			store:flush()

			expect(store:getState()).to.equal("test state")

			store:destruct()
		end)

		it("should execute middleware left-to-right", function()
			local events = {}

			local function reducer(state)
				return state
			end

			local function middlewareA(nextDispatch, store)
				table.insert(events, "instantiate a")
				return function(action)
					table.insert(events, "execute a")
					return nextDispatch(action)
				end
			end

			local function middlewareB(nextDispatch, store)
				table.insert(events, "instantiate b")
				return function(action)
					table.insert(events, "execute b")
					return nextDispatch(action)
				end
			end

			local store = Store.new(reducer, 5, { middlewareA, middlewareB })

			expect(#events).to.equal(2)
			expect(events[1]).to.equal("instantiate b")
			expect(events[2]).to.equal("instantiate a")

			store:dispatch({
				type = "test",
			})

			expect(#events).to.equal(4)
			expect(events[3]).to.equal("execute a")
			expect(events[4]).to.equal("execute b")

			store:destruct()
		end)

		it("should send an initial action with a 'type' field", function()
			local lastAction
			local callCount = 0

			local store = Store.new(function(state, action)
				lastAction = action
				callCount = callCount + 1

				return state
			end)

			expect(callCount).to.equal(1)
			expect(lastAction).to.be.a("table")
			expect(lastAction.type).to.be.ok()

			store:destruct()
		end)

		it("should report a reducer error thrown when handling the INIT action", function()
			local caughtState, caughtAction, caughtErrorResult
			local mockErrorReporter = {
				reportReducerError = function(state, action, errorResult)
					caughtState = state
					caughtAction = action
					caughtErrorResult = errorResult
				end,
				reportUpdateError = function()
					-- no op
				end
			}

			local innerErrorMessage = "Z4PH0D"
			local reducerThatErrors = function(state, action)
				error(innerErrorMessage)
			end

			local store
			store = Store.new(reducerThatErrors, {
				Value = 1
			}, nil, mockErrorReporter)

			expect(caughtState.Value).to.equal(1)
			expect(caughtAction.type).to.equal("@@INIT")
			expect(caughtErrorResult.message).to.equal("Caught error in reducer with init")
			expect(string.find(
				caughtErrorResult.thrownValue,
				innerErrorMessage
			)).to.be.ok()
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(
				caughtErrorResult.thrownValue,
				script.Name
			)).to.be.ok()

			store:destruct()
		end)

		it("should report a reducer error thrown when handling a subsequent action", function()
			local caughtState, caughtAction, caughtErrorResult
			local mockErrorReporter = {
				reportReducerError = function(state, action, errorResult)
					caughtState = state
					caughtAction = action
					caughtErrorResult = errorResult
				end,
				reportUpdateError = function()
					-- no op
				end
			}

			local innerErrorMessage = "Z4PH0D"
			local reducerThatErrorsAfterInit = function(state, action)
				if action.type == "ThrowError" then
					error(innerErrorMessage)
				elseif action.type == "Increment" then
					return {
						Value = state.Value + 1
					}
				end
				return state
			end

			local store
			store = Store.new(reducerThatErrorsAfterInit, {
				Value = 1,
			}, nil, mockErrorReporter)

			expect(caughtState).to.equal(nil)
			expect(caughtAction).to.equal(nil)
			expect(caughtErrorResult).to.equal(nil)

			store:dispatch({type = "Increment"})
			store:dispatch({type = "ThrowError"})

			expect(caughtState.Value).to.equal(2)
			expect(caughtAction.type).to.equal("ThrowError")
			expect(caughtErrorResult.message).to.equal("Caught error in reducer")
			expect(string.find(
				caughtErrorResult.thrownValue,
				innerErrorMessage
			)).to.be.ok()
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(
				caughtErrorResult.thrownValue,
				script.Name
			)).to.be.ok()

			store:destruct()
		end)

	end)

	describe("getState", function()
		it("should get the current state", function()
			local store = Store.new(function(state, action)
				return "foo"
			end)

			local state = store:getState()

			expect(state).to.equal("foo")

			store:destruct()
		end)

		it("should throw errors if triggered during dispatches", function()
			local store
			store = Store.new(function(state, action)
				if action.type ~= "@@INIT" then
					store:getState()
				end
			end)

			expect(function()
				store:dispatch({ type = "SomeAction" })
			end).to.throw()

			store:destruct()
		end)
	end)

	describe("dispatch", function()
		it("should be sent through the reducer", function()
			local store = Store.new(function(state, action)
				state = state or "foo"

				if action.type == "act" then
					return "bar"
				end

				return state
			end)

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("foo")

			store:dispatch({
				type = "act",
			})

			store:flush()

			expect(store:getState()).to.equal("bar")

			store:destruct()
		end)

		it("should trigger the changed event after a flush", function()
			local store = Store.new(function(state, action)
				state = state or 0

				if action.type == "increment" then
					return state + 1
				end

				return state
			end)

			local callCount = 0

			store.changed:connect(function(state, oldState)
				expect(oldState).to.equal(0)
				expect(state).to.equal(1)

				callCount = callCount + 1
			end)

			store:dispatch({
				type = "increment",
			})

			store:flush()

			expect(callCount).to.equal(1)

			store:destruct()
		end)

		it("should handle actions dispatched within the changed event", function()
			local store = Store.new(function(state, action)
				state = state or {
					value = 0,
				}

				if action.type == "increment" then
					return {
						value = state.value + 1,
					}
				elseif action.type == "decrement" then
					return {
						value = state.value - 1,
					}
				end

				return state
			end)

			local changeCount = 0

			store.changed:connect(function(state, oldState)
				expect(state).never.to.equal(oldState)

				if state.value > 0 then
					store:dispatch({
						type = "decrement",
					})
				end

				changeCount = changeCount + 1
			end)

			store:dispatch({
				type = "increment",
			})
			store:flush()
			store:flush()

			expect(changeCount).to.equal(2)

			store:destruct()
		end)

		it("should prevent yielding from changed handler", function()
			local reportedErrorMessage, reportedErrorError
			local mockErrorReporter = {
				reportUpdateError = function(_, _, _, errorResult)
					reportedErrorMessage = errorResult.message
					reportedErrorError = errorResult.thrownValue
				end,
				reportReducerError = function()
					-- noop
				end,
			}
			local preCount = 0
			local postCount = 0

			local store = Store.new(function(state, action)
				state = state or 0
				return state + 1
			end, nil, nil, mockErrorReporter)

			store.changed:connect(function(state, oldState)
				preCount = preCount + 1
				wait()
				postCount = postCount + 1
			end)

			store:dispatch({
				type = "increment",
			})

			store:flush()

			expect(preCount).to.equal(1)
			expect(postCount).to.equal(0)

			expect(reportedErrorMessage).to.equal("Caught error flushing store updates")
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(reportedErrorError, script.Name)).to.be.ok()
			-- In vanilla lua, we get this message:
			--   "attempt to yield across metamethod/C-call boundary"
			-- In luau, we should end up wrapping our own NoYield message:
			--   "Attempted to yield inside changed event!"
			-- For convenience's sake, we just look for the common substring
			local caughtErrorSubstring = "to yield"
			expect(string.find(reportedErrorError, caughtErrorSubstring)).to.be.ok()

			store:destruct()
		end)

		it("should throw if an action is dispatched without a type field", function()
			local store = Store.new(function(state, action)
				return state
			end)

			expect(function()
				store:dispatch({})
			end).to.throw()

			store:destruct()
		end)

		it("should throw if the action is not a function or table", function()
			local store = Store.new(function(state, action)
				return state
			end)

			expect(function()
				store:dispatch(1)
			end).to.throw()

			store:destruct()
		end)

		it("should report an error if the listeners error when flushing", function()
			local caughtPrevState, caughtState, caughtActionLog, caughtErrorResult
			local mockErrorReporter = {
				reportReducerError = function()
					-- no op
				end,
				reportUpdateError = function(prevState, state, actionLog, errorResult)
					caughtPrevState = prevState
					caughtState = state
					caughtActionLog = actionLog
					caughtErrorResult = errorResult
				end
			}

			local reducer = function(state, action)
				if action.type == "Increment" then
					return {
						Value = state.Value + action.amount
					}
				end
				return state
			end
			local store = Store.new(reducer, {
				Value = 1,
			}, nil, mockErrorReporter)

			local innerErrorMessage = "Z4PH0D"
			store.changed:connect(function(state, prevState)
				if state.Value == 15 then
					error(innerErrorMessage)
				end
			end)

			local actions = {
				{type = "Increment", amount = 1},
				{type = "Increment", amount = 3},
				{type = "Increment", amount = 10},
			}
			for _, action in ipairs(actions) do
				store:dispatch(action)
			end
			store:flush()

			expect(caughtErrorResult.message).to.equal("Caught error flushing store updates")
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(caughtErrorResult.thrownValue, script.Name)).to.be.ok()

			expect(caughtActionLog[1]).to.equal(actions[1])
			expect(caughtActionLog[2]).to.equal(actions[2])
			expect(caughtActionLog[3]).to.equal(actions[3])

			-- This is before any of the actions were processed; the flush will
			-- apply the new state from all three actions
			expect(caughtPrevState.Value).to.equal(1)
			expect(caughtState.Value).to.equal(15)

			store:destruct()
		end)

		it("should throw errors if dispatching while a dispatch is already happening", function()
			local store
			store = Store.new(function(state, action)
				if action.type == "SomeAction" then
					store:dispatch({ type = "MidDispatchAction" })
				end
			end)

			expect(function()
				store:dispatch({ type = "SomeAction" })
			end).to.throw()

			store:destruct()
		end)
	end)

	describe("flush", function()
		it("should not fire a changed event if there were no dispatches", function()
			local store = Store.new(function()
			end)

			local count = 0
			store.changed:connect(function()
				count = count + 1
			end)

			store:flush()

			expect(count).to.equal(0)

			store:dispatch({
				type = "increment",
			})
			store:flush()

			expect(count).to.equal(1)

			store:flush()

			expect(count).to.equal(1)

			store:destruct()
		end)
	end)
end
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da19</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXcdfabd2b764e42748091522cdc0f41f5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Store</string>
					<string name="ScriptGuid">{90c45df9-3802-43e4-9f97-9e3e75f7c61e}</string>
					<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Signal = require(script.Parent.Signal)
local NoYield = require(script.Parent.NoYield)

local ACTION_LOG_LENGTH = 3

local rethrowErrorReporter = {
	reportReducerError = function(prevState, action, errorResult)
		error(string.format("Received error: %s\n\n%s", errorResult.message, errorResult.thrownValue))
	end,
	reportUpdateError = function(prevState, currentState, lastActions, errorResult)
		error(string.format("Received error: %s\n\n%s", errorResult.message, errorResult.thrownValue))
	end,
}

local function tracebackReporter(message)
	return debug.traceback(tostring(message))
end

local Store = {}

-- This value is exposed as a private value so that the test code can stay in
-- sync with what event we listen to for dispatching the Changed event.
-- It may not be Heartbeat in the future.
Store._flushEvent = RunService.Heartbeat

Store.__index = Store

--[[
	Create a new Store whose state is transformed by the given reducer function.

	Each time an action is dispatched to the store, the new state of the store
	is given by:

		state = reducer(state, action)

	Reducers do not mutate the state object, so the original state is still
	valid.
]]
function Store.new(reducer, initialState, middlewares, errorReporter)
	assert(typeof(reducer) == "function", "Bad argument #1 to Store.new, expected function.")
	assert(middlewares == nil or typeof(middlewares) == "table", "Bad argument #3 to Store.new, expected nil or table.")
	if middlewares ~= nil then
		for i=1, #middlewares, 1 do
			assert(
				typeof(middlewares[i]) == "function",
				("Expected the middleware ('%s') at index %d to be a function."):format(tostring(middlewares[i]), i)
			)
		end
	end

	local self = {}

	self._errorReporter = errorReporter or rethrowErrorReporter
	self._isDispatching = false
	self._reducer = reducer
	local initAction = {
		type = "@@INIT",
	}
	self._actionLog = { initAction }
	local ok, result = xpcall(function()
		self._state = reducer(initialState, initAction)
	end, tracebackReporter)
	if not ok then
		self._errorReporter.reportReducerError(initialState, initAction, {
			message = "Caught error in reducer with init",
			thrownValue = result,
		})
		self._state = initialState
	end
	self._lastState = self._state

	self._mutatedSinceFlush = false
	self._connections = {}

	self.changed = Signal.new(self)

	setmetatable(self, Store)

	local connection = self._flushEvent:Connect(function()
		self:flush()
	end)
	table.insert(self._connections, connection)

	if middlewares then
		local unboundDispatch = self.dispatch
		local dispatch = function(...)
			return unboundDispatch(self, ...)
		end

		for i = #middlewares, 1, -1 do
			local middleware = middlewares[i]
			dispatch = middleware(dispatch, self)
		end

		self.dispatch = function(_self, ...)
			return dispatch(...)
		end
	end

	return self
end

--[[
	Get the current state of the Store. Do not mutate this!
]]
function Store:getState()
	if self._isDispatching then
		error(("You may not call store:getState() while the reducer is executing. " ..
			"The reducer (%s) has already received the state as an argument. " ..
			"Pass it down from the top reducer instead of reading it from the store."):format(tostring(self._reducer)))
	end

	return self._state
end

--[[
	Dispatch an action to the store. This allows the store's reducer to mutate
	the state of the application by creating a new copy of the state.

	Listeners on the changed event of the store are notified when the state
	changes, but not necessarily on every Dispatch.
]]
function Store:dispatch(action)
	if typeof(action) ~= "table" then
		error(("Actions must be tables. " ..
			"Use custom middleware for %q actions."):format(typeof(action)),
			2
		)
	end

	if action.type == nil then
		error("Actions may not have an undefined 'type' property. " ..
			"Have you misspelled a constant? \n" ..
			tostring(action), 2)
	end

	if self._isDispatching then
		error("Reducers may not dispatch actions.")
	end

	local ok, result = pcall(function()
		self._isDispatching = true
		self._state = self._reducer(self._state, action)
		self._mutatedSinceFlush = true
	end)

	self._isDispatching = false

	if not ok then
		self._errorReporter.reportReducerError(
			self._state,
			action,
			{
				message = "Caught error in reducer",
				thrownValue = result,
			}
		)
	end

	if #self._actionLog == ACTION_LOG_LENGTH then
		table.remove(self._actionLog, 1)
	end
	table.insert(self._actionLog, action)
end

--[[
	Marks the store as deleted, disconnecting any outstanding connections.
]]
function Store:destruct()
	for _, connection in ipairs(self._connections) do
		connection:Disconnect()
	end

	self._connections = nil
end

--[[
	Flush all pending actions since the last change event was dispatched.
]]
function Store:flush()
	if not self._mutatedSinceFlush then
		return
	end

	self._mutatedSinceFlush = false

	-- On self.changed:fire(), further actions may be immediately dispatched, in
	-- which case self._lastState will be set to the most recent self._state,
	-- unless we cache this value first
	local state = self._state

	local ok, errorResult = xpcall(function()
		-- If a changed listener yields, *very* surprising bugs can ensue.
		-- Because of that, changed listeners cannot yield.
		NoYield(function()
			self.changed:fire(state, self._lastState)
		end)
	end, tracebackReporter)

	if not ok then
		self._errorReporter.reportUpdateError(
			self._lastState,
			state,
			self._actionLog,
			{
				message = "Caught error flushing store updates",
				thrownValue = errorResult,
			}
		)
	end

	self._lastState = state
end

return Store
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da1a</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX332adc974814449f9b55177cdceabf06">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Signal.spec</string>
					<string name="ScriptGuid">{6086a5e3-3511-4ece-bcfd-17625f57c8ca}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Signal = require(script.Parent.Signal)

	it("should construct from nothing", function()
		local signal = Signal.new()

		expect(signal).to.be.ok()
	end)

	it("should fire connected callbacks", function()
		local callCount = 0
		local value1 = "Hello World"
		local value2 = 7

		local callback = function(arg1, arg2)
			expect(arg1).to.equal(value1)
			expect(arg2).to.equal(value2)
			callCount = callCount + 1
		end

		local signal = Signal.new()

		local connection = signal:connect(callback)
		signal:fire(value1, value2)

		expect(callCount).to.equal(1)

		connection:disconnect()
		signal:fire(value1, value2)

		expect(callCount).to.equal(1)
	end)

	it("should disconnect handlers", function()
		local callback = function()
			error("Callback was called after disconnect!")
		end

		local signal = Signal.new()

		local connection = signal:connect(callback)
		connection:disconnect()

		signal:fire()
	end)

	it("should fire handlers in order", function()
		local signal = Signal.new()
		local x = 0
		local y = 0

		local callback1 = function()
			expect(x).to.equal(0)
			expect(y).to.equal(0)
			x = x + 1
		end

		local callback2 = function()
			expect(x).to.equal(1)
			expect(y).to.equal(0)
			y = y + 1
		end

		signal:connect(callback1)
		signal:connect(callback2)
		signal:fire()

		expect(x).to.equal(1)
		expect(y).to.equal(1)
	end)

	it("should continue firing despite mid-event disconnection", function()
		local signal = Signal.new()
		local countA = 0
		local countB = 0

		local connectionA
		connectionA = signal:connect(function()
			connectionA:disconnect()
			countA = countA + 1
		end)

		signal:connect(function()
			countB = countB + 1
		end)

		signal:fire()

		expect(countA).to.equal(1)
		expect(countB).to.equal(1)
	end)

	it("should skip listeners that were disconnected during event evaluation", function()
		local signal = Signal.new()
		local countA = 0
		local countB = 0

		local connectionB

		signal:connect(function()
			countA = countA + 1
			connectionB:disconnect()
		end)

		connectionB = signal:connect(function()
			countB = countB + 1
		end)

		signal:fire()

		expect(countA).to.equal(1)
		expect(countB).to.equal(0)
	end)

	it("should throw an error if the argument to `connect` is not a function", function()
		local signal = Signal.new()
		expect(function()
			signal:connect("not a function")
		end).to.throw()
	end)

	it("should throw an error when disconnecting more than once", function()
		local signal = Signal.new()

		local connection = signal:connect(function() end)
		-- Okay to disconnect once
		expect(connection.disconnect).never.to.throw()

		-- Throw an error if we disconnect twice
		expect(connection.disconnect).to.throw()
	end)

	it("should throw an error when subscribing during dispatch", function()
		local mockStore = {
			_isDispatching = false
		}
		local signal = Signal.new(mockStore)

		signal:connect(function()
			-- Subscribe while listeners are being fired
			signal:connect(function() end)
		end)

		mockStore._isDispatching = true
		expect(function()
			signal:fire()
		end).to.throw()
	end)

	it("should throw an error when unsubscribing during dispatch", function()
		local mockStore = {
			_isDispatching = false
		}
		local signal = Signal.new(mockStore)

		local connection
		connection = signal:connect(function()
			connection.disconnect()
		end)

		mockStore._isDispatching = true
		expect(function()
			signal:fire()
		end).to.throw()
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da1b</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX06aa5a864d364a1f937162b68b72c242">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Signal</string>
					<string name="ScriptGuid">{ab066751-5f17-45bf-a70e-507cb0f6b0da}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A limited, simple implementation of a Signal.

	Handlers are fired in order, and (dis)connections are properly handled when
	executing an event.
]]
local function immutableAppend(list, ...)
	local new = {}
	local len = #list

	for key = 1, len do
		new[key] = list[key]
	end

	for i = 1, select("#", ...) do
		new[len + i] = select(i, ...)
	end

	return new
end

local function immutableRemoveValue(list, removeValue)
	local new = {}

	for i = 1, #list do
		if list[i] ~= removeValue then
			table.insert(new, list[i])
		end
	end

	return new
end

local Signal = {}

Signal.__index = Signal

function Signal.new(store)
	local self = {
		_listeners = {},
		_store = store
	}

	setmetatable(self, Signal)

	return self
end

function Signal:connect(callback)
	if typeof(callback) ~= "function" then
		error("Expected the listener to be a function.")
	end

	if self._store and self._store._isDispatching then
		error(
			'You may not call store.changed:connect() while the reducer is executing. ' ..
				'If you would like to be notified after the store has been updated, subscribe from a ' ..
				'component and invoke store:getState() in the callback to access the latest state. '
		)
	end

	local listener = {
		callback = callback,
		disconnected = false,
		connectTraceback = debug.traceback(),
		disconnectTraceback = nil
	}

	self._listeners = immutableAppend(self._listeners, listener)

	local function disconnect()
		if listener.disconnected then
			error((
				"Listener connected at: \n%s\n" ..
				"was already disconnected at: \n%s\n"
			):format(
				tostring(listener.connectTraceback),
				tostring(listener.disconnectTraceback)
			))
		end

		if self._store and self._store._isDispatching then
			error("You may not unsubscribe from a store listener while the reducer is executing.")
		end

		listener.disconnected = true
		listener.disconnectTraceback = debug.traceback()
		self._listeners = immutableRemoveValue(self._listeners, listener)
	end

	return {
		disconnect = disconnect
	}
end

function Signal:fire(...)
	for _, listener in ipairs(self._listeners) do
		if not listener.disconnected then
			listener.callback(...)
		end
	end
end

return Signal]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da1c</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX61b869453a244ddc990624d52c6ee3db">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">NoYield.spec</string>
					<string name="ScriptGuid">{c78f50e0-bed1-496a-a486-5ee150eb2bfb}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local NoYield = require(script.Parent.NoYield)

	it("should call functions normally", function()
		local callCount = 0

		local function test(a, b)
			expect(a).to.equal(5)
			expect(b).to.equal(6)

			callCount = callCount + 1

			return 11, "hello"
		end

		local a, b = NoYield(test, 5, 6)

		expect(a).to.equal(11)
		expect(b).to.equal("hello")
	end)

	it("should throw on yield", function()
		local preCount = 0
		local postCount = 0

		local function testMethod()
			preCount = preCount + 1
			wait()
			postCount = postCount + 1
		end

		local ok, err = pcall(NoYield, testMethod)

		expect(preCount).to.equal(1)
		expect(postCount).to.equal(0)

		expect(ok).to.equal(false)
		expect(err:find("Attempted to yield inside changed event!")).to.be.ok()
		expect(err:find("NoYield.spec")).to.be.ok()
	end)

	it("should propagate error messages", function()
		local count = 0

		local function test()
			count = count + 1
			error("foo")
		end

		local ok, err = pcall(NoYield, test)

		expect(ok).to.equal(false)
		expect(err:find("foo")).to.be.ok()
		expect(err:find("NoYield.spec")).to.be.ok()
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da1d</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX6e3edf4abdd6443f87bdcd34cd6ff12d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">NoYield</string>
					<string name="ScriptGuid">{c94d3652-4847-49c9-8c23-23c5d440ad32}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck

--[[
	Calls a function and throws an error if it attempts to yield.

	Pass any number of arguments to the function after the callback.

	This function supports multiple return; all results returned from the
	given function will be returned.
]]

local function resultHandler(co, ok, ...)
	if not ok then
		local message = (...)
		error(debug.traceback(co, message), 2)
	end

	if coroutine.status(co) ~= "dead" then
		error(debug.traceback(co, "Attempted to yield inside changed event!"), 2)
	end

	return ...
end

local function NoYield(callback, ...)
	local co = coroutine.create(callback)

	return resultHandler(co, coroutine.resume(co, ...))
end

return NoYield
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da1e</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX7e457ea8304a421b873f6357bf71ad6d">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RoactRodux</string>
				<string name="ScriptGuid">{ff0ac3f4-70a1-4188-a80e-54e123ec629a}</string>
				<ProtectedString name="Source"><![CDATA[local StoreProvider = require(script.StoreProvider)
local connect = require(script.connect)
local getStore = require(script.getStore)
local TempConfig = require(script.TempConfig)

return {
	StoreProvider = StoreProvider,
	connect = connect,
	UNSTABLE_getStore = getStore,
	UNSTABLE_connect2 = connect,

	TEMP_CONFIG = TempConfig,
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da36</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBXdbedfa6d5f7c42ca94335309627856be">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">join</string>
					<string name="ScriptGuid">{643fcb50-0d18-46f2-8f42-e0b1fcfdf24a}</string>
					<ProtectedString name="Source"><![CDATA[local function join(...)
	local result = {}

	for i = 1, select("#", ...) do
		local source = select(i, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				result[key] = value
			end
		end
	end

	return result
end

return join]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da37</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX2727cc8a60d34b209d9fec91736911b7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">shallowEqual.spec</string>
					<string name="ScriptGuid">{ad247a68-e736-4463-928a-1c9a5047d8ab}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local shallowEqual = require(script.Parent.shallowEqual)

	it("should compare dictionaries", function()
		local a = {
			a = "a",
			b = {},
			c = 6,
		}

		local b = {
			b = a.b,
			c = a.c,
			a = a.a,
		}

		local c = {
			b = {},
			a = a.a,
			c = a.c,
		}

		local d = {
			a = a.a,
			b = a.b,
			c = a.c,
			d = "hello",
		}

		expect(shallowEqual(a, a)).to.equal(true)
		expect(shallowEqual(a, b)).to.equal(true)
		expect(shallowEqual(a, c)).to.equal(false)
		expect(shallowEqual(b, c)).to.equal(false)
		expect(shallowEqual(a, d)).to.equal(false)
		expect(shallowEqual(b, d)).to.equal(false)
	end)

	it("should handle nil for either argument", function()
		local a = {}

		expect(shallowEqual(nil, nil)).to.equal(true)
		expect(shallowEqual(a, nil)).to.equal(false)
		expect(shallowEqual(nil, a)).to.equal(false)
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da38</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX27dcb07b103a4002950b7445ef5792f1">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">storeKey</string>
					<string name="ScriptGuid">{58f67e10-5941-4fb9-a79c-52ea0d81cd72}</string>
					<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

return Symbol.named("RoduxStore")]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da39</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXecb20e00d75c409c8372803fa67edfdc">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">connect.spec</string>
					<string name="ScriptGuid">{bec2fff2-3f28-4a01-8251-870786e0b5a7}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local connect = require(script.Parent.connect)

	local StoreProvider = require(script.Parent.StoreProvider)

	local Roact = require(script.Parent.Parent.Roact)
	local Rodux = require(script.Parent.Parent.Rodux)

	local TempConfig = require(script.Parent.TempConfig)

	local function noop()
		return nil
	end

	local function NoopComponent()
		return nil
	end

	local function countReducer(state, action)
		state = state or 0

		if action.type == "increment" then
			return state + 1
		end

		return state
	end

	local reducer = Rodux.combineReducers({
		count = countReducer,
	})

	describe("Argument validation", function()
		it("should accept no arguments", function()
			connect()
		end)

		it("should accept one function", function()
			connect(noop)
		end)

		it("should accept two functions", function()
			connect(noop, noop)
		end)

		it("should accept only the second function", function()
			connect(nil, function() end)
		end)

		it("should throw if not passed a component", function()
			local selector = function(store)
				return {}
			end

			expect(function()
				connect(selector)(nil)
			end).to.throw()
		end)
	end)

	it("should throw if not mounted under a StoreProvider", function()
		local ConnectedSomeComponent = connect()(NoopComponent)

		expect(function()
			Roact.mount(Roact.createElement(ConnectedSomeComponent))
		end).to.throw()
	end)

	it("should accept a higher-order function mapStateToProps", function()
		local function mapStateToProps()
			return function(state)
				return {
					count = state.count,
				}
			end
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(NoopComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		local handle = Roact.mount(tree)

		Roact.unmount(handle)
	end)

	it("should not accept a higher-order mapStateToProps that returns a non-table value", function()
		local function mapStateToProps()
			return function(state)
				return "nope"
			end
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(NoopComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		expect(function()
			Roact.mount(tree)
		end).to.throw()
	end)

	it("should not accept a mapStateToProps that returns a non-table value", function()
		local function mapStateToProps()
			return "nah"
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(NoopComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		expect(function()
			Roact.mount(tree)
		end).to.throw()
	end)

	it("should abort renders when mapStateToProps returns the same data", function()
		local function mapStateToProps(state)
			return {
				count = state.count,
			}
		end

		local renderCount = 0
		local function SomeComponent(props)
			renderCount = renderCount + 1
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(SomeComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		local handle = Roact.mount(tree)

		expect(renderCount).to.equal(1)

		store:dispatch({ type = "an unknown action" })
		store:flush()

		expect(renderCount).to.equal(1)

		store:dispatch({ type = "increment" })
		store:flush()

		expect(renderCount).to.equal(2)

		Roact.unmount(handle)
	end)

	it("should only call mapDispatchToProps once and never re-render if no mapStateToProps was passed", function()
		local dispatchCount = 0
		local mapDispatchToProps = function(dispatch)
			dispatchCount = dispatchCount + 1

			return {
				increment = function()
					return dispatch({ type = "increment" })
				end,
			}
		end

		local renderCount = 0
		local function SomeComponent(props)
			renderCount = renderCount + 1
		end

		local ConnectedSomeComponent = connect(nil, mapDispatchToProps)(SomeComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		local handle = Roact.mount(tree)

		expect(dispatchCount).to.equal(1)
		expect(renderCount).to.equal(1)

		store:dispatch({ type = "an unknown action" })
		store:flush()

		expect(dispatchCount).to.equal(1)
		expect(renderCount).to.equal(1)

		store:dispatch({ type = "increment" })
		store:flush()

		expect(dispatchCount).to.equal(1)
		expect(renderCount).to.equal(1)

		Roact.unmount(handle)
	end)

	it("should return result values from the dispatch passed to mapDispatchToProps", function()
		local function reducer()
			return 0
		end

		local function fiveThunk()
			return 5
		end

		local dispatch
		local function SomeComponent(props)
			dispatch = props.dispatch
		end

		local function mapDispatchToProps(dispatch)
			return {
				dispatch = dispatch
			}
		end

		local ConnectedSomeComponent = connect(nil, mapDispatchToProps)(SomeComponent)

		-- We'll use the thunk middleware, as it should always return its result
		local store = Rodux.Store.new(reducer, nil, { Rodux.thunkMiddleware })
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent)
		})

		local handle = Roact.mount(tree)

		expect(dispatch).to.be.a("function")
		expect(dispatch(fiveThunk)).to.equal(5)

		Roact.unmount(handle)
	end)

	it("should render parent elements before children", function()
		local oldNewConnectionOrder = TempConfig.newConnectionOrder
		TempConfig.newConnectionOrder = true

		local function mapStateToProps(state)
			return {
				count = state.count,
			}
		end

		local childWasRenderedFirst = false

		local function ChildComponent(props)
			if props.count > props.parentCount then
				childWasRenderedFirst = true
			end
		end

		local ConnectedChildComponent = connect(mapStateToProps)(ChildComponent)

		local function ParentComponent(props)
			return Roact.createElement(ConnectedChildComponent, {
				parentCount = props.count,
			})
		end

		local ConnectedParentComponent = connect(mapStateToProps)(ParentComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			parent = Roact.createElement(ConnectedParentComponent),
		})

		local handle = Roact.mount(tree)

		store:dispatch({ type = "increment" })
		store:flush()

		store:dispatch({ type = "increment" })
		store:flush()

		Roact.unmount(handle)

		expect(childWasRenderedFirst).to.equal(false)

		TempConfig.newConnectionOrder = oldNewConnectionOrder
	end)

	it("should render child elements before children when TempConfig.newConnectionOrder is false", function()
		local oldNewConnectionOrder = TempConfig.newConnectionOrder
		TempConfig.newConnectionOrder = false

		local function mapStateToProps(state)
			return {
				count = state.count,
			}
		end

		local childWasRenderedFirst = false

		local function ChildComponent(props)
			if props.count > props.parentCount then
				childWasRenderedFirst = true
			end
		end

		local ConnectedChildComponent = connect(mapStateToProps)(ChildComponent)

		local function ParentComponent(props)
			return Roact.createElement(ConnectedChildComponent, {
				parentCount = props.count,
			})
		end

		local ConnectedParentComponent = connect(mapStateToProps)(ParentComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			parent = Roact.createElement(ConnectedParentComponent),
		})

		local handle = Roact.mount(tree)

		store:dispatch({ type = "increment" })
		store:flush()

		store:dispatch({ type = "increment" })
		store:flush()

		Roact.unmount(handle)

		expect(childWasRenderedFirst).to.equal(true)

		TempConfig.newConnectionOrder = oldNewConnectionOrder
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da3a</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXcfce4f32ba8d427cab1233340b55c737">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">getStore.spec</string>
					<string name="ScriptGuid">{5b83d76d-24d1-409a-b99e-c3a4ae9c8ffe}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Roact = require(script.Parent.Parent.Roact)
	local Rodux = require(script.Parent.Parent.Rodux)

	local StoreProvider = require(script.Parent.StoreProvider)

	local getStore = require(script.Parent.getStore)

	it("should return the store when present", function()
		local function reducer()
			return 0
		end

		local store = Rodux.Store.new(reducer)
		local consumedStore = nil

		local StoreConsumer = Roact.Component:extend("StoreConsumer")

		function StoreConsumer:init()
			consumedStore = getStore(self)
		end

		function StoreConsumer:render()
			return nil
		end

		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			Consumer = Roact.createElement(StoreConsumer),
		})

		local handle = Roact.mount(tree)

		expect(consumedStore).to.equal(store)

		Roact.unmount(handle)
		store:destruct()
	end)

	it("should return nil when the store is not present", function()
		-- Use a non-nil value to know for sure if StoreConsumer:init was called
		local consumedStore = 6

		local StoreConsumer = Roact.Component:extend("StoreConsumer")

		function StoreConsumer:init()
			consumedStore = getStore(self)
		end

		function StoreConsumer:render()
			return nil
		end

		local tree = Roact.createElement(StoreConsumer)
		local handle = Roact.mount(tree)

		expect(consumedStore).to.equal(nil)

		Roact.unmount(handle)
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da3b</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX02ff05b8484640df93dde7a6b299be60">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">connect</string>
					<string name="ScriptGuid">{c39d3548-b882-40dc-af66-d335ed3a4bb8}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Roact)
local getStore = require(script.Parent.getStore)
local shallowEqual = require(script.Parent.shallowEqual)
local join = require(script.Parent.join)

local TempConfig = require(script.Parent.TempConfig)

--[[
	Formats a multi-line message with printf-style placeholders.
]]
local function formatMessage(lines, parameters)
	return table.concat(lines, "\n"):format(unpack(parameters or {}))
end

local function noop()
	return nil
end

--[[
	The stateUpdater accepts props when they update and computes the
	complete set of props that should be passed to the wrapped component.

	Each connected component will have a stateUpdater created for it.

	stateUpdater is put into the component's state in order for
	getDerivedStateFromProps to be able to access it. It is not mutated.
]]
local function makeStateUpdater(store)
	return function(nextProps, prevState, mappedStoreState)
		-- The caller can optionally provide mappedStoreState if it needed that
		-- value beforehand. Doing so is purely an optimization.
		if mappedStoreState == nil then
			mappedStoreState = prevState.mapStateToProps(store:getState(), nextProps)
		end

		local propsForChild = join(nextProps, mappedStoreState, prevState.mappedStoreDispatch)

		return {
			mappedStoreState = mappedStoreState,
			propsForChild = propsForChild,
		}
	end
end

--[[
	mapStateToProps:
		(storeState, props) -> partialProps
		OR
		() -> (storeState, props) -> partialProps
	mapDispatchToProps: (dispatch) -> partialProps
]]
local function connect(mapStateToPropsOrThunk, mapDispatchToProps)
	local connectTrace = debug.traceback()

	if mapStateToPropsOrThunk ~= nil then
		assert(typeof(mapStateToPropsOrThunk) == "function", "mapStateToProps must be a function or nil!")
	else
		mapStateToPropsOrThunk = noop
	end

	if mapDispatchToProps ~= nil then
		assert(typeof(mapDispatchToProps) == "function", "mapDispatchToProps must be a function or nil!")
	else
		mapDispatchToProps = noop
	end

	return function(innerComponent)
		if innerComponent == nil then
			local message = formatMessage({
				"connect returns a function that must be passed a component.",
				"Check the connection at:",
				"%s",
			}, {
				connectTrace,
			})

			error(message, 2)
		end

		local componentName = ("RoduxConnection(%s)"):format(tostring(innerComponent))

		local Connection = Roact.Component:extend(componentName)

		function Connection.getDerivedStateFromProps(nextProps, prevState)
			if prevState.stateUpdater ~= nil then
				return prevState.stateUpdater(nextProps, prevState)
			end
		end

		function Connection:createStoreConnection()
			self.storeChangedConnection = self.store.changed:connect(function(storeState)
				self:setState(function(prevState, props)
					local mappedStoreState = prevState.mapStateToProps(storeState, props)

					-- We run this check here so that we only check shallow
					-- equality with the result of mapStateToProps, and not the
					-- other props that could be passed through the connector.
					if shallowEqual(mappedStoreState, prevState.mappedStoreState) then
						return nil
					end

					return prevState.stateUpdater(props, prevState, mappedStoreState)
				end)
			end)
		end

		function Connection:init()
			self.store = getStore(self)

			if self.store == nil then
				local message = formatMessage({
					"Cannot initialize Roact-Rodux connection without being a descendent of StoreProvider!",
					"Tried to wrap component %q",
					"Make sure there is a StoreProvider above this component in the tree.",
				}, {
					tostring(innerComponent),
				})

				error(message)
			end

			local storeState = self.store:getState()

			local mapStateToProps = mapStateToPropsOrThunk
			local mappedStoreState = mapStateToProps(storeState, self.props)

			-- mapStateToPropsOrThunk can return a function instead of a state
			-- value. In this variant, we keep that value as mapStateToProps
			-- instead of the original mapStateToProps. This matches react-redux
			-- and enables connectors to keep instance-level state.
			if typeof(mappedStoreState) == "function" then
				mapStateToProps = mappedStoreState
				mappedStoreState = mapStateToProps(storeState, self.props)
			end

			if mappedStoreState ~= nil and typeof(mappedStoreState) ~= "table" then
				local message = formatMessage({
					"mapStateToProps must either return a table, or return another function that returns a table.",
					"Instead, it returned %q, which is of type %s.",
				}, {
					tostring(mappedStoreState),
					typeof(mappedStoreState),
				})

				error(message)
			end

			local mappedStoreDispatch = mapDispatchToProps(function(...)
				return self.store:dispatch(...)
			end)

			local stateUpdater = makeStateUpdater(self.store)

			self.state = {
				-- Combines props, mappedStoreDispatch, and the result of
				-- mapStateToProps into propsForChild. Stored in state so that
				-- getDerivedStateFromProps can access it.
				stateUpdater = stateUpdater,

				-- Used by the store changed connection and stateUpdater to
				-- construct propsForChild.
				mapStateToProps = mapStateToProps,

				-- Used by stateUpdater to construct propsForChild.
				mappedStoreDispatch = mappedStoreDispatch,

				-- Passed directly into the component that Connection is
				-- wrapping.
				propsForChild = nil,
			}

			local extraState = stateUpdater(self.props, self.state, mappedStoreState)

			for key, value in pairs(extraState) do
				self.state[key] = value
			end

			if TempConfig.newConnectionOrder then
				self:createStoreConnection()
			end
		end

		function Connection:didMount()
			if not TempConfig.newConnectionOrder then
				self:createStoreConnection()
			end
		end

		function Connection:willUnmount()
			self.storeChangedConnection:disconnect()
		end

		function Connection:render()
			return Roact.createElement(innerComponent, self.state.propsForChild)
		end

		return Connection
	end
end

return connect]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da3c</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXb234794ca5ef4dd696e08f27999d6d64">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">TempConfig</string>
					<string name="ScriptGuid">{b9390214-7239-4fde-b44e-0aff87d0c92b}</string>
					<ProtectedString name="Source"><![CDATA[return {
	newConnectionOrder = true,
}
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da3d</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX373b88910af544958ef41822a242da75">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Symbol</string>
					<string name="ScriptGuid">{4efd714b-3c7f-48d1-893d-c33a658edff8}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	A 'Symbol' is an opaque marker type that can be used to signify unique
	statuses. Symbols have the type 'userdata', but when printed to the console,
	the name of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

--[[
	Create an unnamed Symbol. Usually, you should create a named Symbol using
	Symbol.named(name)
]]
function Symbol.unnamed()
	local self = newproxy(true)

	getmetatable(self).__tostring = function()
		return "Unnamed Symbol"
	end

	return self
end

return Symbol]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da3e</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXcf967365a010472bbce9cd25d697a7bd">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">getStore</string>
					<string name="ScriptGuid">{b6202d22-40ff-4294-bc29-261c818c344a}</string>
					<ProtectedString name="Source"><![CDATA[local storeKey = require(script.Parent.storeKey)

local function getStore(componentInstance)
	return componentInstance._context[storeKey]
end

return getStore]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da3f</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf5757420c2cf4429a7783ec1d4161a06">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Symbol.spec</string>
					<string name="ScriptGuid">{41696d31-2976-43ad-9ee9-a3d2f4085527}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			expect(tostring(symbol):find("foo")).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)

	describe("unnamed", function()
		it("should give an opaque object", function()
			local symbol = Symbol.unnamed()

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to some string", function()
			local symbol = Symbol.unnamed()

			expect(tostring(symbol)).to.be.a("string")
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.unnamed()
			local symbolB = Symbol.unnamed()

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da40</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXb54b6ccd0c30477f9d0040e4bff97b6e">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">StoreProvider.spec</string>
					<string name="ScriptGuid">{4ca77ad4-423b-49d8-b85c-682f74cfd22e}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	local StoreProvider = require(script.Parent.StoreProvider)

	local Roact = require(script.Parent.Parent.Roact)
	local Rodux = require(script.Parent.Parent.Rodux)

	it("should be instantiable as a component", function()
		local store = Rodux.Store.new(function()
			return 0
		end)
		local element = Roact.createElement(StoreProvider, {
			store = store
		})

		expect(element).to.be.ok()

		local handle = Roact.mount(element, nil, "StoreProvider-test")

		Roact.unmount(handle)
		store:destruct()
	end)

	it("should expect a 'store' prop", function()
		local element = Roact.createElement(StoreProvider)

		expect(function()
			Roact.mount(element)
		end).to.throw()
	end)
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da41</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXde75f84ab0524f17949074c595bc8912">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">shallowEqual</string>
					<string name="ScriptGuid">{f1ec9f37-2dd6-4a6c-81ee-94de850b2b66}</string>
					<ProtectedString name="Source"><![CDATA[local function shallowEqual(a, b)
	if a == nil then
		return b == nil
	elseif b == nil then
		return a == nil
	end

	for key, value in pairs(a) do
		if value ~= b[key] then
			return false
		end
	end

	for key, value in pairs(b) do
		if value ~= a[key] then
			return false
		end
	end

	return true
end

return shallowEqual]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da42</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX740a75fa277646a7833e881ffdc624ef">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">StoreProvider</string>
					<string name="ScriptGuid">{c5ad49b1-070d-4952-9636-6d92ac8040dc}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Roact)

local storeKey = require(script.Parent.storeKey)

local StoreProvider = Roact.Component:extend("StoreProvider")

function StoreProvider:init(props)
	local store = props.store

	if store == nil then
		error("Error initializing StoreProvider. Expected a `store` prop to be a Rodux store.")
	end

	self._context[storeKey] = store
end

function StoreProvider:render()
	return Roact.oneChild(self.props[Roact.Children])
end

return StoreProvider]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da43</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXc5de874346d746f1831e62065700e527">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Components</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">1ca092d7210e4c43029c329d0034da52</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBXbcf046c15bea462e82b3867fee0ee99d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">InventoryUIButton</string>
					<string name="ScriptGuid">{48b0804f-e9c0-4ecf-b943-c38158d454e7}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local Roact = require(ReplicatedStorage.Roact) 
local RoactRodux = require(ReplicatedStorage.RoactRodux)

local openInventory = require(ReplicatedStorage.Actions.openInventory)

local Inventory = Roact.Component:extend("Inventory")

function Inventory:init()
    self.inventoryChangedEvent = nil

    -- In init, we can use setState to set up our initial component state.
    self:setState({
        wood = 0
    })
end

-- This render function is almost completely unchanged from the first example.
function Inventory:render()
    -- As a convention, we'll pull currentTime out of state right away.
    local currentWood = self.state.wood

    return Roact.createElement("Frame", 
        {
            Position = UDim2.new(0, 20, 0.5, 0),
        },
        {
            WoodLabel = Roact.createElement("TextButton", {
                Size = UDim2.new(0, 100, 0, 100),
                Position = UDim2.new(0, 20, 0.5, 0),
                Text = "Wood Collected: " .. currentWood,
                [Roact.Event.MouseButton1Click] = function()
                    print("Open Inventory Button Clicked")
                    self.props.onOpenInventory()
                end
            })
        }
    )
end

-- Set up our loop in didMount, so that it starts running when our
-- component is created.
function Inventory:didMount()
    -- Set a value that we can change later to stop our loop
    self.running = true

    -- Connect to a pickup event here: 
    self.inventoryChangedEvent = ReplicatedStorage.InventoryChanged.OnClientEvent:Connect(function()
        print("Inventory changed event fired")
        self:setState({
            wood = Players.LocalPlayer.leaderstats.Wood.Value
        })
    end)

end

-- Stop the loop in willUnmount, so that our loop terminates when the
-- component is destroyed.
function Inventory:willUnmount()
    self.running = false

    -- prevent memory leaks
    -- self.inventoryChangedEvent.OnClientEvent:Disconnect()
end

local function mapStateToProps(state)
    return {
        wood = 1
    }
end

local function mapDispatchToProps(dispatch)
    return {
        onOpenInventory = function()
            dispatch(openInventory())
        end
    }
end

return RoactRodux.connect(mapStateToProps, mapDispatchToProps)(Inventory)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b822</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXe10aee3076e94e818833bafdb93f502b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">App</string>
					<string name="ScriptGuid">{656bcfbd-9cb7-4c44-8d4e-9a2a223fba5a}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Roact = require(ReplicatedStorage.Roact)
local RoactRodux = require(ReplicatedStorage.RoactRodux)

local InventoryUIButton = require(ReplicatedStorage.Components.InventoryUIButton)
local Inventory = require(ReplicatedStorage.Components.Inventory)

local openInventory = require(ReplicatedStorage.Actions.openInventory)
local increment = require(ReplicatedStorage.Actions.increment)

local App = Roact.Component:extend("App")

function App:init()
end

function App:render()
    if (self.props.openWindow == "inventory") then
        print("Rendering Inventory UI")
        return Roact.createElement("ScreenGui", {}, {
            Roact.createElement(Inventory)
        })
    end

    return Roact.createElement("ScreenGui", {}, {
        Roact.createElement(InventoryUIButton)
    })
end

local function mapStateToProps(state)
    return {
        openWindow = state.ui.openWindow
    }
end

local function mapDispatchToProps(dispatch)
    return {
        onIncrement = function()
            dispatch(increment(1))
        end,
        onOpenInventory = function()
            dispatch(openInventory())
        end
    }
end

return RoactRodux.connect(mapStateToProps, mapDispatchToProps)(App)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b826</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX08e662c7f80b4f0b9b29d032a37e62ed">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Inventory</string>
					<string name="ScriptGuid">{7ced2c94-71d3-487d-81d2-15971d8e579c}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Roact = require(ReplicatedStorage.Roact)
local RoactRodux = require(ReplicatedStorage.RoactRodux)


local Inventory = Roact.Component:extend("Inventory")

function Inventory:init()
end

function Inventory:render()
    return Roact.createElement("Frame", {
        Size = UDim2.new(1,0,1,0)
    }, {
        TextLabel = Roact.createElement("TextLabel", {
            Size = UDim2.new(1, 0, 1, 0),
            Text = "Hello, Inventory!"
        })
    })
end

local function mapStateToProps(state)
    return {
    }
end

local function mapDispatchToProps(dispatch)
    return {
    }
end

return RoactRodux.connect(mapStateToProps, mapDispatchToProps)(Inventory)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b828</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXcf46601fa5de4c01bd7d8b76f21b6a4d">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Reducers</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b816</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBX6f71510eb9fe41e8b8783360ada89b97">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">reducer</string>
					<string name="ScriptGuid">{27280d62-45d3-4e48-8657-014acab454ff}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Rodux = require(ReplicatedStorage.Rodux)

local ui = require(ReplicatedStorage.Reducers.ui)

local reducer = Rodux.combineReducers({
    ui = ui
})

return reducer]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b817</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf86653c6b66a4adcb8142ca6d2ed2fdd">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ui</string>
					<string name="ScriptGuid">{68799f46-46a5-48d6-a5ed-1c6eccee6756}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Rodux = require(ReplicatedStorage.Rodux)

local increment = require(ReplicatedStorage.Actions.increment)
local openInventory = require(ReplicatedStorage.Actions.openInventory)

local initialState = {
    openWindow = nil,
    val = 0
}

local reducer = Rodux.createReducer(initialState, {
    [increment.name] = function(state, action)
        return {
            val = state.val + action.amount
        }
    end,

    [openInventory.name] = function(state, action)
        return {
            openWindow = "inventory"
        }
    end
})

return reducer]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b818</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXea12d46429e24564adf5cc6686aa9a22">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Actions</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b81b</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBX794488b8c50f444e8159c17845ca047b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">increment</string>
					<string name="ScriptGuid">{45e31b17-e3a8-4fed-aaa2-0e14abf1b524}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Rodux = require(ReplicatedStorage.Rodux)

local function increment(amount)
    return {
        amount = amount
    }
end

-- using makeActionCreator just handles having it set the type for us
return Rodux.makeActionCreator(script.Name, increment)
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b81c</UniqueId>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXb489bfc16c6a40d9a18b1da6924f4198">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">openInventory</string>
					<string name="ScriptGuid">{ab1c2a41-fe7f-47ec-93e1-40f5bf6ac2ae}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Rodux = require(ReplicatedStorage.Rodux)

local function openInventory()
    return {
    }
end

-- using makeActionCreator just handles having it set the type for us
return Rodux.makeActionCreator(script.Name, openInventory)
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b81d</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXb1f2da60d3354775ba6ad8050c9b0816">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">clientStore</string>
				<string name="ScriptGuid">{a5923c9a-54aa-4a0f-831c-a54fe4f79d61}</string>
				<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Rodux = require(ReplicatedStorage.Rodux)
local reducer = require(ReplicatedStorage.Reducers.reducer)

-- TODO add Rodux.thunkMiddleware here
-- TODO add server store 
local store = Rodux.Store.new(reducer)

return store]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">0de291c33bf3adf502b00b450002b824</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="LuaWebService" referent="RBX8a603ce304304667bfc63c9d3ffeedc9">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506fc</UniqueId>
		</Properties>
	</Item>
	<Item class="ProcessInstancePhysicsService" referent="RBXfcae7a738afa4e91a5c491c0c02c72b7">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ProcessInstancePhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000506ff</UniqueId>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBX0ef438d72b3744ca97a474c9ed7ab720">
		<Properties>
			<Color3 name="Ambient">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="Brightness">2</float>
			<Color3 name="ColorShift_Bottom">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<Color3 name="ColorShift_Top">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<float name="EnvironmentDiffuseScale">0</float>
			<float name="EnvironmentSpecularScale">0</float>
			<float name="ExposureCompensation">0</float>
			<Color3 name="FogColor">
				<R>0.75</R>
				<G>0.75</G>
				<B>0.75</B>
			</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">41.7332993</float>
			<bool name="GlobalShadows">true</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">
				<R>0.5</R>
				<G>0.5</G>
				<B>0.5</B>
			</Color3>
			<bool name="Outlines">false</bool>
			<float name="ShadowSoftness">0.5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="Technology">1</token>
			<string name="TimeOfDay">14:00:00</string>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e1cc</UniqueId>
		</Properties>
	</Item>
	<Item class="LodDataService" referent="RBXefdd69098688421897b7365e2588e70a">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c80001e1cf</UniqueId>
		</Properties>
	</Item>
	<Item class="ProximityPromptService" referent="RBXa16c3f079cd94dc4a90fd4bb6aaa9ead">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="Enabled">true</bool>
			<int name="MaxPromptsVisible">16</int>
			<string name="Name">ProximityPromptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c8000290ee</UniqueId>
		</Properties>
	</Item>
	<Item class="LanguageService" referent="RBX839923c80c0d4f6186ecb12f3656f0d8">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LanguageService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c800050760</UniqueId>
		</Properties>
	</Item>
	<Item class="MaterialService" referent="RBXe9049dbda4c94e01a004bbb2b3b24b9a">
		<Properties>
			<string name="AsphaltName"></string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="BasaltName"></string>
			<string name="BrickName"></string>
			<string name="CobblestoneName"></string>
			<string name="ConcreteName"></string>
			<string name="CorrodedMetalName"></string>
			<string name="CrackedLavaName"></string>
			<string name="DiamondPlateName"></string>
			<string name="FabricName"></string>
			<string name="FoilName"></string>
			<string name="GlacierName"></string>
			<string name="GraniteName"></string>
			<string name="GrassName"></string>
			<string name="GroundName"></string>
			<string name="IceName"></string>
			<string name="LeafyGrassName"></string>
			<string name="LimestoneName"></string>
			<string name="MarbleName"></string>
			<string name="MetalName"></string>
			<string name="MudName"></string>
			<string name="Name">MaterialService</string>
			<string name="PavementName"></string>
			<string name="PebbleName"></string>
			<string name="PlasticName"></string>
			<string name="RockName"></string>
			<string name="SaltName"></string>
			<string name="SandName"></string>
			<string name="SandstoneName"></string>
			<string name="SlateName"></string>
			<string name="SmoothPlasticName"></string>
			<string name="SnowName"></string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7fb9ff442d46ed210291adff000014a9</UniqueId>
			<bool name="Use2022MaterialsXml">false</bool>
			<string name="WoodName"></string>
			<string name="WoodPlanksName"></string>
		</Properties>
	</Item>
	<Item class="Teams" referent="RBX07d8b86d8e91485c9c4207a8f2166c7a">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teams</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c800028e08</UniqueId>
		</Properties>
	</Item>
	<Item class="TestService" referent="RBX614670a0f3074f4ba68f23f901f24d0b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoRuns">true</bool>
			<string name="Description"></string>
			<bool name="ExecuteWithStudioRun">false</bool>
			<bool name="Is30FpsThrottleEnabled">true</bool>
			<bool name="IsPhysicsEnvironmentalThrottled">true</bool>
			<bool name="IsSleepAllowed">true</bool>
			<string name="Name">TestService</string>
			<int name="NumberOfPlayers">0</int>
			<double name="SimulateSecondsLag">0</double>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<double name="Timeout">10</double>
			<UniqueId name="UniqueId">7fb9ff442d46ed210291adff000014ab</UniqueId>
		</Properties>
	</Item>
	<Item class="HttpService" referent="RBX5e8e092adfec432d8ef53f88659963fb">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="HttpEnabled">false</bool>
			<string name="Name">HttpService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">60ac0bb170c84e0c0291a1c800028dea</UniqueId>
		</Properties>
	</Item>
	<SharedStrings>
		<SharedString md5="LOo9aNwQ/Yf4oXY5DArdaw==">Q1NHUEhTBgAAAP5VfEcAAAAAAAAAAAAAAAAZeepLAAAAAAAAAACFfrtLAAAAABo6A0wQAAAA
AAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/GwAAAAQAAABgrgpADKlKQbKE
ckFgrgpAV96MQU9oVUGIBKJAV96MQX7yRUFgrgpA479KQd9nc0HwSaBAMJ2KQWFhTkEPVIpA
V96MQWUKT0HGqqJAV96MQYnnR0FgrgpAV96MQThUVkFwEJ9AmBGKQVH9TUEqAAAAAAAAAAEA
AAACAAAAAQAAAAAAAAADAAAABAAAAAMAAAAAAAAABQAAAAMAAAAEAAAABQAAAAIAAAABAAAA
BgAAAAQAAAACAAAABgAAAAIAAAAFAAAABgAAAAUAAAAEAAAABwAAAAEAAAADAAAABwAAAAMA
AAAFAAAABwAAAAUAAAABAAAACAAAAAAAAAACAAAACAAAAAIAAAAEAAAACAAAAAQAAAAAAAAA
EAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPx4AAAAEAAAAjYw8wWOb
mUHgjfg+HyFiwQMua0Hgjfg+Ip9iwWRLa0Hgjfg+KIAnwWObmUHmNXJAF/w7wWObmUHFm2E/
VPFawRJ+fEHgjfg+OBs/wdikkUFA3TJAo+oowWObmUHGhnBAoXQuwWObmUFwfCRAOSI9wWOb
mUHgjfg+MAAAAAAAAAABAAAAAgAAAAMAAAACAAAAAQAAAAQAAAADAAAAAAAAAAUAAAACAAAA
BgAAAAUAAAAGAAAABAAAAAUAAAAAAAAAAgAAAAcAAAADAAAABAAAAAcAAAAEAAAABgAAAAcA
AAACAAAAAwAAAAcAAAAGAAAAAgAAAAgAAAAAAAAAAwAAAAgAAAADAAAAAQAAAAgAAAABAAAA
AAAAAAkAAAAEAAAAAAAAAAkAAAAAAAAABQAAAAkAAAAFAAAABAAAABAAAAAAAAAAAAAAAAAA
AAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD8hAAAABAAAADWH/ECEL6pBEAQIwYiKsED0DMJB
0I6RwIiKsEBHlrNBEAQIwYiKsEDf4cJBdwquwIiKsEDCmsJB0I6RwMlvDEHhAbhB0I6RwKiW
DUHg7bdBQCihwPDeDUGQU7dBAAWiwManDEG0aLdB0I6RwIiKsEBY/LNBEAQIwbi3+0Bnr6pB
EAQIwTYAAAAAAAAAAQAAAAIAAAADAAAAAgAAAAEAAAAEAAAABQAAAAYAAAAEAAAABgAAAAMA
AAAEAAAAAQAAAAUAAAAEAAAAAwAAAAEAAAAHAAAAAAAAAAYAAAAHAAAABgAAAAUAAAAIAAAA
AAAAAAcAAAAIAAAABwAAAAUAAAAIAAAABQAAAAEAAAAIAAAAAQAAAAAAAAAJAAAAAgAAAAMA
AAAJAAAAAwAAAAYAAAAJAAAAAAAAAAIAAAAKAAAABgAAAAAAAAAKAAAAAAAAAAkAAAAKAAAA
CQAAAAYAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/GwAAAAQA
AABgrgpAbDG6QSIw78BgrgpA7yqBQZP0dsFgrgpAA42oQSDXNMFgrgpAaEaUQUs/WMHALow/
itGmQdEGNMEQuHA+rpC3QSIw78Dbg3w+RhW3QSIw78BfrgpA9LG5QSIw78BgrgpAYC+BQVNJ
dsEqAAAAAAAAAAEAAAACAAAAAwAAAAIAAAABAAAAAwAAAAEAAAAEAAAAAwAAAAQAAAACAAAA
BQAAAAIAAAAEAAAABQAAAAEAAAAGAAAABQAAAAQAAAABAAAABQAAAAYAAAAAAAAABQAAAAAA
AAACAAAABwAAAAAAAAAGAAAABwAAAAEAAAAAAAAACAAAAAYAAAABAAAACAAAAAEAAAAHAAAA
CAAAAAcAAAAGAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPy0A
AAAEAAAAoZMXQFA2dEFYb4HBEfudQJA0b0E4w4DBWSXXQBhVmEFUCkHBIJBiQPBveEGwPoPB
7Z18QBhVmEHyiVfBYK4KQBhVmEHVelDBYK4KQGAvgUFUSXbBYK4KQGhGlEFOP1jBwG5hQKCk
eUGAB4PBYK4KQBhVmEF6KVHBgHIWQABrdUHgN4HBYK4KQO8qgUGU9HbBzPfIQBhVmEFdJEXB
YGqdQEBpcEHAi4DBCofVQBhVmEF8y0HBTgAAAAAAAAABAAAAAgAAAAAAAAADAAAAAQAAAAQA
AAAFAAAAAgAAAAYAAAACAAAABQAAAAYAAAAAAAAAAgAAAAcAAAAGAAAABQAAAAgAAAAHAAAA
BAAAAAgAAAADAAAAAAAAAAgAAAABAAAAAwAAAAkAAAAFAAAABAAAAAkAAAAEAAAABwAAAAkA
AAAHAAAABQAAAAoAAAAHAAAACAAAAAoAAAAIAAAAAAAAAAoAAAAAAAAABgAAAAsAAAAGAAAA
BwAAAAsAAAAHAAAACgAAAAsAAAAKAAAABgAAAAwAAAAEAAAAAgAAAAwAAAAIAAAABAAAAA0A
AAABAAAACAAAAA0AAAAIAAAADAAAAA0AAAACAAAAAQAAAA4AAAAMAAAAAgAAAA4AAAACAAAA
DQAAAA4AAAANAAAADAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAA
gD8tAAAABAAAAJ/cS8H37o5BPhYVv3stSMH37o5B4I34PixsOMH37o5BMxtHwB8hYsEDLmtB
4I34PjBFd8Fh2UlBAKFjv8jXbcHe61BBQb5XwFjxWsETfnxB4I34PtgeeMHg01NB/7H3vzBE
eMFwtVJBgAL9vybDSMH37o5B4I34PiKfYsFkS2tB4I34Pu3HN8H37o5BSo5JwMkfd8Fg+EpB
AAFZv2CybcHgClJBQRZVwKYaO8H37o5BqLAywE4AAAAAAAAAAQAAAAIAAAADAAAABAAAAAUA
AAAGAAAAAwAAAAEAAAAGAAAAAAAAAAcAAAAIAAAABwAAAAUAAAAIAAAABQAAAAQAAAAIAAAA
BAAAAAcAAAAJAAAAAQAAAAAAAAAJAAAAAAAAAAYAAAAJAAAABgAAAAEAAAAKAAAABAAAAAMA
AAAKAAAAAwAAAAYAAAAKAAAABgAAAAcAAAALAAAAAgAAAAEAAAALAAAAAQAAAAMAAAALAAAA
BQAAAAIAAAALAAAAAwAAAAUAAAAMAAAABwAAAAQAAAAMAAAABAAAAAoAAAAMAAAACgAAAAcA
AAANAAAABQAAAAcAAAANAAAABwAAAAIAAAANAAAAAgAAAAUAAAAOAAAAAgAAAAcAAAAOAAAA
BwAAAAAAAAAOAAAAAAAAAAIAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAA
AAAAAIA/JwAAAAQAAACIirBA9AzCQdCOkcCIirBAWPyzQRAECMGIirBAwprCQdCOkcBfrgpA
e/3CQdCOkcAsT4tA6g+5QRAECMFfrgpAm9O0QRAECMFfrgpA3cLDQVWkrsBArI5AclzGQQAi
ssCNiI1AvCjGQdCOkcCIirBA3+HCQXcKrsBfrgpA353DQdCOkcBfrgpADFO1QRAECMGIirBA
SJazQRAECMFCAAAAAAAAAAEAAAACAAAAAwAAAAAAAAACAAAABAAAAAEAAAAFAAAABgAAAAcA
AAAEAAAABgAAAAUAAAADAAAACAAAAAcAAAAGAAAACAAAAAMAAAACAAAACAAAAAIAAAAHAAAA
CQAAAAEAAAAEAAAACQAAAAQAAAAHAAAACQAAAAIAAAABAAAACQAAAAcAAAACAAAACgAAAAYA
AAADAAAACgAAAAMAAAAIAAAACgAAAAgAAAAGAAAACwAAAAQAAAAFAAAACwAAAAUAAAAGAAAA
CwAAAAYAAAAEAAAADAAAAAAAAAADAAAADAAAAAMAAAAFAAAADAAAAAUAAAABAAAADAAAAAEA
AAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPy0AAAAEAAAA
oNxLwffujkE+FhW/7cc3wffujkFJjknAei1IwffujkHhjfg+r+oowdD3mUGACUPA53Y6wTh8
nUEAYE+9l5jVwI8xsEHB5y/A0LQjwUhfpkHhjfg+l5jVwD7xuEHkjfg+yFY7wRdBm0Hhjfg+
l5jVwG6vr0E/hDLAFxApwVBomUGAsUXAl5jVwF+LuEHhjfg+JMNIwffujkHhjfg+pBo7wffu
jkGosDLAKGw4wffujkE0G0fATgAAAAAAAAABAAAAAgAAAAMAAAAAAAAABAAAAAMAAAAEAAAA
BQAAAAYAAAAHAAAABQAAAAYAAAAFAAAABAAAAAYAAAACAAAABwAAAAgAAAACAAAABgAAAAgA
AAAGAAAABAAAAAgAAAAEAAAAAAAAAAkAAAADAAAABQAAAAkAAAACAAAAAQAAAAkAAAAFAAAA
BwAAAAoAAAABAAAAAwAAAAoAAAADAAAACQAAAAoAAAAJAAAAAQAAAAsAAAAHAAAAAgAAAAsA
AAACAAAACQAAAAsAAAAJAAAABwAAAAwAAAAAAAAAAgAAAAwAAAACAAAACAAAAAwAAAAIAAAA
AAAAAA0AAAABAAAAAAAAAA0AAAAAAAAAAwAAAA4AAAADAAAAAQAAAA4AAAABAAAADQAAAA4A
AAANAAAAAwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD8qAAAA
BAAAANB1iMBgh7lAECR7QVA8h8C/trtAIIh7QQOGhsDgsUBBcN9rQWBwNsCgLbdAuD6DQbSv
5D/gsUBB/nh3QZsuvL/gsUBBxm9/QQBJ47+gNKdAIPeAQQAv2j9Qoj5BwG15QUDetj/gsUBB
cd55QaDlOMAg/rRAsAyDQeY/5D/gsUBBfGd4QcBi3r//YqlA2CiBQflgfMDgsUBBGiVuQe5Q
hcDgsUBBsW1sQUgAAAAAAAAAAQAAAAIAAAABAAAAAAAAAAMAAAAEAAAAAAAAAAIAAAAFAAAA
BAAAAAIAAAAGAAAAAAAAAAQAAAAHAAAABQAAAAMAAAAIAAAABAAAAAUAAAAIAAAABQAAAAcA
AAAJAAAAAwAAAAAAAAAJAAAAAAAAAAYAAAAJAAAABgAAAAMAAAAKAAAABAAAAAgAAAAKAAAA
CAAAAAcAAAALAAAACgAAAAcAAAALAAAABgAAAAQAAAALAAAABAAAAAoAAAALAAAAAwAAAAYA
AAALAAAABwAAAAMAAAAMAAAAAwAAAAUAAAAMAAAABQAAAAIAAAAMAAAAAQAAAAMAAAANAAAA
AgAAAAEAAAANAAAAAQAAAAwAAAANAAAADAAAAAIAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAA
AAAAAAAAAAAAAAAAAAAAAIA/JwAAAAQAAADGpwxBtmi3QdCOkcBgrgpASKnBQQKsGL9frgpA
e/3CQdCOkcCNiI1AvCjGQdCOkcCo1YhAzwDFQQKsGL8XGQNBEaS4QQKsGL9grgpAsu3CQawR
YL9grgpA4J3DQdCOkcBgrgpAEVfCQQKsGL8iUQNBIgu4QQKsGL/JbwxB4wG4QdCOkcDviYlA
cnPFQQDher9PLu9At/u6QQKsGL9CAAAAAAAAAAEAAAACAAAAAwAAAAAAAAACAAAABAAAAAEA
AAAFAAAABgAAAAIAAAABAAAABwAAAAMAAAACAAAABwAAAAIAAAAGAAAACAAAAAEAAAAEAAAA
CAAAAAQAAAAGAAAACAAAAAYAAAABAAAACQAAAAAAAAAFAAAACQAAAAUAAAABAAAACQAAAAEA
AAAAAAAACgAAAAUAAAAAAAAACgAAAAAAAAADAAAACwAAAAUAAAAKAAAACwAAAAoAAAADAAAA
CwAAAAMAAAAHAAAACwAAAAcAAAAGAAAACwAAAAYAAAAEAAAADAAAAAQAAAAFAAAADAAAAAUA
AAALAAAADAAAAAsAAAAEAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAA
AACAPzMAAAAEAAAAKIAnwWSbmUHmNXJAOSI9wWSbmUHgjfg+onQuwWSbmUFwfCRAi/O/wMWf
vUEilQBAsLnSwLgnvUGADe4/4T7iwBahrUHfyMVAi/O/wDbZrkFFm8pAi/O/wG45vEHnjfg+
0rQjwUhfpkHgjfg+ylY7wRZBm0Hgjfg+Gvw7wWSbmUHGm2E/i/O/wGNMrkG8UclAo+oowWSb
mUHGhnBAi/O/wAa1u0Hgjfg+7trCwEssvEHpjfg+kIw8wWSbmUHgjfg+kIniwKARrUHgdMRA
WgAAAAAAAAABAAAAAgAAAAMAAAAEAAAABQAAAAMAAAAFAAAABgAAAAMAAAAGAAAABwAAAAMA
AAAHAAAABAAAAAgAAAAFAAAABAAAAAgAAAAHAAAAAQAAAAkAAAAFAAAACAAAAAkAAAAIAAAA
AQAAAAoAAAAFAAAACQAAAAoAAAABAAAAAAAAAAoAAAAJAAAAAQAAAAsAAAAGAAAABQAAAAsA
AAAAAAAAAgAAAAsAAAAHAAAABgAAAAwAAAAAAAAABQAAAAwAAAAFAAAACgAAAAwAAAAKAAAA
AAAAAA0AAAAHAAAACwAAAA0AAAALAAAAAgAAAA0AAAABAAAABwAAAA4AAAAEAAAABwAAAA4A
AAAHAAAACAAAAA4AAAAIAAAABAAAAA8AAAACAAAAAQAAAA8AAAABAAAADQAAAA8AAAANAAAA
AgAAABAAAAAFAAAAAAAAABAAAAAAAAAACwAAABAAAAALAAAABQAAABAAAAAAAAAAAAAAAAAA
AAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD8wAAAABAAAAGFRU0GdkKVBMW6lQP7hikEaPWxB
MW6lQHwjMEH136tBMW6lQGaygUF394ZBMW6lQB8EU0FQSaVBgPKzQGjTNkFJY5NBAFQXQXwj
MEF0X6xBCb+sQHwjMEGSWZRBs+kVQfcnikFcOHVBMW6lQIFRckEaPWxBeK78QGbNhkEaPWxB
n57AQHwjMEEci6xBMW6lQHwjMEHMBpVBvd0VQcbkcEEaPWxBxtr9QEe7NkH5u5JBoFoXQUsK
i0EaPWxBMW6lQFQAAAAAAAAAAQAAAAIAAAADAAAAAQAAAAAAAAADAAAAAAAAAAQAAAADAAAA
BAAAAAUAAAAGAAAAAgAAAAcAAAAGAAAABAAAAAAAAAAGAAAABQAAAAQAAAAIAAAABQAAAAkA
AAAIAAAAAwAAAAUAAAAIAAAAAQAAAAMAAAAKAAAACQAAAAEAAAAKAAAACAAAAAkAAAALAAAA
AAAAAAIAAAALAAAAAgAAAAYAAAALAAAABgAAAAAAAAAMAAAABwAAAAUAAAAMAAAABQAAAAYA
AAAMAAAABgAAAAcAAAANAAAABwAAAAIAAAANAAAACQAAAAUAAAANAAAAAgAAAAEAAAANAAAA
AQAAAAkAAAAOAAAABQAAAAcAAAAOAAAABwAAAA0AAAAOAAAADQAAAAUAAAAPAAAAAQAAAAgA
AAAPAAAACAAAAAoAAAAPAAAACgAAAAEAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAA
AAAAAAAAAAAAAIA/LQAAAAQAAADH5HBBGT1sQcba/UByAI1BGT1sQbL85j8xmp1B8fUEQX8H
AkDQOJlBwp7yQL+OjkCvuYxBGT1sQXiemkAEBoFBQMNcQSB470CwzZ5BcCoFQX90T0BnzYZB
GT1sQZ+ewECcwZ5B0NsDQT+RT0BIXI1BGT1sQR809z/x+YBBAHRbQZ+G70CDUXJBGT1sQXeu
/EBEpp1BkUQGQf/sAUBOQo1BGT1sQWgh5z/cRJlBAjz1QF+AjkBOAAAAAAAAAAEAAAACAAAA
AwAAAAAAAAACAAAABAAAAAEAAAAAAAAABQAAAAYAAAAEAAAABwAAAAQAAAAAAAAABwAAAAUA
AAAEAAAACAAAAAIAAAAGAAAACAAAAAYAAAADAAAACAAAAAMAAAACAAAACQAAAAEAAAAEAAAA
CQAAAAQAAAAGAAAACgAAAAAAAAADAAAACgAAAAMAAAAFAAAACgAAAAUAAAAAAAAACwAAAAAA
AAAFAAAACwAAAAUAAAAHAAAACwAAAAcAAAAAAAAADAAAAAYAAAACAAAADAAAAAkAAAAGAAAA
DQAAAAEAAAAJAAAADQAAAAkAAAAMAAAADQAAAAIAAAABAAAADQAAAAwAAAACAAAADgAAAAMA
AAAGAAAADgAAAAYAAAAFAAAADgAAAAUAAAADAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAA
AAAAAAAAAAAAAAAAAACAPy0AAAAEAAAAYK4KQJvTtEEQBAjBNYf8QIYvqkEQBAjBLE+LQOkP
uUEQBAjBYK4KQBhVmEHTelDBWCXXQBhVmEFUCkHB7J18QBhVmEHwiVfBYK4KQAONqEEi1zTB
EPyHQNDqq0HwazbB74nkQFjtoEGA3DDBYK4KQA1TtUEQBAjBuLf7QGmvqkEQBAjBsBrlQABT
oEFwSzHBYK4KQBhVmEF6KVHByvfIQBhVmEFdJEXBCIfVQBhVmEF7y0HBTgAAAAAAAAABAAAA
AgAAAAMAAAABAAAAAAAAAAQAAAABAAAAAwAAAAQAAAADAAAABQAAAAYAAAADAAAAAAAAAAYA
AAAHAAAABQAAAAgAAAAFAAAABwAAAAkAAAACAAAABwAAAAkAAAAHAAAABgAAAAkAAAAAAAAA
AgAAAAkAAAAGAAAAAAAAAAoAAAABAAAACAAAAAoAAAAIAAAABwAAAAoAAAACAAAAAQAAAAoA
AAAHAAAAAgAAAAsAAAABAAAABAAAAAsAAAAEAAAACAAAAAsAAAAIAAAAAQAAAAwAAAAFAAAA
AwAAAAwAAAADAAAABgAAAAwAAAAGAAAABQAAAA0AAAAEAAAABQAAAA0AAAAFAAAACAAAAA4A
AAAIAAAABAAAAA4AAAAEAAAADQAAAA4AAAANAAAACAAAABAAAAAAAAAAAAAAAAAAAAAAAAAA
EAAAAAAAAAAAAAAAAAAAAAAAgD8wAAAABAAAABPP0kDUWrhB/KKaQBPP0kAYCr1BAKwYvxPP
0kBIB6lBH93pQHsjMEF0X6xBCb+sQHsjMEFiI6FBH93pQHsjMEFpla9B67RuPwlN/0CxIKlB
H93pQCJRA0EiC7hBAKwYv7BCD0GaDbNBPvWlQE8u70C2+7pBAKwYv3sjMEFr6a5BYCBvP3sj
MEHpeqBBH93pQBPP0kDypr1BAKwYvxPP0kAGralBH93pQBcZA0ERpLhBAKwYv87TEUEoeLVB
AHR5P1QAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAAAgAAAAQAAAAHAAAAAgAAAAEA
AAAIAAAAAAAAAAYAAAAIAAAABAAAAAMAAAAIAAAABgAAAAQAAAAIAAAAAwAAAAUAAAAJAAAA
BwAAAAEAAAAKAAAAAgAAAAcAAAAKAAAABQAAAAQAAAAKAAAABwAAAAUAAAALAAAABAAAAAIA
AAALAAAAAgAAAAoAAAALAAAACgAAAAQAAAAMAAAACQAAAAEAAAAMAAAAAQAAAAAAAAAMAAAA
AAAAAAgAAAANAAAAAAAAAAIAAAANAAAAAgAAAAYAAAANAAAABgAAAAAAAAAOAAAABQAAAAcA
AAAOAAAABwAAAAkAAAAOAAAACQAAAAUAAAAPAAAABQAAAAkAAAAPAAAACQAAAAwAAAAPAAAA
CAAAAAUAAAAPAAAADAAAAAgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAA
AAAAAIA/OQAAAAQAAAB7IzBBYSOhQR/d6UByU6dAsOGmQR/d6UCHfCtA/PGvQR/d6UBtRRpA
KGi0QR/d6UBgrgpAcPOTQVkdUUFgrgpAogqrQUaPFkFgrgpAV96MQTZUVkEPVIpAV96MQWUK
T0FgrgpARaqyQR/d6UCIBKJAV96MQX/yRUF7IzBBkVmUQbPpFUFgrgpAliyxQcRxAkEJTf9A
sCCpQR/d6UDGqqJAV96MQYfnR0F7IzBB6XqgQR/d6UB7IzBBzAaVQb7dFUEDCAtADRWzQR/d
6UBgrgpAV96MQU9oVUHwo+xA9zGjQdA5CUFmAAAAAAAAAAEAAAACAAAAAwAAAAAAAAACAAAA
BAAAAAUAAAAGAAAABwAAAAQAAAAGAAAACAAAAAYAAAAFAAAACAAAAAMAAAACAAAACQAAAAcA
AAAGAAAACQAAAAEAAAAKAAAACwAAAAgAAAAFAAAADAAAAAAAAAADAAAADAAAAAMAAAALAAAA
DAAAAAsAAAAFAAAADQAAAAoAAAAHAAAADQAAAAcAAAAJAAAADQAAAAkAAAAKAAAADgAAAAoA
AAABAAAADgAAAAEAAAAAAAAADgAAAAAAAAAKAAAADwAAAAoAAAAAAAAADwAAAAAAAAAMAAAA
DwAAAAQAAAAHAAAADwAAAAcAAAAKAAAAEAAAAAMAAAAIAAAAEAAAAAgAAAALAAAAEAAAAAsA
AAADAAAAEQAAAAEAAAAJAAAAEQAAAAkAAAAGAAAAEQAAAAYAAAAIAAAAEQAAAAgAAAACAAAA
EQAAAAIAAAABAAAAEgAAAAUAAAAEAAAAEgAAAAQAAAAPAAAAEgAAAAwAAAAFAAAAEgAAAA8A
AAAMAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPzYAAAAEAAAA
/uGKQRk9bEExbqVAYlFTQZyQpUExbqVAfCMwQfXfq0ExbqVAF9WKQQAId0Gh8p9A9itWQdAy
qEEAOWE/uFaLQXAveEEAxOM/TUKNQRk9bEFpIec/r7mMQRk9bEF3nppAZrKBQXj3hkExbqVA
9yeKQVk4dUExbqVAfCMwQTUFrkH8IExAfCMwQWrprkFjIG8/fCMwQWmVr0HutG4/fCMwQRyL
rEExbqVAcQCNQRk9bEGy/OY/SwqLQRk9bEExbqVA3xNWQYCLp0EArWE/SFyNQRk9bEEgNPc/
YAAAAAAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAUAAAAGAAAABAAAAAUAAAAEAAAAAwAAAAcA
AAAFAAAAAwAAAAcAAAAAAAAABgAAAAgAAAABAAAAAAAAAAgAAAADAAAAAQAAAAkAAAADAAAA
CAAAAAkAAAAIAAAAAAAAAAkAAAAHAAAAAwAAAAoAAAABAAAABAAAAAoAAAALAAAAAgAAAAwA
AAAEAAAACwAAAAwAAAALAAAACgAAAAwAAAAKAAAABAAAAA0AAAACAAAAAQAAAA0AAAABAAAA
CgAAAA0AAAAKAAAAAgAAAA4AAAACAAAACwAAAA4AAAAAAAAAAgAAAA4AAAAGAAAAAAAAAA8A
AAAAAAAABwAAAA8AAAAHAAAACQAAAA8AAAAJAAAAAAAAABAAAAAEAAAABgAAABAAAAAGAAAA
DgAAABAAAAALAAAABAAAABAAAAAOAAAACwAAABEAAAAGAAAABQAAABEAAAAFAAAABwAAABEA
AAAHAAAABgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD8nAAAA
BAAAADFQu8AAAAAA4I34PsO4K8EAAAAA3434PuFtBsEAAAAArD3Wv5QCOsDrGR1B4I34PsaK
tcBF0u5A4I34PuogIsEAAAAAkoiEv2rC1MAAAAAA3keDv14oMsDe4exA4I34PhIr7cAABfg/
AHmnv2mdC8EAGxtAArgYv2CeJcEAAAAAPZsXv/HYwsAAgp0/AntWv5/mEcEaKRpA4I34PkIA
AAAAAAAAAQAAAAIAAAABAAAAAAAAAAMAAAAEAAAAAQAAAAMAAAAFAAAAAgAAAAEAAAAGAAAA
AAAAAAIAAAAHAAAAAwAAAAAAAAAHAAAAAAAAAAYAAAAIAAAAAwAAAAcAAAAIAAAAAgAAAAUA
AAAIAAAABQAAAAkAAAAIAAAACQAAAAQAAAAIAAAABAAAAAMAAAAKAAAAAQAAAAkAAAAKAAAA
CQAAAAUAAAAKAAAABQAAAAEAAAALAAAABwAAAAYAAAALAAAACAAAAAcAAAALAAAABgAAAAIA
AAALAAAAAgAAAAgAAAAMAAAACQAAAAEAAAAMAAAAAQAAAAQAAAAMAAAABAAAAAkAAAAQAAAA
AAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/MwAAAAQAAADs2sLATCy8QeiN
+D7IHYo/Wny7QeCN+D5grgpAxg7AQeCN+D6YmNXAbq+vQT+EMsDbg3w+RBW3QSMw78BgrgpA
3MLDQVOkrsBgrgpAbTG6QSMw78AAO4C+yATBQaD1qsCYmNXAYIu4QeCN+D7eBp/AsPS5QYKA
J8BgrgpAsO3CQawRYL9grgpA+mC/QeKN+D5frgpA8bG5QSMw78DvhKC/nuO+QeCN+D4PuHA+
rZC3QSMw78CYmNXAjjGwQcHnL8CYmNXAP/G4QeWN+D5aAAAAAAAAAAEAAAACAAAAAwAAAAQA
AAABAAAABQAAAAIAAAAGAAAABwAAAAAAAAAFAAAABwAAAAUAAAAGAAAACAAAAAEAAAAAAAAA
CAAAAAMAAAABAAAACQAAAAAAAAAHAAAACgAAAAIAAAAFAAAACgAAAAUAAAAAAAAACwAAAAYA
AAACAAAACwAAAAIAAAABAAAADAAAAAYAAAALAAAADAAAAAsAAAABAAAADAAAAAEAAAAEAAAA
DAAAAAQAAAAGAAAADQAAAAAAAAACAAAADQAAAAIAAAAKAAAADQAAAAoAAAAAAAAADgAAAAkA
AAAHAAAADgAAAAQAAAADAAAADgAAAAYAAAAEAAAADgAAAAcAAAAGAAAADwAAAAkAAAAOAAAA
DwAAAA4AAAADAAAADwAAAAAAAAAJAAAADwAAAAMAAAAIAAAAEAAAAAgAAAAAAAAAEAAAAAAA
AAAPAAAAEAAAAA8AAAAIAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAA
AACAP0gAAAAEAAAAYK4KQBJ0r0EbmgNBYK4KQHDzk0FYHVFBYK4KQAypSkGwhHJBt6/kP+Cx
QEH+eHdBmy68v+CxQEHIb39BA4aGwOCxQEFw32tBANiZv+BXVEHgEH5BAMYcP8gOmUEwnFJB
v+xzwAC2mkGw9DVB8O+EwFE0VEGAcmlBwA3mP/BErEFQ8hZBeVgJQLHlsEEbmgNBXTQWwEX/
qkEbmgNBYK4KQKIKq0FGjxZBBL+Xv0ddrUEbmgNBQN62P+CxQEFx3nlBwAATwImsq0EbmgNB
4F92wHAqmkGgkDVBYK4KQOO/SkHfZ3NB5T/kP+CxQEF8Z3hBoCqGwDAdU0EAD2lBzeTqP+/H
rkEbmgNB+WB8wOCxQEEZJW5BYK4KQLeksEEbmgNBhAAAAAAAAAABAAAAAgAAAAMAAAAAAAAA
AgAAAAMAAAAEAAAABQAAAAYAAAABAAAABwAAAAYAAAAHAAAACAAAAAkAAAAGAAAACAAAAAkA
AAAEAAAABgAAAAoAAAAIAAAABwAAAAoAAAAHAAAAAQAAAAsAAAAAAAAADAAAAA0AAAAKAAAA
AQAAAA0AAAALAAAACgAAAA0AAAABAAAAAAAAAA4AAAAKAAAACwAAAA4AAAALAAAADAAAAA4A
AAAIAAAACgAAAA8AAAAEAAAAAwAAAA8AAAAGAAAABAAAABAAAAAMAAAACAAAABAAAAAIAAAA
DgAAABAAAAAOAAAADAAAABEAAAAIAAAADAAAABEAAAAMAAAABQAAABIAAAABAAAABgAAABIA
AAAGAAAADwAAABIAAAACAAAAAQAAABIAAAADAAAAAgAAABMAAAAPAAAAAwAAABMAAAADAAAA
EgAAABMAAAASAAAADwAAABQAAAAJAAAACAAAABQAAAAIAAAAEQAAABQAAAAFAAAACQAAABQA
AAARAAAABQAAABUAAAAAAAAAAwAAABUAAAADAAAABQAAABUAAAAFAAAADAAAABUAAAAMAAAA
AAAAABYAAAAFAAAABAAAABYAAAAEAAAACQAAABYAAAAJAAAABQAAABcAAAAAAAAACwAAABcA
AAALAAAADQAAABcAAAANAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAA
AAAAAAAAgD85AAAABAAAAGCuCkBDDbNBH93pQGCuCkBIqcFBAKwYv2CuCkAVmoVBbehLQBTP
0kDUWrhB/KKaQBTP0kAEralBH93pQBTP0kDwpr1BAKwYv2CuCkAp0r9BlM2AQKjViEDPAMVB
AKwYv0CZfUBYn75BoNmbQHJTp0Cw4aZBH93pQGGuCkBguYxBb6SKQG1FGkAoaLRBH93pQGCu
CkCPJ5BBNqcWQGCuCkAPV8JBAKwYvyB0UkCADsBB/niIQId8K0D68a9BH93pQBTP0kBIB6lB
H93pQBTP0kAYCr1BAKwYv2CuCkBFqrJBH93pQGYAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUA
AAAGAAAAAQAAAAAAAAAHAAAACAAAAAMAAAAHAAAAAwAAAAUAAAAHAAAABQAAAAEAAAAJAAAA
BAAAAAAAAAAKAAAAAAAAAAIAAAALAAAACAAAAAYAAAALAAAABgAAAAAAAAALAAAABAAAAAMA
AAALAAAAAwAAAAgAAAALAAAAAAAAAAQAAAAMAAAAAgAAAAEAAAANAAAAAQAAAAYAAAANAAAA
BgAAAAcAAAANAAAABwAAAAEAAAAOAAAABgAAAAgAAAAOAAAACAAAAAcAAAAOAAAABwAAAAYA
AAAPAAAACQAAAAAAAAAPAAAACgAAAAkAAAAQAAAABAAAAAkAAAAQAAAACQAAAAoAAAAQAAAA
CgAAAAIAAAAQAAAABQAAAAQAAAARAAAABQAAABAAAAARAAAAEAAAAAIAAAARAAAAAgAAAAwA
AAARAAAAAQAAAAUAAAARAAAADAAAAAEAAAASAAAAAAAAAAoAAAASAAAACgAAAA8AAAASAAAA
DwAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/PwAAAAQA
AADsggDBAAAAAPZpLEBWwh3BAAAAACh/CEDCuCvBAAAAAN+N+D4UZ6e/4LFAQRaXh0AwULvA
AAAAAOCN+D5cKDLA3+HsQOCN+D5gMaS+4LFAQaHquz+khDnA4LFAQQMDvD8AwAk9sEs3QUC9
IED+JFTA4LFAQfA8KUAgtgi+4LFAQbV+bkDN3czAAAAAAO9h/j/FirXARNLuQOCN+D6SAjrA
6xkdQeCN+D4ESSjA4LFAQaIjc0BNkYs+4LFAQS2TJUD1P9G/4LFAQY3mfT/lxCjBAAAAAP0W
gj8ANsS+cA83QcBIakDULSzBAAAAAOzyED9gMhTBwNAZQABzYT9yAAAAAAAAAAEAAAACAAAA
AQAAAAAAAAADAAAABAAAAAAAAAACAAAABAAAAAIAAAAFAAAABgAAAAcAAAADAAAACAAAAAQA
AAAFAAAACAAAAAUAAAAGAAAACQAAAAMAAAAHAAAACgAAAAYAAAADAAAACwAAAAAAAAAEAAAA
DAAAAAkAAAAHAAAADAAAAAUAAAACAAAADQAAAAYAAAAFAAAADQAAAAUAAAAMAAAADQAAAAwA
AAAHAAAADgAAAAEAAAADAAAADgAAAAMAAAAJAAAADwAAAAgAAAAGAAAADwAAAAYAAAAKAAAA
DwAAAAoAAAAIAAAAEAAAAAcAAAAGAAAAEAAAAAYAAAANAAAAEAAAAA0AAAAHAAAAEQAAAAEA
AAAOAAAAEQAAAA4AAAAJAAAAEQAAAAIAAAABAAAAEgAAAAgAAAAKAAAAEgAAAAQAAAAIAAAA
EgAAAAsAAAAEAAAAEgAAAAoAAAADAAAAEgAAAAMAAAAAAAAAEgAAAAAAAAALAAAAEwAAAAIA
AAARAAAAEwAAABEAAAAJAAAAFAAAAAwAAAACAAAAFAAAAAIAAAATAAAAFAAAAAkAAAAMAAAA
FAAAABMAAAAJAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP0UA
AAAEAAAAyCZ0wVTFlMHLaGZAyCZ0wVTFlMGFGpjAGsEywVTFlMECmRO/ZHCbwVTFlMECmRO/
KrdhwXBcRsEGRS9AqlwuwXBcRsECmRO/itmMwXBcRsECmRO/KrdhwXBcRsFEEXnAR7xFwVTF
lMEHwhZAR7xFwVTFlMFHjmDA35yRwVTFlMHoPBlAoDCRwWACiMGAFRBA35yRwVTFlMEqCWPA
oDCRwWACiMHB4VnADtQ8wXBcRsEBzNg/DtQ8wXBcRsFCMjbA93OEwXBcRsGgYOo/93OEwXBc
RsGQ/D7AgoCawXD1hsECmRO/Umt1wQCMisGibJLAUmt1wQCMisECDVtAaxxTwXBcRsEgshZA
Eyh2wXBcRsFuiBJAfgAAAAAAAAABAAAAAgAAAAMAAAABAAAAAAAAAAQAAAAFAAAABgAAAAcA
AAAGAAAABQAAAAgAAAAAAAAAAgAAAAkAAAACAAAAAQAAAAkAAAABAAAABwAAAAoAAAADAAAA
AAAAAAoAAAAAAAAACwAAAAwAAAABAAAAAwAAAAwAAAANAAAAAQAAAA4AAAAFAAAABAAAAA4A
AAACAAAABQAAAA4AAAAIAAAAAgAAAA8AAAAHAAAABQAAAA8AAAAJAAAABwAAAA8AAAAFAAAA
AgAAAA8AAAACAAAACQAAABAAAAAEAAAABgAAABAAAAAGAAAACwAAABEAAAAGAAAABwAAABEA
AAANAAAABgAAABIAAAANAAAADAAAABIAAAAMAAAAAwAAABIAAAADAAAACgAAABIAAAAKAAAA
CwAAABIAAAAGAAAADQAAABIAAAALAAAABgAAABMAAAANAAAAEQAAABMAAAARAAAABwAAABMA
AAAHAAAAAQAAABMAAAABAAAADQAAABQAAAAQAAAACwAAABQAAAAAAAAABAAAABQAAAALAAAA
AAAAABUAAAAIAAAADgAAABUAAAAOAAAABAAAABUAAAAEAAAAAAAAABUAAAAAAAAACAAAABYA
AAAEAAAAEAAAABYAAAAQAAAAFAAAABYAAAAUAAAABAAAABAAAAAAAAAAAAAAAAAAAAAAAAAA
EAAAAAAAAAAAAAAAAAAAAAAAgD9LAAAABAAAAIvZjMFwXEbBAJkTvyy3YcFwXEbBQxF5wCy3
YcFwXEbBBEUvQKxcLsFwXEbBAJkTv2Aqu8AAAAAAEO3xPuBtBsEAAAAArD3Wv+yCAMEAAAAA
9mksQNYtLMEAAAAA7PIQP/dzhMFwXEbBkPw+wKCqgcHQvgvBAJkTv6GmdsGgkxHBgLYrwPdz
hMFwXEbBoGDqPw3UPMFwXEbBQDI2wA3UPMFwXEbB/8vYP87dzMAAAAAA7mH+P1bCHcEAAAAA
J38IQGrC1MAAAAAA3keDv+wgIsEAAAAAkoiEv6GmdsGgkxHBgNTDP7gHWMEAqR/B/4tjwOfE
KMEAAAAA/RaCP16eJcEAAAAAPZsXvwqEF8EAAAC0mPoRQGocU8FwXEbBH7IWQBUodsFwXEbB
bIgSQIoAAAAAAAAAAQAAAAIAAAADAAAAAgAAAAEAAAAEAAAABQAAAAYAAAAHAAAABgAAAAUA
AAAIAAAAAAAAAAkAAAAIAAAACQAAAAoAAAAIAAAAAQAAAAAAAAAIAAAACgAAAAEAAAALAAAA
CQAAAAAAAAALAAAAAAAAAAIAAAAMAAAAAwAAAAEAAAAMAAAABAAAAAMAAAANAAAAAgAAAAMA
AAAOAAAABAAAAAYAAAAOAAAAAwAAAAQAAAAOAAAADQAAAAMAAAAPAAAABgAAAAcAAAAQAAAA
BQAAAAQAAAAQAAAABAAAAAwAAAAQAAAAAQAAAAUAAAAQAAAADAAAAAEAAAARAAAABwAAAAUA
AAARAAAABQAAAAoAAAARAAAACgAAAAkAAAASAAAACQAAAAsAAAASAAAACwAAAA8AAAASAAAA
BwAAAAkAAAATAAAABQAAAAEAAAATAAAAAQAAAAoAAAATAAAACgAAAAUAAAAUAAAADwAAAAcA
AAAUAAAABwAAABIAAAAUAAAAEgAAAA8AAAAVAAAACQAAAAcAAAAVAAAABwAAABEAAAAVAAAA
EQAAAAkAAAAWAAAAAgAAAAYAAAAWAAAABgAAAA8AAAAXAAAAAgAAAA0AAAAXAAAADQAAAA4A
AAAXAAAABgAAAAIAAAAXAAAADgAAAAYAAAAYAAAADwAAAAsAAAAYAAAAFgAAAA8AAAAYAAAA
CwAAAAIAAAAYAAAAAgAAABYAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAA
AAAAAIA/MAAAAAQAAACOfW7BAG3CwcCQjECOfW7BAG3CweJ2scBYYB/BQH2+wQCZE7+wzZ7B
cFzGwQCZE7/GJnTBVMWUwYYamMBjcJvBVMWUwQCZE79HvEXBVMWUwQfCFkDfnJHBVMWUweg8
GUBHvEXBVMWUwUiOYMC8N5PBUDXFwYL7O0C8N5PBUDXFweDjgsBOjDbBYKS/wYL7O0BOjDbB
YKS/weDjgsDfnJHBVMWUwSgJY8DGJnTBVMWUwcloZkAXwTLBVMWUwQCZE79UAAAAAAAAAAEA
AAACAAAAAwAAAAEAAAAAAAAABAAAAAUAAAAGAAAABwAAAAYAAAAFAAAACAAAAAQAAAAGAAAA
CQAAAAMAAAAAAAAACQAAAAAAAAAHAAAACQAAAAUAAAADAAAACQAAAAcAAAAFAAAACgAAAAEA
AAADAAAACgAAAAMAAAAFAAAACwAAAAAAAAACAAAACwAAAAIAAAAGAAAADAAAAAEAAAAEAAAA
DAAAAAQAAAAIAAAADAAAAAIAAAABAAAADAAAAAgAAAACAAAADQAAAAQAAAABAAAADQAAAAEA
AAAKAAAADQAAAAUAAAAEAAAADQAAAAoAAAAFAAAADgAAAAAAAAALAAAADgAAAAsAAAAGAAAA
DgAAAAYAAAAHAAAADgAAAAcAAAAAAAAADwAAAAYAAAACAAAADwAAAAIAAAAIAAAADwAAAAgA
AAAGAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP1oAAAAEAAAA
/iRUwOCxQEHwPClA9T/Rv+CxQEGO5n0/FGenv+CxQEEWl4dATZGLPuCxQEEtkyVAYK4KQCnS
v0GUzYBAYK4KQMUOwEHfjfg+AAgKwOCxwEGAKD9AYK4KQBWahUFv6EtAivO/wMWfvUEilQBA
ivO/wAa1u0Hfjfg+ivO/wDfZrkFDm8pApYQ5wOCxQEEDA7w/YDGkvuCxQEGh6rs/ILYIvuCx
QEG1fm5ABEkowOCxQEGiI3NAXjQWwET/qkEbmgNBINwkwAC+skFgAdpAYK4KQI8nkEE2pxZA
Ya4KQGC5jEFvpIpAYK4KQBN0r0EbmgNBeVgJQLHlsEEbmgNBBL+Xv0ddrUEbmgNB8YSgv57j
vkHfjfg+ivO/wG85vEHnjfg+wAATwImsq0EbmgNByB2KP1p8u0Hfjfg+YK4KQJYssUHEcQJB
ivO/wGRMrkG9UclAYK4KQPpgv0Hhjfg+zeTqP+/HrkEbmgNBqAAAAAAAAAABAAAAAgAAAAMA
AAACAAAAAQAAAAQAAAAFAAAABgAAAAQAAAAHAAAABQAAAAgAAAAJAAAACgAAAAgAAAAKAAAA
BgAAAAsAAAAJAAAAAQAAAAsAAAABAAAAAAAAAAsAAAAAAAAACQAAAAwAAAAHAAAAAwAAAAwA
AAADAAAAAQAAAA0AAAACAAAAAwAAAA4AAAACAAAADwAAAA4AAAAPAAAACgAAAA4AAAAAAAAA
AgAAABAAAAAGAAAACgAAABEAAAAFAAAABwAAABEAAAAHAAAADAAAABIAAAADAAAABwAAABIA
AAANAAAAAwAAABIAAAAHAAAABAAAABMAAAASAAAABAAAABMAAAANAAAAEgAAABMAAAACAAAA
DQAAABMAAAAUAAAADwAAABUAAAAPAAAAFAAAABUAAAAUAAAAEAAAABYAAAAGAAAABQAAABYA
AAAFAAAACQAAABcAAAAJAAAACAAAABcAAAAWAAAACQAAABcAAAAIAAAABgAAABcAAAAGAAAA
FgAAABgAAAAQAAAACgAAABgAAAAVAAAAEAAAABgAAAAKAAAADwAAABgAAAAPAAAAFQAAABkA
AAABAAAACQAAABkAAAAJAAAABQAAABoAAAAUAAAAEwAAABoAAAATAAAABAAAABoAAAAGAAAA
EAAAABoAAAAQAAAAFAAAABoAAAAEAAAABgAAABsAAAAAAAAADgAAABsAAAAOAAAACgAAABsA
AAAKAAAACQAAABsAAAAJAAAAAAAAABwAAAABAAAAGQAAABwAAAAZAAAABQAAABwAAAAFAAAA
EQAAABwAAAARAAAADAAAABwAAAAMAAAAAQAAAB0AAAAPAAAAAgAAAB0AAAACAAAAEwAAAB0A
AAATAAAADwAAAA==</SharedString>
		<SharedString md5="RWni7vnZUCWl+3S7SWu+1w==">Q1NHUEhTBwAAAALKv+REHYucwOcak8Bl14A41g0BRyStEEe6TBZAuk27SCzgvD9Ns8hIEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP7QAAAAEAAAA//9HwVigkEAG
5X0///9HwT0Rm0C1XHs///9HwTFujEB/83w/dwkywfa65kAAnw0/I9MywfLD60C+QBA///9H
wRDtm0CW3Xo///9HwWOEhkCOj3s/YV8xwfqx4UA8IQU/B/YxwRE05kDmEg2/NMgywQB+60B5
QBC/yrszwfG48EDHkwy/yrszwfG48EAMlAw///9HwV1bpED0zHU///9HwXLYekB50HM/D9Mw
wffL3EBPqO0+g0kxwSD04EDBcAO///9HwdgFakDjbWo///9HwdECeUC3GnW///9HwVqxhkCT
gnu///9HwUMJkUCiZX2///9HwWBimkCuWny///9HwWUzpEA/DHa/yd83wb7tAEFo4+i+lsU1
wTws+UCzVai+//9HwW3wrUBQ02q/yd83wb7tAEHz4+g+//9HwW3wrUCV02o/uGUwweQ12EA/
I8U+1sAwwRwY3EDdSui+//9HwagAZkDkJmc///9HwfOkWkBOxF0///9HwVTQU0ACVVQ///9H
wfZvaUC97Gq///9HwUgA9EBEAgi/D8BDwb3MD0H895S+DD89wafNCEH1S7y+//9HwUgA9ECJ
Agg/DD89wafNCEF/TLw+D8BDwb3MD0GG+JQ+UhQwwbUr1EBRAZA+klkwwQCv10BCLb++//9H
wWKVTkCf+0w///9HwThnT0Beoky///9HwZhmXEAVuVy///9HwU/tEUGp84i+//9HwUz8EUFO
qHu+FZtFwQrJEEHwsYK+//9HwU/tEUEz9Ig+ed8vwVr90EDKhhs+C90vwWDf0ECQKhW+dg8w
wcXb00Al8Iq+//9Hwa0uSEC9cD0///9HwRYnRkBCLTg///9HwUBVRUA7Kzm/QM0vwZTbz0DX
GKA9UcIvwbsYz0AAIAo2QM0vwZbRz0CJu5m9//9HwQxkQUDhZhA///9HwQxkQUCcZhC///9H
wbQxOUCiMEw+XAEAAAAAAAABAAAABQAAAAAAAAAFAAAADAAAAAAAAAAMAAAAGgAAAAAAAAAa
AAAAJAAAAAAAAAAkAAAALwAAAAAAAAAvAAAALQAAAAAAAAAtAAAALAAAAAAAAAAsAAAAIQAA
AAAAAAAhAAAAGAAAAAAAAAAYAAAAFQAAAAAAAAAVAAAAFAAAAAAAAAAUAAAAEwAAAAAAAAAT
AAAAEgAAAAAAAAASAAAAEQAAAAAAAAARAAAAIAAAAAAAAAAgAAAAKwAAAAAAAAArAAAAKgAA
AAAAAAAqAAAANQAAAAAAAAA1AAAAOgAAAAAAAAA6AAAAOwAAAAAAAAA7AAAAOQAAAAAAAAA5
AAAANAAAAAAAAAA0AAAAMwAAAAAAAAAzAAAAKQAAAAAAAAApAAAAHwAAAAAAAAAfAAAAHgAA
AAAAAAAeAAAAHQAAAAAAAAAdAAAAEAAAAAAAAAAQAAAADQAAAAAAAAANAAAABgAAAAAAAAAG
AAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAAAQAAAAEAAAAEAAAABQAA
AAIAAAAGAAAAAwAAAAMAAAAHAAAACAAAAAMAAAAIAAAACQAAAAMAAAAJAAAABAAAAAMAAAAG
AAAABwAAAAQAAAAJAAAACgAAAAQAAAAKAAAACwAAAAQAAAALAAAADAAAAAQAAAAMAAAABQAA
AAYAAAANAAAABwAAAAcAAAAOAAAADwAAAAcAAAAPAAAACAAAAAcAAAANAAAAEAAAAAcAAAAQ
AAAADgAAAAgAAAAPAAAAEQAAAAgAAAARAAAAEgAAAAgAAAASAAAAEwAAAAgAAAATAAAAFAAA
AAgAAAAUAAAACQAAAAkAAAAUAAAAFQAAAAkAAAAVAAAACgAAAAoAAAAWAAAAFwAAAAoAAAAX
AAAACwAAAAoAAAAVAAAAGAAAAAoAAAAYAAAAFgAAAAsAAAAXAAAAGQAAAAsAAAAZAAAAGgAA
AAsAAAAaAAAADAAAAA4AAAAbAAAAHAAAAA4AAAAcAAAADwAAAA4AAAAQAAAAHQAAAA4AAAAd
AAAAHgAAAA4AAAAeAAAAHwAAAA4AAAAfAAAAGwAAAA8AAAAcAAAAIAAAAA8AAAAgAAAAEQAA
ABYAAAAYAAAAIQAAABYAAAAhAAAAIgAAABYAAAAiAAAAIwAAABYAAAAjAAAAJQAAABYAAAAl
AAAAGQAAABYAAAAZAAAAFwAAABkAAAAkAAAAGgAAABkAAAAlAAAAJgAAABkAAAAmAAAAJAAA
ABsAAAAnAAAAKAAAABsAAAAoAAAAHAAAABsAAAAfAAAAKQAAABsAAAApAAAAJwAAABwAAAAo
AAAAKgAAABwAAAAqAAAAKwAAABwAAAArAAAAIAAAACEAAAAsAAAAIgAAACIAAAAsAAAALQAA
ACIAAAAtAAAALgAAACIAAAAuAAAAJgAAACIAAAAmAAAAJQAAACIAAAAlAAAAIwAAACQAAAAm
AAAALwAAACYAAAAuAAAALQAAACYAAAAtAAAALwAAACcAAAAwAAAAMQAAACcAAAAxAAAAMgAA
ACcAAAAyAAAAKAAAACcAAAApAAAAMwAAACcAAAAzAAAANAAAACcAAAA0AAAAMAAAACgAAAAy
AAAANQAAACgAAAA1AAAAKgAAADAAAAA2AAAAMQAAADAAAAA0AAAANgAAADEAAAA2AAAANwAA
ADEAAAA3AAAAOAAAADEAAAA4AAAANQAAADEAAAA1AAAAMgAAADQAAAA5AAAANgAAADUAAAA4
AAAAOgAAADYAAAA5AAAANwAAADcAAAA5AAAAOwAAADcAAAA7AAAAOgAAADcAAAA6AAAAOAAA
ABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD/DAAAABAAAAP//x8Eo
8gRB03+Rvv//x8Eo8gRB2jmRPl//x8HYNQVBGKPQvrnAx8FgYAFBHlLmvtW5x8Ef1wBBE+ah
vtW5x8Ef1wBByIihPrnAx8FgYAFBHlLmPl//x8HYNQVBa7rQPjvDx8FQCwlBZQu7vgwLx8Gs
lftASaP6vnA8wcH6eq9AlvYAv71RwcH6eq9AqhX3vgmbwcH6eq9An9DOvjGowcH6eq9AYJzE
vjDcwcH6eq9Arw+ZviwLwsH6eq9AE6YCviwLwsH6eq9AudQCPhrtwcH6eq9ACuGYPlOrwcH6
eq9ATLnOPtlKwcH6eq9A7eoAPwwLx8GslftASaP6PjvDx8FQCwlBuCK7Pm8Px8F+pgxB56Km
vkLvxcH7zg9BzN6Uvj/qxcH5T/VAsjMGv7HSu8H6eq9A3qRov0HDvMH6eq9AyzpmvzGzvcH6
eq9APuVev5//vcH6eq9Aqu5av9qXvsH6eq9AggFTv0LavsH6eq9ADPNNv9psv8H6eq9AQptC
v/ujv8H6eq9A4ro8v24uwMH6eq9AIuEtv+ZVwMH6eq9ADl4ov0fCwMH6eq9AuqYYvy7OwMH6
eq9AaI8YPz/qxcH5T/VAsjMGP7U5wMH6eq9AIuEtP0B2v8H6eq9A66ZCP/+fvsH6eq9A2fVS
PzS4vcH6eq9A5/BeP2PGvMH6eq9AyzpmP7HSu8H6eq9A3qRoP0LvxcH7zg9BH/aUPm8Px8F+
pgxBOrqmPjMBxcErxxBBE6aCvomavMFdKhlBMg5Avv//rsGrliJBtKWrvf//rsEysepAbjAV
vwwrscH6eq9AiLBov///rsEysepAbjAVP///rsGrliJB/wKsPXxmucH6eq9AiLBoP4mavMFd
KhlB2DxAPiZ2ucHWxRtB21IUvmvUssG7jyBBhDPZvf//rsGsxSJBGoeevf//rsH6eq9AiLBo
v9OBuMH6eq9AiLBoP///rsH8t7lAvD9aP///rsFFvCJBfQSFPWvUssG7jyBBz5DZPSZ2ucFG
rxtBsHbUPf//rsH6eq9A3qRoP3oBAAAAAAAAAQAAAAcAAAAAAAAABwAAAAIAAAAAAAAAAgAA
AAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAAEAAAABAAAABQAAAAYAAAAB
AAAABgAAAAcAAAACAAAABwAAABUAAAACAAAAFQAAAAgAAAACAAAACAAAAAMAAAADAAAACAAA
AAkAAAADAAAACQAAAAoAAAADAAAACgAAAAsAAAADAAAACwAAAAwAAAADAAAADAAAAA0AAAAD
AAAADQAAAA4AAAADAAAADgAAAA8AAAADAAAADwAAAAQAAAAEAAAADwAAABAAAAAEAAAAEAAA
AAUAAAAFAAAAEAAAAAYAAAAGAAAAEAAAABEAAAAGAAAAEQAAABIAAAAGAAAAEgAAABMAAAAG
AAAAEwAAABQAAAAGAAAAFAAAAAcAAAAHAAAAFAAAABUAAAAIAAAAFQAAAC0AAAAIAAAALQAA
ABYAAAAIAAAAFgAAABcAAAAIAAAAFwAAABgAAAAIAAAAGAAAAAkAAAAJAAAAGAAAABkAAAAJ
AAAAGQAAABoAAAAJAAAAGgAAABsAAAAJAAAAGwAAABwAAAAJAAAAHAAAAB0AAAAJAAAAHQAA
AB4AAAAJAAAAHgAAAB8AAAAJAAAAHwAAACAAAAAJAAAAIAAAACEAAAAJAAAAIQAAACIAAAAJ
AAAAIgAAACMAAAAJAAAAIwAAAAoAAAAKAAAAIwAAACIAAAAKAAAAIgAAACEAAAAKAAAAIQAA
ACAAAAAKAAAAIAAAAB8AAAAKAAAAHwAAAB4AAAAKAAAAHgAAAB0AAAAKAAAAHQAAABwAAAAK
AAAAHAAAABsAAAAKAAAAGwAAABoAAAAKAAAAGgAAABkAAAAKAAAAGQAAADIAAAAKAAAAMgAA
ADoAAAAKAAAAOgAAAEAAAAAKAAAAQAAAADsAAAAKAAAAOwAAADUAAAAKAAAANQAAACsAAAAK
AAAAKwAAACoAAAAKAAAAKgAAACkAAAAKAAAAKQAAACgAAAAKAAAAKAAAACcAAAAKAAAAJwAA
ACYAAAAKAAAAJgAAACQAAAAKAAAAJAAAABMAAAAKAAAAEwAAABIAAAAKAAAAEgAAABEAAAAK
AAAAEQAAABAAAAAKAAAAEAAAAA8AAAAKAAAADwAAAA4AAAAKAAAADgAAAA0AAAAKAAAADQAA
AAwAAAAKAAAADAAAAAsAAAATAAAAJAAAABQAAAAUAAAAJQAAABUAAAAUAAAAJAAAACYAAAAU
AAAAJgAAACcAAAAUAAAAJwAAACgAAAAUAAAAKAAAACkAAAAUAAAAKQAAACoAAAAUAAAAKgAA
ACsAAAAUAAAAKwAAACUAAAAVAAAALAAAAC0AAAAVAAAAJQAAACwAAAAWAAAALQAAACwAAAAW
AAAALAAAABcAAAAXAAAALAAAAC4AAAAXAAAALgAAAC8AAAAXAAAALwAAADAAAAAXAAAAMAAA
ABgAAAAYAAAAMAAAADEAAAAYAAAAMQAAADIAAAAYAAAAMgAAABkAAAAlAAAAMwAAADQAAAAl
AAAANAAAACwAAAAlAAAAKwAAADUAAAAlAAAANQAAADMAAAAsAAAANAAAADYAAAAsAAAANgAA
AC4AAAAuAAAANgAAAC8AAAAvAAAANgAAADcAAAAvAAAANwAAADgAAAAvAAAAOAAAADAAAAAw
AAAAOAAAADkAAAAwAAAAOQAAAD0AAAAwAAAAPQAAADQAAAAwAAAANAAAADMAAAAwAAAAMwAA
ADwAAAAwAAAAPAAAAEAAAAAwAAAAQAAAADoAAAAwAAAAOgAAADEAAAAxAAAAOgAAADIAAAAz
AAAANQAAADsAAAAzAAAAOwAAADwAAAA0AAAAPQAAAD4AAAA0AAAAPgAAADYAAAA2AAAAPgAA
AD8AAAA2AAAAPwAAADcAAAA3AAAAPwAAAD4AAAA3AAAAPgAAADgAAAA4AAAAPgAAADkAAAA5
AAAAPgAAAD0AAAA7AAAAQAAAADwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAA
AAAAAAAAAIA/PAAAAAQAAAD//67B+nqvQIawaL///5XB+nqvQIawaL///67B+nqvQIawaD//
/67BPa7qQG0wFb///5XB+nqvQIawaD///5XBiwAqQYGaF7v//5XBiwAqQRTxCzv//67BPa7q
QMQkFT///67B9JMiQf8CrL35tajBTeclQargQb3kXZ7B6iEpQXxrQLzkXZ7B6iEpQSGBPTz5
tajBTeclQRMmQT3//67B9JMiQbOlqz3//67BXcMiQWXknr14Sa3B6sAjQTGnhL0rtKDBvpUo
QTGnhLwrtKDBvpUoQcaWOjx4Sa3Bm7YjQSGBPT3//67BLr0iQTGnhD1sAAAAAAAAAAEAAAAE
AAAAAAAAAAQAAAACAAAAAAAAAAIAAAAHAAAAAAAAAAcAAAANAAAAAAAAAA0AAAATAAAAAAAA
ABMAAAAOAAAAAAAAAA4AAAAIAAAAAAAAAAgAAAADAAAAAAAAAAMAAAABAAAAAQAAAAMAAAAF
AAAAAQAAAAUAAAAGAAAAAQAAAAYAAAAEAAAAAgAAAAQAAAAGAAAAAgAAAAYAAAAHAAAAAwAA
AAgAAAAFAAAABQAAAAgAAAAJAAAABQAAAAkAAAAKAAAABQAAAAoAAAALAAAABQAAAAsAAAAG
AAAABgAAAAsAAAAMAAAABgAAAAwAAAANAAAABgAAAA0AAAAHAAAACAAAAA4AAAAPAAAACAAA
AA8AAAAJAAAACQAAAA8AAAAMAAAACQAAAAwAAAARAAAACQAAABEAAAAQAAAACQAAABAAAAAK
AAAACgAAABAAAAARAAAACgAAABEAAAALAAAACwAAABEAAAAMAAAADAAAAA8AAAASAAAADAAA
ABIAAAATAAAADAAAABMAAAANAAAADgAAABMAAAAPAAAADwAAABMAAAASAAAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP3UAAAAEAAAAgALIwDQpiMAOJOA/gALI
wDXlt8AOJOA/gALIwOGFesDip9o///8Vwdz+acDip9o///8VwfdwgMAOJOA///8VwTXlt8AO
JOA/gALIwDXlt8AOJOC/gALIwOQ8Z8Dvrso///8VwQ+ZVsDvrso///8VwTXlt8AOJOC/gALI
wDQpiMAOJOC/gALIwHenVsCVO7E///8VwWzwRcCVO7E///8VwfdwgMAOJOC///8VwefLa8DA
Adu/gALIwEysesDip9q/gALIwFzvScAnD5A///8VwRslOcAnD5A///8VwUCuQcABOKY///8V
wcyGacC/sNm/gALIwBcidsAM7da/gALIwBXfR8AuGYY///8VwaEdMcCT41I///8VwbDSVsCA
2cm/gALIwIJeZ8Dvrsq/gALIwHzxQcCT41I/gALIwNcaQMD5CgA///8VweYjMMD5CgA///8V
wSG6RsCVO7G/gALIwGBkY8C7oMS/gALIwNcaQMD5CgC///8VweYjMMD5CgC///8VwZrbOcAn
D5C/gALIwHq/VsCVO7G/gALIwOX/QcCT41K///8VwYXKMcCT41K/gALIwF8HSsAnD5C///8V
wWpzOMBzWIm/gALIwOkTSMBytoa/3gAAAAAAAAABAAAABgAAAAAAAAAGAAAACgAAAAAAAAAK
AAAADwAAAAAAAAAPAAAAFAAAAAAAAAAUAAAAGAAAAAAAAAAYAAAAHQAAAAAAAAAdAAAAIQAA
AAAAAAAhAAAAJAAAAAAAAAAkAAAAJgAAAAAAAAAmAAAAIgAAAAAAAAAiAAAAHgAAAAAAAAAe
AAAAGgAAAAAAAAAaAAAAGQAAAAAAAAAZAAAAFQAAAAAAAAAVAAAAEAAAAAAAAAAQAAAACwAA
AAAAAAALAAAABwAAAAAAAAAHAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAE
AAAABQAAAAAAAAAFAAAAAQAAAAEAAAAFAAAACQAAAAEAAAAJAAAABgAAAAIAAAAHAAAACAAA
AAIAAAAIAAAAAwAAAAMAAAAIAAAADAAAAAMAAAAMAAAAEgAAAAMAAAASAAAAEQAAAAMAAAAR
AAAAFgAAAAMAAAAWAAAAGwAAAAMAAAAbAAAAHwAAAAMAAAAfAAAAIwAAAAMAAAAjAAAAJQAA
AAMAAAAlAAAAIAAAAAMAAAAgAAAAHAAAAAMAAAAcAAAAFwAAAAMAAAAXAAAAEwAAAAMAAAAT
AAAADgAAAAMAAAAOAAAADQAAAAMAAAANAAAACQAAAAMAAAAJAAAABQAAAAMAAAAFAAAABAAA
AAYAAAAJAAAADQAAAAYAAAANAAAACgAAAAcAAAALAAAADAAAAAcAAAAMAAAACAAAAAoAAAAO
AAAADwAAAAoAAAANAAAADgAAAAsAAAAQAAAAEQAAAAsAAAARAAAAEgAAAAsAAAASAAAADAAA
AA4AAAATAAAADwAAAA8AAAATAAAAFAAAABAAAAAVAAAAFgAAABAAAAAWAAAAEQAAABMAAAAX
AAAAGAAAABMAAAAYAAAAFAAAABUAAAAZAAAAFgAAABYAAAAZAAAAGgAAABYAAAAaAAAAGwAA
ABcAAAAcAAAAHQAAABcAAAAdAAAAGAAAABoAAAAeAAAAHwAAABoAAAAfAAAAGwAAABwAAAAg
AAAAIQAAABwAAAAhAAAAHQAAAB4AAAAiAAAAIwAAAB4AAAAjAAAAHwAAACAAAAAkAAAAIQAA
ACAAAAAlAAAAJAAAACIAAAAmAAAAIwAAACMAAAAmAAAAJAAAACMAAAAkAAAAJQAAABAAAAAA
AAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD+3AAAABAAAACAGrMHgTa8+fmLo
PyAGrMFTepE/wnXWP/R9u8HgTa8+fmLoPyAGrMHgTa8+fmLovyAGrMH6eq9AX6hoP9fRu8H6
eq9AX6hoP19svMHgTa8+rjPnPyAGrMH6eq9AX6hov/R9u8HgTa8+fmLov+LGvMH6eq9AdTNm
P0VVvcHgTa8+5rLjP9fRu8H6eq9AX6hov19svMHgTa8+rjPnv5y4vcH6eq9AA+xeP5QyvsHg
Ta8+b/fdP02fvsH6eq9AnwBTP3fCvMH6eq9AdTNmv2SsvMHgTa8+Gz/mv639vsHgTa8+lhjW
P/11v8H6eq9A3p9CP6WzvcH6eq9AA+xev0VVvcHgTa8+5rLjvwK2v8HgTa8+/iHMP+k5wMH6
eq9ADeEtP66YvsH6eq9AnwBTv5QyvsHgTa8+b/fdv4hAwMHgTa8+huXBP17OwMH6eq9AeZYY
P+javsH6eq9ANehNv639vsHgTa8+lhjWv5tsv8H6eq9A3p9Cv8aywMHgTa8+Pnq2P4tKwcH6
eq9A+9YAPwK2v8HgTa8+/iHMv98uwMH6eq9ADeEtv+akv8H6eq9A0rU8v/kJwcHgTa8+CSaq
PyCrwcH6eq9A2bnOPohAwMHgTa8+4dnBvzrCwMH6eq9AeZYYv4FVwMH6eq9Ad2sov602wcHg
Ta8+rWmgP1rtwcH6eq9AWtyYPhhhwMHgTa8+n6q+vzI8wcH6eq9ARu4Av3rfwMH6eq9AmAkT
v5RFwcHgTa8+ehedP0IMwsH6eq9A2KgCPsNswcHgTa8+QcGHP8aywMHgTa8+Pnq2v7hRwcH6
eq9A+B/3vkIMwsH6eq9A2KgCvhSAwcHgTa8++ZHsPpzLwMHgTa8+wRCzv6ybwcH6eq9Ab+jO
vszcwcH6eq9A8AqZvpRFwcHgTa8+ehedv8NswcHgTa8+QcGHvxSAwcHgTa8++ZHsvoYKwcHg
Ta8+Yxqqv16owcH6eq9ABonEvmIBAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAYAAAAAAAAABgAA
AAoAAAAAAAAACgAAAA4AAAAAAAAADgAAABIAAAAAAAAAEgAAABYAAAAAAAAAFgAAABoAAAAA
AAAAGgAAAB8AAAAAAAAAHwAAACQAAAAAAAAAJAAAACkAAAAAAAAAKQAAAC4AAAAAAAAALgAA
ADAAAAAAAAAAMAAAADQAAAAAAAAANAAAADoAAAAAAAAAOgAAADkAAAAAAAAAOQAAADgAAAAA
AAAAOAAAADsAAAAAAAAAOwAAADUAAAAAAAAANQAAADEAAAAAAAAAMQAAACsAAAAAAAAAKwAA
ACYAAAAAAAAAJgAAACEAAAAAAAAAIQAAAB0AAAAAAAAAHQAAABkAAAAAAAAAGQAAABUAAAAA
AAAAFQAAABEAAAAAAAAAEQAAAAwAAAAAAAAADAAAAAgAAAAAAAAACAAAAAMAAAAAAAAAAwAA
AAcAAAAAAAAABwAAAAQAAAAAAAAABAAAAAEAAAABAAAABAAAAAUAAAABAAAABQAAAAIAAAAC
AAAABQAAAAYAAAADAAAACAAAAAsAAAADAAAACwAAAAcAAAAEAAAABwAAAAsAAAAEAAAACwAA
ABAAAAAEAAAAEAAAABQAAAAEAAAAFAAAABgAAAAEAAAAGAAAABwAAAAEAAAAHAAAAB4AAAAE
AAAAHgAAACMAAAAEAAAAIwAAACIAAAAEAAAAIgAAACgAAAAEAAAAKAAAACcAAAAEAAAAJwAA
AC0AAAAEAAAALQAAACwAAAAEAAAALAAAADIAAAAEAAAAMgAAADYAAAAEAAAANgAAADwAAAAE
AAAAPAAAADcAAAAEAAAANwAAADMAAAAEAAAAMwAAAC8AAAAEAAAALwAAACoAAAAEAAAAKgAA
ACUAAAAEAAAAJQAAACAAAAAEAAAAIAAAABsAAAAEAAAAGwAAABcAAAAEAAAAFwAAABMAAAAE
AAAAEwAAAA8AAAAEAAAADwAAAA0AAAAEAAAADQAAAAkAAAAEAAAACQAAAAUAAAAFAAAACQAA
AAYAAAAGAAAACQAAAAoAAAAIAAAADAAAAAsAAAAJAAAADQAAAAoAAAAKAAAADQAAAA8AAAAK
AAAADwAAAA4AAAALAAAADAAAABAAAAAMAAAAEQAAABAAAAAOAAAADwAAABMAAAAOAAAAEwAA
ABIAAAAQAAAAEQAAABUAAAAQAAAAFQAAABQAAAASAAAAEwAAABcAAAASAAAAFwAAABYAAAAU
AAAAFQAAABkAAAAUAAAAGQAAABgAAAAWAAAAFwAAABsAAAAWAAAAGwAAABoAAAAYAAAAGQAA
ABwAAAAZAAAAHQAAAB4AAAAZAAAAHgAAABwAAAAaAAAAGwAAACAAAAAaAAAAIAAAAB8AAAAd
AAAAIQAAACIAAAAdAAAAIgAAACMAAAAdAAAAIwAAAB4AAAAfAAAAIAAAACUAAAAfAAAAJQAA
ACQAAAAhAAAAJgAAACcAAAAhAAAAJwAAACgAAAAhAAAAKAAAACIAAAAkAAAAJQAAACoAAAAk
AAAAKgAAACkAAAAmAAAAKwAAACwAAAAmAAAALAAAAC0AAAAmAAAALQAAACcAAAApAAAAKgAA
AC4AAAAqAAAALwAAADAAAAAqAAAAMAAAAC4AAAArAAAAMQAAACwAAAAsAAAAMQAAADIAAAAv
AAAAMwAAADoAAAAvAAAAOgAAADQAAAAvAAAANAAAADAAAAAxAAAANQAAADYAAAAxAAAANgAA
ADIAAAAzAAAANwAAADgAAAAzAAAAOAAAADkAAAAzAAAAOQAAADoAAAA1AAAAOwAAADYAAAA2
AAAAOwAAADwAAAA3AAAAPAAAADsAAAA3AAAAOwAAADgAAAAQAAAAAAAAAAAAAAAAAAAAAAAA
ABAAAAAAAAAAAAAAAAAAAAAAAIA/GwAAAAQAAAAAAJbB4E2vPn5i6D8GBazBU3qRP8J11j8G
BazB4E2vPn5i6D8AAJbB4E2vPn5i6L8AAJbB+nqvQF+oaD8GBazB+nqvQF+oaD8GBazB4E2v
Pn5i6L8AAJbB+nqvQF+oaL8GBazB+nqvQF+oaL8qAAAAAAAAAAEAAAACAAAAAAAAAAIAAAAG
AAAAAAAAAAYAAAADAAAAAAAAAAMAAAAHAAAAAAAAAAcAAAAEAAAAAAAAAAQAAAABAAAAAQAA
AAQAAAAFAAAAAQAAAAUAAAAIAAAAAQAAAAgAAAAGAAAAAQAAAAYAAAACAAAAAwAAAAYAAAAI
AAAAAwAAAAgAAAAHAAAABAAAAAcAAAAIAAAABAAAAAgAAAAFAAAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP3UAAAAEAAAA//9HwTXlt8CZNS3A//9HwV6oCcDx
ewTA//8VwR66a8Cy/Nq///8VwTxrgMB1AeC///8VwTXlt8B1AeC///9HwTXlt8CZNS1A//9H
we9mAMBfuADA//8VwbN/acDTstm///8VwTXlt8B1AeA///8VwTxrgMB1AeA///8VwRsigMAY
8N8///8VwWXtacDjpdo///9HwV6oCcDxewRA//9HwVwB+r9M+/2///8VwfTQVsA01Mm///9H
wZu+AsAdtAFA//8VwXOWVsCLpMo///9HwT0Dzr8ckeW///8VwbO7RsDvNbG///9HwQF/279m
P+4///8VwSbnUMBB9sE///9HwaSkwr+GxN0///9HwcLJtb83pdK///9HwcClqL+YxsK///8V
wdLgOcAZDJC///8VwT/2RcDvNbE///9HwS7nsb/32M4///9HwZT2n79zDqy///8VwTnLMcDw
x1K///9HwRytp79tXsI///8VwUmtQcD9J6Y///9HwUzol78QP2q///8VwbExMMDBCgC///8V
wf4pOcAZDJA///8VwTGJNsDWboM///8VwQYjMcDwx1I///9HwZT2n79zDqw///9HwcD2m78x
QZw+//8VwbExMMDBCgA/3gAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAA
AAAAAAAEAAAACAAAAAAAAAAIAAAABQAAAAAAAAAFAAAADAAAAAAAAAAMAAAADwAAAAAAAAAP
AAAAEwAAAAAAAAATAAAAFQAAAAAAAAAVAAAAGgAAAAAAAAAaAAAAHQAAAAAAAAAdAAAAJAAA
AAAAAAAkAAAAJQAAAAAAAAAlAAAAHwAAAAAAAAAfAAAAGwAAAAAAAAAbAAAAFwAAAAAAAAAX
AAAAFgAAAAAAAAAWAAAAEQAAAAAAAAARAAAADQAAAAAAAAANAAAABgAAAAAAAAAGAAAAAQAA
AAEAAAAGAAAABwAAAAEAAAAHAAAAAgAAAAIAAAAHAAAADgAAAAIAAAAOAAAAEgAAAAIAAAAS
AAAAGAAAAAIAAAAYAAAAHAAAAAIAAAAcAAAAIAAAAAIAAAAgAAAAJgAAAAIAAAAmAAAAIwAA
AAIAAAAjAAAAIgAAAAIAAAAiAAAAIQAAAAIAAAAhAAAAHgAAAAIAAAAeAAAAGQAAAAIAAAAZ
AAAAFAAAAAIAAAAUAAAAEAAAAAIAAAAQAAAACwAAAAIAAAALAAAACgAAAAIAAAAKAAAACQAA
AAIAAAAJAAAACAAAAAIAAAAIAAAABAAAAAIAAAAEAAAAAwAAAAUAAAAIAAAACQAAAAUAAAAJ
AAAACgAAAAUAAAAKAAAACwAAAAUAAAALAAAADAAAAAYAAAANAAAADgAAAAYAAAAOAAAABwAA
AAsAAAAPAAAADAAAAAsAAAAQAAAADwAAAA0AAAARAAAADgAAAA4AAAARAAAAEgAAAA8AAAAQ
AAAAEwAAABAAAAAUAAAAFQAAABAAAAAVAAAAEwAAABEAAAAWAAAAEgAAABIAAAAWAAAAFwAA
ABIAAAAXAAAAGAAAABQAAAAZAAAAFQAAABUAAAAZAAAAGgAAABcAAAAbAAAAHAAAABcAAAAc
AAAAGAAAABkAAAAdAAAAGgAAABkAAAAeAAAAHQAAABsAAAAfAAAAHAAAABwAAAAfAAAAIAAA
AB0AAAAeAAAAIQAAAB0AAAAhAAAAIgAAAB0AAAAiAAAAIwAAAB0AAAAjAAAAJAAAAB8AAAAl
AAAAJgAAAB8AAAAmAAAAIAAAACMAAAAmAAAAJAAAACQAAAAmAAAAJQAAABAAAAAAAAAAAAAA
AAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9sAAAABAAAAAEFyMDc6LfATB7gP/7/x8A+
1xDBTB7gP/7/x8ATrh7B2EixPwEFyMBW5iTBAMgqOvG9Q8Hc6LfAAMgqOv//R8Hc6LfAOy0t
QP//R8GBUAjBeJRMQP//R8HVWBTBwAtVQAEFyMAc7RHBCv7ePwEFyMCDsBXBtafaPwEFyMAg
hhrBX7nKP286RsH2NRbBre9OQCftRMFYuxfB7l1HQAEFyMBm3SHBNCGQPwEFyMBE3SPB8gVT
PwEFyMDGwSTBjKERPwEFyMBW5iTB3DIAP6rK6MCoAyTBAMgqOv//R8EdzxzBAMgqOv//R8E5
fxTBrrtUQOfXR8FlfRTBrrtUQP//R8E+SBbBaTpPQP//R8FaXBbBWvpOQNlqRMHfXxjB6OxC
QP//R8Fc8BfBVKNHQP//R8EgCBjB4B1HQP//R8ErpxjB9BxDQP//R8H2KBnB+Ns+QP//R8Hm
PhnBIyE+QP//R8FCcBnBBCY8QP//R8FRzxnBX+o3QP//R8EhERrBCpQzQKrK6MCoAyTB3DIA
P///R8HBHxrBXh4yQP//R8EdzxzBDVY8P///R8GysxzBKHOBP8wAAAAAAAAAAQAAAAIAAAAA
AAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAAYAAAAAAAAABgAA
AAcAAAAAAAAABwAAAAEAAAABAAAACAAAAAkAAAABAAAACQAAAAoAAAABAAAACgAAAAIAAAAB
AAAABwAAAAgAAAACAAAACgAAAAsAAAACAAAACwAAAAwAAAACAAAADAAAAA0AAAACAAAADQAA
AA4AAAACAAAADgAAAA8AAAACAAAADwAAABAAAAACAAAAEAAAAAMAAAADAAAAEAAAACAAAAAD
AAAAIAAAABEAAAADAAAAEQAAABIAAAADAAAAEgAAAAQAAAAEAAAAEgAAAAUAAAAFAAAAEgAA
ACIAAAAFAAAAIgAAACMAAAAFAAAAIwAAACEAAAAFAAAAIQAAAB8AAAAFAAAAHwAAAB4AAAAF
AAAAHgAAAB0AAAAFAAAAHQAAABwAAAAFAAAAHAAAABsAAAAFAAAAGwAAABoAAAAFAAAAGgAA
ABkAAAAFAAAAGQAAABgAAAAFAAAAGAAAABYAAAAFAAAAFgAAABUAAAAFAAAAFQAAABMAAAAF
AAAAEwAAAAcAAAAFAAAABwAAAAYAAAAHAAAAEwAAABQAAAAHAAAAFAAAAAkAAAAHAAAACQAA
AAgAAAAJAAAAFAAAAAoAAAAKAAAAFAAAAAsAAAALAAAAFAAAABUAAAALAAAAFQAAABYAAAAL
AAAAFgAAAAwAAAAMAAAAFwAAAA0AAAAMAAAAFgAAABgAAAAMAAAAGAAAABkAAAAMAAAAGQAA
ABoAAAAMAAAAGgAAABcAAAANAAAAFwAAABoAAAANAAAAGgAAABsAAAANAAAAGwAAABwAAAAN
AAAAHAAAAA4AAAAOAAAAHAAAAB0AAAAOAAAAHQAAAB4AAAAOAAAAHgAAAB8AAAAOAAAAHwAA
AA8AAAAPAAAAIAAAABAAAAAPAAAAHwAAACEAAAAPAAAAIQAAACAAAAARAAAAIAAAACIAAAAR
AAAAIgAAABIAAAATAAAAFQAAABQAAAAgAAAAIQAAACMAAAAgAAAAIwAAACIAAAAQAAAAAAAA
AAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/bwAAAAQAAAACBcjANuW3wEwe4L+L
u0PBNuW3wADIKroCBcjAV+YkwQDIKroCBcjAPtcQwUwe4L///0fB1lgUwcALVcD//0fBglAI
wXiUTMD//0fBNuW3wDstLcD//0fBHs8cwQDIKrrayejAqAMkwQDIKroCBcjAV+YkwdwyAL8C
BcjAKiAUwY3d3L8CBcjAtOMVwcTn2r8CBcjAFwoWwbWn2r/o10fBZn0Uwa67VMD//0fBOn8U
wa67VMD//0fBHs8cwS6eX7/ayejAqAMkwdwyAL8CBcjAq60kwUUpM78CBcjAieEawV+5yr//
/0fBP0gWwWk6T8B6OkbB9zUWwa3vTsD//0fBBnscwd4Bk7///0fBwh8awV4eMsACBcjAVDwk
wfIFU7///0fBIhEawQqUM8ACBcjAewkfwdhIsb///0fBW1wWwVr6TsC56kTBWbsXwe5dR8AC
BcjAozoiwTQhkL///0fBUs8ZwV/qN8D//0fB5z4ZwSMhPsD//0fBxdYXwRseSMDwakTB4F8Y
wejsQsD//0fBLKcYwfQcQ8D//0fBIQgYweAdR8D//0fBXfAXwVSjR8D//0fB9ygZwfjbPsDS
AAAAAAAAAAEAAAACAAAAAAAAAAIAAAAJAAAAAAAAAAkAAAARAAAAAAAAABEAAAAXAAAAAAAA
ABcAAAAcAAAAAAAAABwAAAAZAAAAAAAAABkAAAASAAAAAAAAABIAAAAMAAAAAAAAAAwAAAAL
AAAAAAAAAAsAAAAKAAAAAAAAAAoAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAAFAAAAAAAA
AAUAAAAGAAAAAAAAAAYAAAABAAAAAQAAAAYAAAAHAAAAAQAAAAcAAAAIAAAAAQAAAAgAAAAC
AAAAAgAAAAgAAAAQAAAAAgAAABAAAAAJAAAAAwAAAAoAAAAEAAAABAAAAAoAAAALAAAABAAA
AAsAAAAMAAAABAAAAAwAAAANAAAABAAAAA0AAAAOAAAABAAAAA4AAAATAAAABAAAABMAAAAa
AAAABAAAABoAAAAfAAAABAAAAB8AAAAjAAAABAAAACMAAAAiAAAABAAAACIAAAAhAAAABAAA
ACEAAAAkAAAABAAAACQAAAAeAAAABAAAAB4AAAAdAAAABAAAAB0AAAAYAAAABAAAABgAAAAW
AAAABAAAABYAAAAVAAAABAAAABUAAAAPAAAABAAAAA8AAAAHAAAABAAAAAcAAAAGAAAABAAA
AAYAAAAFAAAABwAAAA8AAAAQAAAABwAAABAAAAAIAAAACQAAABAAAAARAAAADAAAABIAAAAN
AAAADQAAABMAAAAOAAAADQAAABIAAAAUAAAADQAAABQAAAATAAAADwAAABUAAAAQAAAAEAAA
ABUAAAAWAAAAEAAAABYAAAARAAAAEQAAABYAAAAYAAAAEQAAABgAAAAXAAAAEgAAABkAAAAU
AAAAEwAAABQAAAAaAAAAFAAAABkAAAAbAAAAFAAAABsAAAAaAAAAFwAAABgAAAAdAAAAFwAA
AB0AAAAeAAAAFwAAAB4AAAAcAAAAGQAAABwAAAAbAAAAGgAAABsAAAAfAAAAGwAAACAAAAAh
AAAAGwAAACEAAAAiAAAAGwAAACIAAAAjAAAAGwAAACMAAAAfAAAAGwAAABwAAAAgAAAAHAAA
AB4AAAAkAAAAHAAAACQAAAAhAAAAHAAAACEAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQ
AAAAAAAAAAAAAAAAAAAAAACAP1wBAAAEAAAAUD2wwQLUlsAOPS3AF/iUwRDYlsAOPS3AIkCs
wTTHAsGMTVTATdK9wRDYlsAOPS3AO3K+wRDYlsA85SzAe9q+wRDYlsDhnSzAJ8y/wRDYlsDO
2yrAy7DAwRDYlsBW8SfA8/HAwRDYlsD3vSbACIbBwRDYlsBu9CPADk3CwRDYlsAhzx7A93LC
wRDYlsBLix3AguPCwRDYlsDgkxnAFWHDwRDYlsDqyRPAacPDwRDYlsAukg3ATgnEwRDYlsAi
/QbAOg/EwRDYlsBpggXAnT7EwRDYlsAjXae/DzvEwRDYlsAAAAAAF/iUwb4ZHMEAAAAAF/iU
wapj+8Bws1DA4b21wY9b+8Bws1DAF/iUwUtKC8HoSFrA5vKYwfdQCsFEmVnAxaSiwagBB8H+
QlfAkq2owa5tBsEMNlbARxa6wQF50MDlikHA9UK9wRcFpMCg3jHAxPu9wW43qMAsujLACd6+
wbwuqcBtSjHA1La/wTIyqsBEvS7ACX/AwdJBq8CrHSvABznBwY5ZrMArWybAc8LBwcBIrcC8
dyHA/jLCweQzrsCd+hvA2IvCwdAOr8A8ChbAE8fCwXbVr8AOtw/AnurCwfvcsMCdHwXA07LD
wVeOpcBG6oK/07LDwcZEpsAAAAAAOmCWwefaG8EAAAAAF/iUwXJOHMGQWwK/YY62wX4k/8C5
G1HAmyS5wYxo5cDUVkjAF/iUwdg0DcEDCVvAk5CYwfJbDMFaZFrAvrGYwXFCDsEc5lnAEeSo
wRFMCMHUrFXAWB68wQGZw8AWazzAbv+8wSzRxMBRBjvA29W9wVYJxsCfiTjAU5m+wZ1Jx8B4
BTXAw0+/wQ2WyMD4QjDAANi/wbupycCDaivALEbAwUCxysDi8iXAp5zAwWOcy8D9ByDAtNbA
wU93zMBMuhnAqi/AwdT02sAGuZC/qi/AwXu728AAAAAAguPCwRinssAAAAAAOmCWwY0LHMGc
RQK/Q3iowRh5FcEAAAAAQ3iowcytFcHsZf++F/iUwQjYGcFJLSXAlla3wb14AcFm0k/AZv25
waPl5sD+EkfAF/iUwXklD8FIhVrAF/iUweoHEcGs01jA6tKYwcYcEMGFKVjAAhepwVEgCsG6
9VPAt8y6wbli6MDDpkTA0Y27wc/f6cCWLUHAhD+8wQFl68CIhjzA1MG8wUil7MCQszfAoi29
wS3J7cBmTDLAj4C9wc7Y7sAEXCzAbLm9wdW778BTDibAOSy/wVIA48BunhbARh27wRYiB8EX
7p2/Rh27wYyPB8EAAAAAOmCWwUafGcHLTSLADW6kwdKDFMGPLi7A2HKZwbNIGMEq1zDA6tmu
wdYtEsEAAAAA9AC6wQAVDMEAAAAA9AC6wQAVDMEfo16/dUqvwRKdD8FitSrAQ3iowadLE8Hz
Jh/AF/iUwVNYGcFFlzHA8xK4wRlVA8GCwUzAF/iUwQfSEsEu9FXAiPCYwc/gEcGKRFXABkSp
wT7cC8FCC1HALLu4wRQVBcF/BEjAx0W5wXeoBsHUq0HANq+5wfX4B8Hn6DnAL++5wVD0CMGQ
CDHA9AC6wVeMCcEYcyfA9AC6wYGYCcEfcSbADsK6wdMaCcEAoK+5A0eZwZCoF8EYdDvAtcip
wciTEcFYKjfAF/iUwWERGcHuDDbAF/iUwcR/FMFX1lHAxwuZwXaIE8G0JlHArG6pwd+BDcHu
50zAeY2pwUjMDsHIbEjAiaepwSDsD8GCPEPArbupwUrZEMGMcj3AuD6ZwQvsFsHOtkHAF/iU
wYnxF8Hva0LAF/iUwQasGMG2LjzAF/iUwVDUFcEsZk3AGiGZwe7WFMGOq0zAsDGZwdr8FcFB
hkfAF/iUwUP8FsFiO0jArAIAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAA
AAAAAAAEAAAABQAAAAAAAAAFAAAABgAAAAAAAAAGAAAABwAAAAAAAAAHAAAACAAAAAAAAAAI
AAAACQAAAAAAAAAJAAAACgAAAAAAAAAKAAAACwAAAAAAAAALAAAADAAAAAAAAAAMAAAADQAA
AAAAAAANAAAADgAAAAAAAAAOAAAADwAAAAAAAAAPAAAAEAAAAAAAAAAQAAAAEQAAAAAAAAAR
AAAAEgAAAAAAAAASAAAAAQAAAAEAAAATAAAAKQAAAAEAAAApAAAAPwAAAAEAAAA/AAAAWAAA
AAEAAABYAAAAZgAAAAEAAABmAAAAbwAAAAEAAABvAAAAbgAAAAEAAABuAAAAcwAAAAEAAABz
AAAAcAAAAAEAAABwAAAAZwAAAAEAAABnAAAAWgAAAAEAAABaAAAAQwAAAAEAAABDAAAAQgAA
AAEAAABCAAAALAAAAAEAAAAsAAAAFgAAAAEAAAAWAAAAFAAAAAEAAAAUAAAAAgAAAAEAAAAS
AAAAEwAAAAIAAAAVAAAAAwAAAAIAAAAUAAAAFgAAAAIAAAAWAAAAFwAAAAIAAAAXAAAAGAAA
AAIAAAAYAAAAGQAAAAIAAAAZAAAAFQAAAAMAAAAaAAAAGwAAAAMAAAAbAAAABAAAAAMAAAAV
AAAAGgAAAAQAAAAbAAAAHAAAAAQAAAAcAAAABQAAAAUAAAAcAAAABgAAAAYAAAAcAAAAHQAA
AAYAAAAdAAAAHgAAAAYAAAAeAAAABwAAAAcAAAAeAAAACAAAAAgAAAAeAAAAHwAAAAgAAAAf
AAAACQAAAAkAAAAfAAAAIAAAAAkAAAAgAAAACgAAAAoAAAAgAAAACwAAAAsAAAAgAAAAIQAA
AAsAAAAhAAAADAAAAAwAAAAhAAAADQAAAA0AAAAhAAAAIgAAAA0AAAAiAAAAIwAAAA0AAAAj
AAAADgAAAA4AAAAjAAAADwAAAA8AAAAjAAAAJAAAAA8AAAAkAAAAJQAAAA8AAAAlAAAAEAAA
ABAAAAAlAAAAJgAAABAAAAAmAAAAEQAAABEAAAAmAAAAJwAAABEAAAAnAAAAEgAAABIAAAAn
AAAAOwAAABIAAAA7AAAAOgAAABIAAAA6AAAATwAAABIAAABPAAAAVAAAABIAAABUAAAAUwAA
ABIAAABTAAAAPQAAABIAAAA9AAAAKAAAABIAAAAoAAAAEwAAABMAAAAoAAAAKQAAABUAAAAZ
AAAAKgAAABUAAAAqAAAAKwAAABUAAAArAAAAGgAAABYAAAAsAAAAFwAAABcAAAAsAAAALQAA
ABcAAAAtAAAAGAAAABgAAAAtAAAAGQAAABkAAAAtAAAALgAAABkAAAAuAAAALwAAABkAAAAv
AAAAKgAAABoAAAAwAAAAGwAAABoAAAArAAAAMAAAABsAAAAwAAAAHAAAABwAAAAwAAAAHQAA
AB0AAAAwAAAAMQAAAB0AAAAxAAAAMgAAAB0AAAAyAAAAHgAAAB4AAAAyAAAAMwAAAB4AAAAz
AAAAHwAAAB8AAAAzAAAAIAAAACAAAAAzAAAANAAAACAAAAA0AAAANQAAACAAAAA1AAAAIQAA
ACEAAAA1AAAAIgAAACIAAAA1AAAANgAAACIAAAA2AAAAIwAAACMAAAA2AAAANwAAACMAAAA3
AAAAOAAAACMAAAA4AAAAJAAAACQAAAA4AAAAJQAAACUAAAA4AAAAOQAAACUAAAA5AAAAOgAA
ACUAAAA6AAAAOwAAACUAAAA7AAAAJwAAACUAAAAnAAAAJgAAACgAAAA8AAAAKQAAACgAAAA9
AAAAPgAAACgAAAA+AAAAPAAAACkAAAA8AAAAPwAAACoAAABAAAAAQQAAACoAAABBAAAAKwAA
ACoAAAAvAAAAQAAAACsAAABBAAAAMAAAACwAAABCAAAALgAAACwAAAAuAAAALQAAAC4AAABC
AAAAQwAAAC4AAABDAAAARAAAAC4AAABEAAAARQAAAC4AAABFAAAALwAAAC8AAABFAAAAQAAA
ADAAAABBAAAAMQAAADEAAABBAAAAMgAAADIAAABBAAAARgAAADIAAABGAAAARwAAADIAAABH
AAAAMwAAADMAAABHAAAASAAAADMAAABIAAAANAAAADQAAABIAAAANQAAADUAAABIAAAASQAA
ADUAAABJAAAASgAAADUAAABKAAAANgAAADYAAABKAAAANwAAADcAAABKAAAASwAAADcAAABL
AAAAOAAAADgAAABLAAAATAAAADgAAABMAAAATQAAADgAAABNAAAAOQAAADkAAABNAAAATgAA
ADkAAABOAAAATwAAADkAAABPAAAAOgAAADwAAABQAAAAPwAAADwAAAA+AAAAUQAAADwAAABR
AAAAUgAAADwAAABSAAAAUAAAAD0AAABTAAAAPgAAAD4AAABTAAAAVAAAAD4AAABUAAAAVQAA
AD4AAABVAAAAVgAAAD4AAABWAAAAVwAAAD4AAABXAAAAUQAAAD8AAABQAAAAWAAAAEAAAABZ
AAAARgAAAEAAAABGAAAAQQAAAEAAAABFAAAAWQAAAEMAAABaAAAAWwAAAEMAAABbAAAARAAA
AEQAAABbAAAARQAAAEUAAABcAAAAWQAAAEUAAABbAAAAXAAAAEYAAABZAAAARwAAAEcAAABZ
AAAAXQAAAEcAAABdAAAASAAAAEgAAABdAAAASQAAAEkAAABdAAAAXgAAAEkAAABeAAAASgAA
AEoAAABeAAAAXwAAAEoAAABfAAAASwAAAEsAAABfAAAAYAAAAEsAAABgAAAATAAAAEwAAABg
AAAAYQAAAEwAAABhAAAAYgAAAEwAAABiAAAATQAAAE0AAABiAAAATgAAAE4AAABiAAAAVQAA
AE4AAABVAAAATwAAAE8AAABVAAAAYwAAAE8AAABjAAAAVAAAAFAAAABSAAAAWAAAAFEAAABk
AAAAUgAAAFEAAABXAAAAVgAAAFEAAABWAAAAZQAAAFEAAABlAAAAZAAAAFIAAABkAAAAZgAA
AFIAAABmAAAAWAAAAFQAAABjAAAAVQAAAFUAAABiAAAAVgAAAFYAAABgAAAAZQAAAFYAAABi
AAAAYQAAAFYAAABhAAAAYAAAAFkAAABcAAAAXQAAAFoAAABnAAAAaAAAAFoAAABoAAAAWwAA
AFsAAABoAAAAaQAAAFsAAABpAAAAXAAAAFwAAABpAAAAXQAAAF0AAABpAAAAagAAAF0AAABq
AAAAXgAAAF4AAABqAAAAawAAAF4AAABrAAAAXwAAAF8AAABrAAAAbAAAAF8AAABsAAAAYAAA
AGAAAABsAAAAZQAAAGQAAABtAAAAbgAAAGQAAABuAAAAbwAAAGQAAABvAAAAZgAAAGQAAABl
AAAAbAAAAGQAAABsAAAAbQAAAGcAAABwAAAAaAAAAGgAAABwAAAAcQAAAGgAAABxAAAAagAA
AGgAAABqAAAAaQAAAGoAAABxAAAAcgAAAGoAAAByAAAAawAAAGsAAAByAAAAbAAAAGwAAABy
AAAAbQAAAG0AAAByAAAAbgAAAG4AAAByAAAAcwAAAHAAAABzAAAAcgAAAHAAAAByAAAAcQAA
ABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9iAQAABAAAAEb5lMEE
1JbADj0tQEu9tcElWfvAcLNQQN8/rMGpyALBjE1UQEb5lMHQlP/AKS5SQEb5lMFxGBzBAAAA
AJs6xMEE1JbAAAAAAHPSvcEE1JbADj0tQCUjucGzbOXA1FZIQK+MtsGYI//AuRtRQCyuqMGy
bAbBDDZWQOcUusH2etDA5YpBQNOkosFPAgfB/kJXQELzmMFuUQrBRJlZQEb5lMEcSgvB6Eha
QEb5lMG+ehvBdlLDP4phlsESPBvBhzHDP10AlsHx6RvBAAAAAFKyw8GaRqbAAAAAABZExMEE
1JbAeZVlPxFwvsEE1JbAPOUsQN9BvcFsCKTAoN4xQFcevMF4m8PAFms8QGP+ucHA5ObA/hJH
QCZWt8ELeQHBZtJPQIHjqMHWSQjB1KxVQESzmMFMQg7BHOZZQOaQmMESXQzBWmRaQEb5lMFm
NQ3BAwlbQEb5lMHqLRvBoJTfP4phlsG/1xvBAAAAAG90mcHtRxjBKtcwQHRvpMGKgxTBjy4u
QKl3qMGK4BTBiGC/PyT5msFOOxrBAAAAAFKyw8FCg6bAVJyuPgcwwMECvtvAAAAAAAcwwMG/
AtzAhE7BPlKyw8GCs6PAqsrZPyAxxMEE1JbAe/PdP7navsEE1JbA4Z0sQL76vcH2N6jALLoy
QEfevsGeLqnAbUoxQIH/vMHHzsTAUQY7QNLUvcE4DsbAn4k4QMfNusHYYOjAw6ZEQJQSuMEv
VgPBgsFMQHYWqcHjHgrBuvVTQHPUmMFkGxDBhSlYQEb5lMHqBRHBrNNYQEb5lMG2Ig/BSIVa
QEb5lMHYVhnBRZcxQGdHmcEvphfBGHQ7QEb5lMH+qhjBti48QDnIqcFrkRHBWCo3QEpJr8EK
ng/BYrUqQBPbrsEYLRLBAAAAAKl3qMEseBXBAAAAAPEBusFEEgzBH6NePwvqwsHe47DAnR8F
QP4bu8HVjwfBAAAAAP4bu8E5tAfBVM3SPn8sv8EKAuPAbp4WQAcwwMEr5tjAn7vwP8IOxMEE
1JbAaYIFQBzKv8EE1JbAztsqQCa3v8FyNarARL0uQIuZvsGoTcfAeAU1QJOMu8H74OnAli1B
QKy5uMH/FAXBfwRIQK5EqcGt2wvBQgtRQBPymME/3hHBikRVQEb5lMH3IBLBGwxXQBs/mcEu
7BbBzrZBQDC7qcFw2RDBjHI9QEb5lMEqXhjBXME+QPvuucGq8wjBkAgxQPEBusFSjQnBGHMn
QPEBusFolQnBH3EmQPEBusFEEgzBAAAAAP4bu8GLAQbBAW4DQO3BusEZHAnBAAAAAH3GwsHo
0K/ADrcPQNUIxMEE1JbAIv0GQPDVwMHbc8zATLoZQJC5vcEuwe/AUw4mQASwwMEE1JbAVvEn
QDLxwMEE1JbA970mQG5/wMFdRKvAKCMrQE04wcFqX6zAK1smQAxQv8E7mcjA+EIwQFY+vMEp
ZevAiIY8QINFucFUpwbB1KtBQCiOqcHHyw7ByGxIQFhvqcE0gA3B7udMQOLBvMGapOzAkLM3
QFUNmcHXiBPBtCZRQEb5lMHWzhLBLvRVQEb5lMH47hfB72tCQEb5lMFb/BbBYjtIQBIymcGX
+xXBQYZHQDqoqcHe6g/BgjxDQM2tucHx9gfB5+g5QK6AvcGo1u7ABFwsQDyLwsHGCq/APAoW
QN+bwMGXocvA/QcgQOrCw8EE1JbALpINQFWFwcEE1JbAbvQjQJxNwsEE1JbAIc8eQMXBwcH7
Ta3AvHchQCbXv8ExrMnAg2orQLktvcHIy+3AZkwyQHohmcF02BTBjqtMQItGwMH6rsrA4vIl
QEb5lMEt1RXBLGZNQEb5lMGEgRTBV9ZRQIozwsF3NK7AnfobQI1gw8EE1JbA6skTQO7iwsEE
1JbA4JMZQLgCAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAA0AAAAAAAAADQAA
ABsAAAAAAAAAGwAAADEAAAAAAAAAMQAAADAAAAAAAAAAMAAAAEcAAAAAAAAARwAAAGAAAAAA
AAAAYAAAAHIAAAAAAAAAcgAAAHEAAAAAAAAAcQAAAGIAAAAAAAAAYgAAAGEAAAAAAAAAYQAA
AEoAAAAAAAAASgAAADQAAAAAAAAANAAAADIAAAAAAAAAMgAAABwAAAAAAAAAHAAAAA4AAAAA
AAAADgAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAABIAAAAAAAAAEgAAACYAAAAAAAAAJgAA
AD8AAAAAAAAAPwAAAFIAAAAAAAAAUgAAAGkAAAAAAAAAaQAAAHQAAAAAAAAAdAAAAHUAAAAA
AAAAdQAAAGsAAAAAAAAAawAAAGoAAAAAAAAAagAAAFYAAAAAAAAAVgAAAFUAAAAAAAAAVQAA
AEAAAAAAAAAAQAAAACcAAAAAAAAAJwAAABMAAAAAAAAAEwAAAAYAAAAAAAAABgAAAAEAAAAB
AAAABwAAAAgAAAABAAAACAAAAAkAAAABAAAACQAAAAIAAAABAAAABgAAAAoAAAABAAAACgAA
AAcAAAACAAAACQAAAAsAAAACAAAACwAAAAwAAAACAAAADAAAAA0AAAACAAAADQAAAAMAAAAE
AAAADgAAAA8AAAAEAAAADwAAABAAAAAEAAAAEAAAAB0AAAAEAAAAHQAAACEAAAAEAAAAIQAA
ADgAAAAEAAAAOAAAADcAAAAEAAAANwAAAE4AAAAEAAAATgAAAFAAAAAEAAAAUAAAADsAAAAE
AAAAOwAAACMAAAAEAAAAIwAAABEAAAAEAAAAEQAAAAUAAAAFAAAAEQAAABIAAAAGAAAAEwAA
ABQAAAAGAAAAFAAAAAoAAAAHAAAACgAAABUAAAAHAAAAFQAAABYAAAAHAAAAFgAAAAgAAAAI
AAAAFgAAABcAAAAIAAAAFwAAABgAAAAIAAAAGAAAAAkAAAAJAAAAGAAAABkAAAAJAAAAGQAA
ABoAAAAJAAAAGgAAAAsAAAAKAAAAFAAAABUAAAALAAAAGgAAAAwAAAAMAAAAGgAAABsAAAAM
AAAAGwAAAA0AAAAOAAAAHAAAAA8AAAAPAAAAHQAAABAAAAAPAAAAHAAAAB4AAAAPAAAAHgAA
AB8AAAAPAAAAHwAAACAAAAAPAAAAIAAAACEAAAAPAAAAIQAAAB0AAAARAAAAIgAAABIAAAAR
AAAAIwAAACQAAAARAAAAJAAAACIAAAASAAAAIgAAACUAAAASAAAAJQAAACYAAAATAAAAJwAA
ACgAAAATAAAAKAAAABQAAAAUAAAAKAAAABUAAAAVAAAAKAAAACkAAAAVAAAAKQAAACoAAAAV
AAAAKgAAABYAAAAWAAAAKgAAACsAAAAWAAAAKwAAACwAAAAWAAAALAAAABcAAAAXAAAALQAA
AC4AAAAXAAAALgAAABgAAAAXAAAALAAAAC0AAAAYAAAALgAAABkAAAAZAAAALwAAADAAAAAZ
AAAAMAAAADEAAAAZAAAAMQAAABsAAAAZAAAAGwAAABoAAAAZAAAALgAAAC8AAAAcAAAAMgAA
AB4AAAAeAAAAMwAAAB8AAAAeAAAAMgAAADQAAAAeAAAANAAAADMAAAAfAAAAMwAAADUAAAAf
AAAANQAAADYAAAAfAAAANgAAACAAAAAgAAAANwAAADgAAAAgAAAAOAAAACEAAAAgAAAANgAA
ADkAAAAgAAAAOQAAADcAAAAiAAAAOgAAACUAAAAiAAAAJAAAADoAAAAjAAAAOwAAACQAAAAk
AAAAPAAAAD0AAAAkAAAAPQAAAD4AAAAkAAAAPgAAADoAAAAkAAAAOwAAADwAAAAlAAAAOgAA
AD8AAAAlAAAAPwAAACYAAAAnAAAAQAAAACgAAAAoAAAAQAAAACkAAAApAAAAQQAAACoAAAAp
AAAAQAAAAEEAAAAqAAAAQQAAACsAAAArAAAAQQAAAEIAAAArAAAAQgAAACwAAAAsAAAAQgAA
AEMAAAAsAAAAQwAAAC0AAAAtAAAARAAAAEUAAAAtAAAARQAAAC4AAAAtAAAAQwAAAEQAAAAu
AAAARQAAAEYAAAAuAAAARgAAAC8AAAAvAAAARgAAADAAAAAwAAAARgAAAEcAAAAzAAAASAAA
AEkAAAAzAAAASQAAADUAAAAzAAAANAAAAEoAAAAzAAAASgAAAEgAAAA1AAAASQAAAEsAAAA1
AAAASwAAADYAAAA2AAAASwAAAEwAAAA2AAAATAAAAE0AAAA2AAAATQAAADkAAAA3AAAAOQAA
AE4AAAA5AAAATQAAAE8AAAA5AAAATwAAADwAAAA5AAAAPAAAAFAAAAA5AAAAUAAAAE4AAAA6
AAAAUQAAAFIAAAA6AAAAUgAAAD8AAAA6AAAAPgAAAFMAAAA6AAAAUwAAAFEAAAA7AAAAUAAA
ADwAAAA8AAAATwAAAD0AAAA9AAAATwAAAFQAAAA9AAAAVAAAAFMAAAA9AAAAUwAAAD4AAABA
AAAAVQAAAEEAAABBAAAAVQAAAFYAAABBAAAAVgAAAFcAAABBAAAAVwAAAEIAAABCAAAAVwAA
AFgAAABCAAAAWAAAAFkAAABCAAAAWQAAAFoAAABCAAAAWgAAAEMAAABDAAAAWgAAAEQAAABE
AAAAWwAAAFwAAABEAAAAXAAAAF0AAABEAAAAXQAAAEUAAABEAAAAWgAAAF4AAABEAAAAXgAA
AFsAAABFAAAAXQAAAF8AAABFAAAAXwAAAEYAAABGAAAAXwAAAGAAAABGAAAAYAAAAEcAAABI
AAAASgAAAGEAAABIAAAAYQAAAGIAAABIAAAAYgAAAGMAAABIAAAAYwAAAEkAAABJAAAAYwAA
AGQAAABJAAAAZAAAAGUAAABJAAAAZQAAAEsAAABLAAAAZQAAAGYAAABLAAAAZgAAAFQAAABL
AAAAVAAAAEwAAABMAAAAVAAAAE8AAABMAAAATwAAAE0AAABRAAAAZwAAAFIAAABRAAAAUwAA
AGgAAABRAAAAaAAAAGcAAABSAAAAZwAAAGkAAABTAAAAVAAAAGgAAABUAAAAZgAAAGgAAABW
AAAAagAAAFcAAABXAAAAagAAAGsAAABXAAAAawAAAFgAAABYAAAAawAAAGwAAABYAAAAbAAA
AFkAAABZAAAAbAAAAG0AAABZAAAAbQAAAFoAAABaAAAAbQAAAF4AAABbAAAAZQAAAGQAAABb
AAAAZAAAAFwAAABbAAAAXgAAAG4AAABbAAAAbgAAAGUAAABcAAAAYwAAAG8AAABcAAAAbwAA
AF8AAABcAAAAXwAAAF0AAABcAAAAZAAAAGMAAABeAAAAbQAAAHAAAABeAAAAcAAAAG4AAABf
AAAAbwAAAHEAAABfAAAAcQAAAHIAAABfAAAAcgAAAGAAAABiAAAAcQAAAGMAAABjAAAAcQAA
AG8AAABlAAAAbgAAAGYAAABmAAAAbgAAAGgAAABnAAAAaAAAAHAAAABnAAAAcAAAAHMAAABn
AAAAcwAAAGkAAABoAAAAbgAAAHAAAABpAAAAcwAAAHQAAABrAAAAdQAAAGwAAABsAAAAdQAA
AHQAAABsAAAAdAAAAHMAAABsAAAAcwAAAG0AAABtAAAAcwAAAHAAAAAQAAAAAAAAAAAAAAAA
AAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/4AEAAAQAAABue8dBouS4wPkKAD9ue8dBouS4
wPkKAL8yW8dBouS4wHlOJj8tpsZBlcjIwPkKAD8tpsZBlcjIwPkKAL8yW8dBouS4wHlOJr+F
M8dBouS4wAcuQz/8MMVBl23awJPjUj+iAMVB9ljiwPkKAD+iAMVB9ljiwPkKAL/8MMVBl23a
wJPjUr+FM8dBouS4wAcuQ790wcZBouS4wJoqcT92g8ZBouS4wBPBgT9COsRBcGXZwCcPkD+u
W8JBmkz6wAKlej+V4cJBCjf7wMKdPj84DsNBlon7wPkKAD84DsNBlon7wPkKAL+V4cJBCjf7
wMKdPr92g8ZBouS4wBPBgb90wcZBouS4wJoqcb+uW8JBmkz6wAKler9COsRBcGXZwCcPkL80
zcVBouS4wGSvlj86scJBZsXXwJU7sT+1gsFBrcP4wMMCmT+bxb9BA/kDwaySdz8nOsBBJeAE
wYrDKD9rk8BBrGIEwfkKAD9rk8BBrGIEwfkKAL8nOsBBJeAEwYrDKL+bxb9BA/kDwaySd7/3
y8VBouS4wGSvlr+1gsFBrcP4wMMCmb86scJBZsXXwJU7sb9XYcVBouS4wG8nnz/QcMRBouS4
wB0lsT/jVMNBouS4wDFzvz/wr8BB+53VwO+uyj/+/b5BsBv0wEwcxT9YX8BBd6n2wJU7sT8y
5b5BTTYCwV5Unz92q7tBlSgHwV5Unz8pSrxBAFAJwaySdz/+m7xB92sKwYrDKD/YZL1BJ6kJ
wfkKAD/YZL1BJ6kJwfkKAL/+m7xB92sKwYrDKL8pSrxBAFAJwaySd792q7tBlSgHwV5Un78y
5b5BTTYCwV5Un79XYcVBouS4wG8nn79YX8BBd6n2wJU7sb/oucJBouS4wLOwxr+mU8NBouS4
wG1+v7/QcMRBouS4wB0lsb/+/b5BsBv0wEwcxb/wr8BB+53VwO+uyr/oucJBouS4wHelxj9g
t8BBouS4wGEM1j+TW75BaR3TwOKn2j+Gbb1B8iDxwLba0z86gMFBouS4wIoA0T+HHbxBqFH5
wK330T9Rpb1Bw27/wH6vvD/QybpBBxoEwX6vvD8KxrhBE8cHwT/LsD86KblBuBwKwW2SmD9g
crlBetoLwb4Hej8Dn7lBiewMwW0tPj/jrblB/UgNwfkKAD/jrblB/UgNwfkKAL8Dn7lBiewM
wW0tPr9gcrlBetoLwb4Her86KblBuBwKwW2SmL8KxrhBE8cHwT/LsL/QybpBBxoEwX6vvL9R
pb1Bw27/wH6vvL/9fsFBouS4wIoA0b+HHbxBqFH5wK330b+Gbb1B8iDxwLba07+TW75BaR3T
wOKn2r8itsBBouS4wGEM1r8PcL9BouS4wA0x3D+Uu7tB9tbtwED73D8lZLpBC3XywOvb3T/j
fLhBgUn4wOvb3T8WtLlBLVkAwa330T/GTbhBDeoEwTK3xD/nAqZBR/QRwZU7sT9fYqZBFgsV
wScPkD/inaZBrP0WwZPjUj9rW6FBsCEawfkKAD9rW6FBsCEawfkKAL8adLRBfq0PwZPjUr9u
LbRBgsENwScPkL+bvLNBTrEKwZU7sb/GTbhBDeoEwTK3xL8WtLlBLVkAwa330b+Uu7tB9tbt
wED73L/jfLhBgUn4wOvb3b8lZLpBC3XywOvb3b/Rbr9BouS4wA0x3L9t871BouS4wDgL3z/n
47xBFPa/wA4k4D+Ch7tB7DrVwA4k4D/C+rlBilHqwNIY4D9a+7hB3o/uwA4k4D9F1LdBrw7y
wA4k4D8xjrZBtev0wNIY4D/kLLdBMT/8wFHO3D/qwrdBUagBwROM0z/rhqVBFe4Nwe+uyj88
AZZBqDoYwZU7sT88AZZBFnkbwScPkD88AZZBfH8dwZPjUj88AZZB0AseweAzKT88AZZBdVQe
wfkKAD88AZZBdVQewfkKAL88AZZB+h0ewbNfRb86oZhBIBkdwZPjUr+ib5hB4yQbwScPkL+G
IZhB0wUYwZU7sb9OKrNBBLUGwe+uyr/bu5dBE/QTwe+uyr/qwrdBUagBwROM07/kLLdBMT/8
wFHO3L/n47xBFPa/wA4k4L9t871BouS4wDgL37/C+rlBilHqwNIY4L+Ch7tB7DrVwA4k4L8x
jrZBtev0wNIY4L9F1LdBrw7ywA4k4L9a+7hB3o/uwA4k4L9eQ71BouS4wA4k4D8U8rlBVUTq
wA4k4D/BhrZBKZn0wA4k4D/m3J5B7L4GwQ4k4D/c9aRBijoJweKn2j88AZZB6BgPweKn2j88
AZZBSAEUwe+uyj88AZZB2OUdwZPjUr88AZZBct8bwScPkL88AZZBwZsbwRfekr88AZZBRakY
wZU7sb88AZZBzXkUwe+uyr/VRJdBRjgPweKn2r81f7JB+xECweKn2r/m3J5B7L4GwQ4k4L9e
Q71BouS4wA4k4L8U8rlBVUTqwA4k4L/BhrZBKZn0wA4k4L88AZZBouS4wA4k4D88AZZBWv0J
wQ4k4D88AZZB4jsMwevb3T88AZZBrpkPweKn2r88AZZBOj0PwTcY2788AZZBWv0JwQ4k4L88
AZZBouS4wA4k4L+0AwAAAAAAAAEAAAAFAAAAAAAAAAUAAAALAAAAAAAAAAsAAAAVAAAAAAAA
ABUAAAAUAAAAAAAAABQAAAAhAAAAAAAAACEAAAA0AAAAAAAAADQAAAA4AAAAAAAAADgAAAA3
AAAAAAAAADcAAAA2AAAAAAAAADYAAABPAAAAAAAAAE8AAABTAAAAAAAAAFMAAABnAAAAAAAA
AGcAAACBAAAAAAAAAIEAAACWAAAAAAAAAJYAAACfAAAAAAAAAJ8AAACZAAAAAAAAAJkAAACH
AAAAAAAAAIcAAABoAAAAAAAAAGgAAABUAAAAAAAAAFQAAAA8AAAAAAAAADwAAAA/AAAAAAAA
AD8AAAA7AAAAAAAAADsAAAAmAAAAAAAAACYAAAAlAAAAAAAAACUAAAAkAAAAAAAAACQAAAAY
AAAAAAAAABgAAAANAAAAAAAAAA0AAAAMAAAAAAAAAAwAAAAGAAAAAAAAAAYAAAACAAAAAAAA
AAIAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAABAAAAAQAAAAQAAAAFAAAAAgAAAAYAAAAH
AAAAAgAAAAcAAAADAAAAAwAAAAcAAAAIAAAAAwAAAAgAAAAJAAAAAwAAAAkAAAAEAAAABAAA
AAkAAAAKAAAABAAAAAoAAAAFAAAABQAAAAoAAAALAAAABgAAAAwAAAAHAAAABwAAAAwAAAAN
AAAABwAAAA0AAAAOAAAABwAAAA4AAAAPAAAABwAAAA8AAAAQAAAABwAAABAAAAAIAAAACAAA
ABAAAAARAAAACAAAABEAAAASAAAACAAAABIAAAAJAAAACQAAABIAAAATAAAACQAAABMAAAAK
AAAACgAAABQAAAAVAAAACgAAABUAAAALAAAACgAAABMAAAAWAAAACgAAABYAAAAXAAAACgAA
ABcAAAAUAAAADQAAABgAAAAOAAAADgAAABkAAAAaAAAADgAAABoAAAAPAAAADgAAABgAAAAZ
AAAADwAAABoAAAAbAAAADwAAABsAAAAQAAAAEAAAABsAAAAcAAAAEAAAABwAAAAdAAAAEAAA
AB0AAAARAAAAEQAAAB0AAAAeAAAAEQAAAB4AAAASAAAAEgAAAB4AAAATAAAAEwAAAB4AAAAf
AAAAEwAAAB8AAAAgAAAAEwAAACAAAAAWAAAAFAAAABcAAAAhAAAAFgAAACIAAAAXAAAAFgAA
ACAAAAAiAAAAFwAAACIAAAAjAAAAFwAAACMAAAAhAAAAGAAAACQAAAAZAAAAGQAAACQAAAAl
AAAAGQAAACUAAAAmAAAAGQAAACYAAAAnAAAAGQAAACcAAAAoAAAAGQAAACgAAAApAAAAGQAA
ACkAAAAaAAAAGgAAACkAAAAqAAAAGgAAACoAAAAbAAAAGwAAACoAAAArAAAAGwAAACsAAAAs
AAAAGwAAACwAAAAcAAAAHAAAACwAAAAtAAAAHAAAAC0AAAAuAAAAHAAAAC4AAAAdAAAAHQAA
AC4AAAAvAAAAHQAAAC8AAAAeAAAAHgAAAC8AAAAfAAAAHwAAAC8AAAAwAAAAHwAAADAAAAAx
AAAAHwAAADEAAAAgAAAAIAAAADEAAAAyAAAAIAAAADIAAAAzAAAAIAAAADMAAAAiAAAAIQAA
ACMAAAA0AAAAIgAAADMAAAA1AAAAIgAAADUAAAAjAAAAIwAAADYAAAA3AAAAIwAAADcAAAA4
AAAAIwAAADgAAAA0AAAAIwAAADUAAAA5AAAAIwAAADkAAAA6AAAAIwAAADoAAAA2AAAAJgAA
ADsAAAAnAAAAJwAAADwAAAA9AAAAJwAAAD0AAAA+AAAAJwAAAD4AAAAoAAAAJwAAADsAAAA/
AAAAJwAAAD8AAAA8AAAAKAAAAD4AAABAAAAAKAAAAEAAAABBAAAAKAAAAEEAAAApAAAAKQAA
AEEAAAAqAAAAKgAAAEEAAABCAAAAKgAAAEIAAAArAAAAKwAAAEIAAABDAAAAKwAAAEMAAABE
AAAAKwAAAEQAAAAsAAAALAAAAEQAAABFAAAALAAAAEUAAABGAAAALAAAAEYAAAAtAAAALQAA
AEYAAABHAAAALQAAAEcAAAAuAAAALgAAAEcAAABIAAAALgAAAEgAAAAvAAAALwAAAEgAAAAw
AAAAMAAAAEgAAABJAAAAMAAAAEkAAAAxAAAAMQAAAEkAAABKAAAAMQAAAEoAAABLAAAAMQAA
AEsAAAAyAAAAMgAAAEsAAABMAAAAMgAAAEwAAABNAAAAMgAAAE0AAAAzAAAAMwAAAE4AAAA1
AAAAMwAAAE0AAABOAAAANQAAAE4AAAA5AAAANgAAADoAAABPAAAAOQAAAE4AAABQAAAAOQAA
AFAAAABRAAAAOQAAAFEAAAA6AAAAOgAAAFEAAABSAAAAOgAAAFIAAABTAAAAOgAAAFMAAABP
AAAAPAAAAFQAAAA9AAAAPQAAAFQAAABVAAAAPQAAAFUAAAA+AAAAPgAAAFUAAABAAAAAQAAA
AFUAAABWAAAAQAAAAFYAAABXAAAAQAAAAFcAAABYAAAAQAAAAFgAAABCAAAAQAAAAEIAAABB
AAAAQgAAAFgAAABZAAAAQgAAAFkAAABDAAAAQwAAAFkAAABaAAAAQwAAAFoAAABEAAAARAAA
AFoAAABbAAAARAAAAFsAAABFAAAARQAAAFsAAABcAAAARQAAAFwAAABGAAAARgAAAFwAAABH
AAAARwAAAFwAAABdAAAARwAAAF0AAABeAAAARwAAAF4AAABIAAAASAAAAF4AAABfAAAASAAA
AF8AAABJAAAASQAAAF8AAABKAAAASgAAAF8AAABgAAAASgAAAGAAAABLAAAASwAAAGAAAABh
AAAASwAAAGEAAABMAAAATAAAAGIAAABNAAAATAAAAGEAAABiAAAATQAAAGIAAABjAAAATQAA
AGMAAABQAAAATQAAAFAAAABOAAAAUAAAAGQAAABRAAAAUAAAAGMAAABlAAAAUAAAAGUAAABm
AAAAUAAAAGYAAABkAAAAUQAAAGQAAABSAAAAUgAAAGcAAABTAAAAUgAAAGQAAABnAAAAVAAA
AGgAAABVAAAAVQAAAGgAAABpAAAAVQAAAGkAAABqAAAAVQAAAGoAAABrAAAAVQAAAGsAAABW
AAAAVgAAAGsAAABsAAAAVgAAAGwAAABXAAAAVwAAAGwAAABtAAAAVwAAAG0AAABuAAAAVwAA
AG4AAABvAAAAVwAAAG8AAABYAAAAWAAAAG8AAABwAAAAWAAAAHAAAABZAAAAWQAAAHAAAABx
AAAAWQAAAHEAAABaAAAAWgAAAHEAAAByAAAAWgAAAHIAAABzAAAAWgAAAHMAAABbAAAAWwAA
AHMAAABcAAAAXAAAAHMAAAB0AAAAXAAAAHQAAAB1AAAAXAAAAHUAAABdAAAAXQAAAHUAAAB2
AAAAXQAAAHYAAAB3AAAAXQAAAHcAAABeAAAAXgAAAHcAAAB4AAAAXgAAAHgAAAB5AAAAXgAA
AHkAAABfAAAAXwAAAHkAAAB6AAAAXwAAAHoAAABgAAAAYAAAAHoAAAB7AAAAYAAAAHsAAABh
AAAAYQAAAHwAAABiAAAAYQAAAHsAAAB9AAAAYQAAAH0AAAB8AAAAYgAAAHwAAAB+AAAAYgAA
AH4AAABjAAAAYwAAAH4AAAB/AAAAYwAAAH8AAABlAAAAZAAAAIAAAACBAAAAZAAAAIEAAABn
AAAAZAAAAGYAAACCAAAAZAAAAIIAAACDAAAAZAAAAIMAAACAAAAAZQAAAH8AAACEAAAAZQAA
AIQAAACFAAAAZQAAAIUAAACGAAAAZQAAAIYAAABmAAAAZgAAAIYAAACCAAAAaAAAAIcAAABp
AAAAaQAAAIcAAACZAAAAaQAAAJkAAACaAAAAaQAAAJoAAACKAAAAaQAAAIoAAACJAAAAaQAA
AIkAAABtAAAAaQAAAG0AAABsAAAAaQAAAGwAAACIAAAAaQAAAIgAAABqAAAAagAAAIgAAABr
AAAAawAAAIgAAABsAAAAbQAAAIkAAABuAAAAbgAAAIkAAACKAAAAbgAAAIoAAABvAAAAbwAA
AIoAAACLAAAAbwAAAIsAAABwAAAAcAAAAIsAAABxAAAAcQAAAIsAAACMAAAAcQAAAIwAAACN
AAAAcQAAAI0AAAByAAAAcgAAAI0AAACMAAAAcgAAAIwAAACbAAAAcgAAAJsAAACaAAAAcgAA
AJoAAACZAAAAcgAAAJkAAACfAAAAcgAAAJ8AAACeAAAAcgAAAJ4AAACdAAAAcgAAAJ0AAACc
AAAAcgAAAJwAAACSAAAAcgAAAJIAAACRAAAAcgAAAJEAAACQAAAAcgAAAJAAAACPAAAAcgAA
AI8AAACOAAAAcgAAAI4AAAB4AAAAcgAAAHgAAAB3AAAAcgAAAHcAAAB2AAAAcgAAAHYAAAB1
AAAAcgAAAHUAAAB0AAAAcgAAAHQAAABzAAAAeAAAAI4AAAB5AAAAeQAAAI4AAAB6AAAAegAA
AI4AAACPAAAAegAAAI8AAACQAAAAegAAAJAAAAB7AAAAewAAAJAAAACRAAAAewAAAJEAAACS
AAAAewAAAJIAAAB9AAAAfAAAAH0AAACTAAAAfAAAAJMAAACUAAAAfAAAAJQAAAB+AAAAfQAA
AJIAAACTAAAAfgAAAJQAAAB/AAAAfwAAAJQAAACTAAAAfwAAAJMAAACVAAAAfwAAAJUAAACE
AAAAgAAAAJYAAACBAAAAgAAAAIMAAACXAAAAgAAAAJcAAACGAAAAgAAAAIYAAACFAAAAgAAA
AIUAAACYAAAAgAAAAJgAAACVAAAAgAAAAJUAAACeAAAAgAAAAJ4AAACfAAAAgAAAAJ8AAACW
AAAAggAAAIYAAACXAAAAggAAAJcAAACDAAAAhAAAAJUAAACYAAAAhAAAAJgAAACFAAAAigAA
AJoAAACbAAAAigAAAJsAAACMAAAAigAAAIwAAACLAAAAkgAAAJwAAACTAAAAkwAAAJwAAACd
AAAAkwAAAJ0AAACVAAAAlQAAAJ0AAACeAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAA
AAAAAAAAAAAAAACAP6cBAAAEAAAASx65wfbPlsAUPy3AI3StwfbPlsAUPy3AstK9wfbPlsBl
Ni3ALDe/wQnubMAE0SHATvK/wZO/EMAFkhHAUbS7wYAE5j1rje2/I3StwZCRHT5Omuy/I3St
wfbPlsAUPy1Am3G+wfbPlsBA6CzAgWG/wcRcjMBh8CjAz37AwTWqUcB5bBzAzxjBwfKrD8B9
cxDAYmy8wQANrz4ULee/U367wQANrz5JVOi/I3StwQANrz5JVOi/I3StwTAGrT4Fd+g/Sx65
wfbPlsAUPy1AI9u+wfbPlsDKoizA0UjAwUYbjcBXcifAWGfBwTKNUsC0yxrA4jTCwUjhDsAl
mg3A61S9wQANrz4UpuO/lKu8wQANrz72Oea/I3StwQANrz5JVOg/U367wQANrz5JVOg/UbS7
wYAE5j1rje0/LDe/wQnubMAE0SFAstK9wfbPlsBlNi1ATvK/wZO/EMAFkhFAQzK/wfbPlsDR
/SvACcu/wfbPlsCb1irAuxfAwfbPlsB+4ynAHrHAwfbPlsCU9CfAPSPBwfDljcAXzSTAOUTC
wbaYU8AXFRjAGTzDwQCADsAJIAnAzDG+wQANrz5k892/Ymy8wQANrz4ULec/z37AwTWqUcB5
bBxAgWG/wcRcjMBh8ChAm3G+wfbPlsBA6CxAzxjBwfKrD8B9cxBAQIfBwfbPlsAG9CPAtu3B
wdLAjsBdIyHAiRDDwcTMVMD/WRTAaCPEwQCADsCRMAPA4vy+wQANrz4DFda/HBW9wQANrz6P
quQ/0UjAwUYbjcBXcidAWGfBwTKNUsC0yxpAI9u+wfbPlsDKoixA61S9wQANrz4UpuM/4jTC
wUjhDsAlmg1APr3BwfbPlsAJkCLAEqrCweqrj8C+SRzAgs3DwVopVsADbw/A1uLEwUjhDsAM
Efi/10DAwQANrz4k3sG/Lba/wQANrz5OHMy/A1rEwYNlV8BXewrAOUTCwbaYU8DGHRhAPSPB
wfDljcAXzSRAHrHAwfbPlsCU9CdAuxfAwfbPlsB+4ylACcu/wfbPlsCb1ipAQzK/wfbPlsDR
/StAN/O9wQANrz4plN8/GTzDwQCADsAJIAlAzDG+wQANrz5k890/Ck7CwfbPlsBCzB7APXLC
wfbPlsAAix3AXOTCwfbPlsAhkxnAvDTDwaJ6kMDBXhfAls7EwcepWMAR9ATABXPFwfKrD8AA
uOe/9rLAwQANrz7DeLa/iRDDwcTMVMD/WRRAtu3BwdLAjsBdIyFAQIfBwfbPlsAG9CNANsO+
wQANrz5vY9g/4vy+wQANrz4DFdY/aCPEwQCADsCRMANA6WDDwfbPlsATzxPAFajDwUxFkcAq
4BHAZSnFwSb2WcB35v2/Ns3FwcnPEMClA9a/FQrBwQANrz5FIKq/EqrCweqrj8C+SRxAgs3D
wVopVsADbw9APr3BwfbPlsAJkCJALba/wQANrz5OHMw/10DAwQANrz4k3sE/1uLEwUjhDsAM
Efg/A1rEwYNlV8BXewpAUXPDwfbPlsDdpxLADAHEwc4DksAD6AvAZz7EwUK+ksBakAXAwGbF
wYZCW8CDSPG/ku/FwbFEEsABs8O/3mzBwQANrz4LvIe//ETBwQANrz4gGp2/vDTDwaJ6kMDB
XhdAXOTCwfbPlsDQmxlACk7CwfbPlsBCzB5ADpPAwQANrz7vqLk/BXPFwfKrD8AAuOc/ls7E
wcepWMAR9ARA9rLAwQANrz7DeLY/scPDwfbPlsB3kQ3ABgnEwfbPlsAG/QbAYxDEwfbPlsCs
hwXAZz7EwfbPlsDtRqe/Ey3FwW60esCxXOa/OJfFwbyyXcDEWGm/L/DFwQNdEsCaI8K/ku/F
wbFEEsABs8M/gIDBwQANrz5Omuy+FajDwUxFkcAq4BFA6WDDwfbPlsATzxNAZSnFwSb2WcDV
9/0/YvPAwQANrz4sc60/FQrBwQANrz5FIKo/Ns3FwcnPEMClA9Y/7UPEwfbPlsBPjGU/Ey3F
wW60esCxXOY/OJfFwWRgX8BceZs+L/DFwRRuF8CHsgG/L/DFwQNdEsCaI8I/OJfFwYpfWsD3
NMI/wGbFwYZCW8CDSPE/3mzBwQANrz4LvIc/gIDBwQANrz5Omuw+DAHEwc4DksAD6AtAUXPD
wfbPlsDdpxJAZz7EwUK+ksBakAVA/ETBwQANrz4gGp0/vzLEwfbPlsDBBN4/L/DFwRRuF8CH
sgE/scPDwfbPlsB3kQ1AYxDEwfbPlsCshwVABgnEwfbPlsAG/QZAQgMAAAAAAAABAAAABwAA
AAAAAAAHAAAAEAAAAAAAAAAQAAAAGwAAAAAAAAAbAAAAKAAAAAAAAAAoAAAAMgAAAAAAAAAy
AAAAQQAAAAAAAABBAAAAQAAAAAAAAABAAAAAPwAAAAAAAAA/AAAAPgAAAAAAAAA+AAAATgAA
AAAAAABOAAAAWQAAAAAAAABZAAAAZwAAAAAAAABnAAAAZgAAAAAAAABmAAAAdgAAAAAAAAB2
AAAAhQAAAAAAAACFAAAAigAAAAAAAACKAAAAjAAAAAAAAACMAAAAiwAAAAAAAACLAAAAiAAA
AAAAAACIAAAAewAAAAAAAAB7AAAAbwAAAAAAAABvAAAAbgAAAAAAAABuAAAAbQAAAAAAAABt
AAAAbAAAAAAAAABsAAAAXgAAAAAAAABeAAAAUgAAAAAAAABSAAAARwAAAAAAAABHAAAARgAA
AAAAAABGAAAARQAAAAAAAABFAAAANQAAAAAAAAA1AAAAKgAAAAAAAAAqAAAAIAAAAAAAAAAg
AAAAHwAAAAAAAAAfAAAAHgAAAAAAAAAeAAAAHQAAAAAAAAAdAAAAEQAAAAAAAAARAAAACAAA
AAAAAAAIAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAF
AAAAAQAAAAEAAAAFAAAABgAAAAEAAAAGAAAADgAAAAEAAAAOAAAAFwAAAAEAAAAXAAAADwAA
AAEAAAAPAAAABwAAAAIAAAAIAAAAAwAAAAMAAAAIAAAACQAAAAMAAAAJAAAACgAAAAMAAAAK
AAAABAAAAAQAAAAKAAAACwAAAAQAAAALAAAADAAAAAQAAAAMAAAADQAAAAQAAAANAAAABQAA
AAUAAAANAAAADgAAAAUAAAAOAAAABgAAAAcAAAAPAAAAEAAAAAgAAAARAAAACQAAAAkAAAAS
AAAACgAAAAkAAAARAAAAEgAAAAoAAAATAAAACwAAAAoAAAASAAAAEwAAAAsAAAAUAAAAFQAA
AAsAAAAVAAAAFgAAAAsAAAAWAAAADAAAAAsAAAATAAAAFAAAAAwAAAAWAAAAFQAAAAwAAAAV
AAAAJAAAAAwAAAAkAAAALgAAAAwAAAAuAAAAOgAAAAwAAAA6AAAAOQAAAAwAAAA5AAAASwAA
AAwAAABLAAAAVgAAAAwAAABWAAAAZAAAAAwAAABkAAAAYwAAAAwAAABjAAAAdAAAAAwAAAB0
AAAAgwAAAAwAAACDAAAAggAAAAwAAACCAAAAhwAAAAwAAACHAAAAeQAAAAwAAAB5AAAAeAAA
AAwAAAB4AAAAawAAAAwAAABrAAAAaAAAAAwAAABoAAAAWwAAAAwAAABbAAAAWgAAAAwAAABa
AAAAUAAAAAwAAABQAAAATwAAAAwAAABPAAAARAAAAAwAAABEAAAAQgAAAAwAAABCAAAAMwAA
AAwAAAAzAAAALwAAAAwAAAAvAAAAJQAAAAwAAAAlAAAAGAAAAAwAAAAYAAAAFwAAAAwAAAAX
AAAADgAAAAwAAAAOAAAADQAAAA8AAAAXAAAAGAAAAA8AAAAYAAAAGQAAAA8AAAAZAAAAEAAA
ABAAAAAaAAAAGwAAABAAAAAZAAAAHAAAABAAAAAcAAAAGgAAABEAAAAdAAAAEgAAABIAAAAd
AAAAHgAAABIAAAAeAAAAHwAAABIAAAAfAAAAIAAAABIAAAAgAAAAIQAAABIAAAAhAAAAIgAA
ABIAAAAiAAAAEwAAABMAAAAiAAAAFAAAABQAAAAiAAAAIwAAABQAAAAjAAAAJAAAABQAAAAk
AAAAFQAAABgAAAAlAAAAHAAAABgAAAAcAAAAGQAAABoAAAAmAAAAJwAAABoAAAAnAAAAKAAA
ABoAAAAoAAAAGwAAABoAAAAcAAAAJgAAABwAAAApAAAAJgAAABwAAAAlAAAAKQAAACAAAAAq
AAAAKwAAACAAAAArAAAAIQAAACEAAAArAAAALAAAACEAAAAsAAAAIgAAACIAAAAsAAAAIwAA
ACMAAAAtAAAALgAAACMAAAAuAAAAJAAAACMAAAAsAAAALQAAACUAAAAvAAAAKQAAACYAAAAw
AAAAJwAAACYAAAApAAAAMQAAACYAAAAxAAAAMAAAACcAAAAyAAAAKAAAACcAAAAwAAAAMgAA
ACkAAAAvAAAAMwAAACkAAAAzAAAANAAAACkAAAA0AAAAMQAAACoAAAA1AAAAKwAAACsAAAA1
AAAANgAAACsAAAA2AAAALAAAACwAAAA2AAAANwAAACwAAAA3AAAALQAAAC0AAAA4AAAAOQAA
AC0AAAA5AAAAOgAAAC0AAAA6AAAALgAAAC0AAAA3AAAAOwAAAC0AAAA7AAAAOAAAADAAAAAx
AAAAPAAAADAAAAA8AAAAPQAAADAAAAA9AAAAPgAAADAAAAA+AAAAPwAAADAAAAA/AAAAQAAA
ADAAAABAAAAAQQAAADAAAABBAAAAMgAAADEAAAA0AAAAPAAAADMAAABCAAAANAAAADQAAABD
AAAAPAAAADQAAABCAAAARAAAADQAAABEAAAAQwAAADUAAABFAAAANgAAADYAAABGAAAARwAA
ADYAAABHAAAASAAAADYAAABIAAAAOwAAADYAAAA7AAAANwAAADYAAABFAAAARgAAADgAAAA7
AAAASQAAADgAAABJAAAASgAAADgAAABKAAAASwAAADgAAABLAAAAOQAAADsAAABIAAAASQAA
ADwAAABDAAAATAAAADwAAABMAAAATQAAADwAAABNAAAAPQAAAD0AAABNAAAAPgAAAD4AAABN
AAAATgAAAEMAAABEAAAATwAAAEMAAABPAAAAUAAAAEMAAABQAAAAUQAAAEMAAABRAAAATAAA
AEcAAABSAAAAUwAAAEcAAABTAAAASAAAAEgAAABTAAAASQAAAEkAAABUAAAASgAAAEkAAABT
AAAAVAAAAEoAAABUAAAAVQAAAEoAAABVAAAAVgAAAEoAAABWAAAASwAAAEwAAABXAAAATQAA
AEwAAABRAAAAWAAAAEwAAABYAAAAVwAAAE0AAABZAAAATgAAAE0AAABXAAAAWQAAAFAAAABa
AAAAUQAAAFEAAABaAAAAWwAAAFEAAABbAAAAXAAAAFEAAABcAAAAXQAAAFEAAABdAAAAWAAA
AFIAAABeAAAAUwAAAFMAAABeAAAAXwAAAFMAAABfAAAAVAAAAFQAAABfAAAAYAAAAFQAAABg
AAAAYQAAAFQAAABhAAAAVQAAAFUAAABiAAAAYwAAAFUAAABjAAAAZAAAAFUAAABkAAAAVgAA
AFUAAABhAAAAYgAAAFcAAABYAAAAXQAAAFcAAABdAAAAZQAAAFcAAABlAAAAZgAAAFcAAABm
AAAAZwAAAFcAAABnAAAAWQAAAFsAAABoAAAAXAAAAFwAAABpAAAAagAAAFwAAABqAAAAXQAA
AFwAAABoAAAAawAAAFwAAABrAAAAaQAAAF0AAABqAAAAZQAAAF4AAABsAAAAXwAAAF8AAABs
AAAAYAAAAGAAAABtAAAAbgAAAGAAAABuAAAAbwAAAGAAAABvAAAAcAAAAGAAAABwAAAAYQAA
AGAAAABsAAAAbQAAAGEAAABwAAAAcQAAAGEAAABxAAAAcgAAAGEAAAByAAAAYgAAAGIAAABy
AAAAfwAAAGIAAAB/AAAAcwAAAGIAAABzAAAAgwAAAGIAAACDAAAAdAAAAGIAAAB0AAAAYwAA
AGUAAAB1AAAAZgAAAGUAAABqAAAAdQAAAGYAAAB1AAAAdgAAAGkAAAB3AAAAagAAAGkAAABr
AAAAeAAAAGkAAAB4AAAAeQAAAGkAAAB5AAAAegAAAGkAAAB6AAAAdwAAAGoAAAB3AAAAdQAA
AG8AAAB7AAAAcAAAAHAAAAB7AAAAfAAAAHAAAAB8AAAAfQAAAHAAAAB9AAAAcQAAAHEAAAB9
AAAAfgAAAHEAAAB+AAAAcgAAAHIAAAB+AAAAiQAAAHIAAACJAAAAfwAAAHMAAAB/AAAAgAAA
AHMAAACAAAAAgQAAAHMAAACBAAAAegAAAHMAAAB6AAAAggAAAHMAAACCAAAAgwAAAHUAAACE
AAAAhQAAAHUAAACFAAAAdgAAAHUAAAB3AAAAhAAAAHcAAACBAAAAhgAAAHcAAACGAAAAhAAA
AHcAAAB6AAAAgQAAAHkAAACHAAAAegAAAHoAAACHAAAAggAAAHsAAACIAAAAfAAAAHwAAACI
AAAAhgAAAHwAAACGAAAAgQAAAHwAAACBAAAAgAAAAHwAAACAAAAAfQAAAH0AAACAAAAAiQAA
AH0AAACJAAAAfgAAAH8AAACJAAAAgAAAAIQAAACKAAAAhQAAAIQAAACGAAAAigAAAIYAAACI
AAAAiwAAAIYAAACLAAAAjAAAAIYAAACMAAAAigAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAA
AAAAAAAAAAAAAAAAAAAAgD8tAAAABAAAABf4lMH2z5bAFD8twCN0rcH2z5bAZTYtwCN0rcFs
2ozAFLgpwCN0rcG4lV7AgE4fwCN0rcFD7dS/K9IKwBf4lMEACWc+ifnqvxf4lMH2z5bAFD8t
QCN0rcH2z5bAFD8tQCN0rcGQkR0+TprsvyN0rcEADa8+SVTovxf4lMEADa8+SVTovxf4lMFA
eqk+wJnoPyN0rcEwBq0+BXfoPyN0rcEADa8+7ELoPxf4lMEADa8+7ELoP04AAAAAAAAAAQAA
AAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAAoAAAAA
AAAACgAAAA4AAAAAAAAADgAAAAsAAAAAAAAACwAAAAYAAAAAAAAABgAAAAcAAAAAAAAABwAA
AAEAAAABAAAABwAAAAwAAAABAAAADAAAAA0AAAABAAAADQAAAAkAAAABAAAACQAAAAgAAAAB
AAAACAAAAAQAAAABAAAABAAAAAMAAAABAAAAAwAAAAIAAAAEAAAACAAAAAUAAAAFAAAACAAA
AAkAAAAFAAAACQAAAAoAAAAGAAAACwAAAAwAAAAGAAAADAAAAAcAAAAJAAAADQAAAA4AAAAJ
AAAADgAAAAoAAAALAAAADgAAAAwAAAAMAAAADgAAAA0AAAAQAAAAAAAAAAAAAAAAAAAAAAAA
ABAAAAAAAAAAAAAAAAAAAAAAAIA/1AEAAAQAAAD//5VBaIHUv/kKAD///5VBaIHUv/kKAL//
/5VBfAXVvw0IDT+nGJdBshLVv/kKAD+nGJdBshLVv/kKAL///5VBCKnUvy13A7///5VBuAnc
v5PjUj9ombdBKPcCwJPjUj9UjblBDI8DwH5RPz+enblB0QICwPkKAD+enblB0QICwPkKAL8S
4KNBWF7ov5PjUr///5VBnf/dv5PjUr///5VBiajpv1lEij82W7lBthIIwAL2ez9xvb5BVvIh
wPkKAD+G4L5B28smwJPjUj9xvb5BVvIhwPkKAL9UjblBDI8DwH5RP7/FyqNBgE/4vycPkL82
W7lBHAwIwAL2e7///5VBLwvuvycPkL///5VBSxXsvycPkD/dh7dBV/YKwCcPkD/FCblB/VgP
wLrBmT8aLL5BTH8swCcPkD+w58JBcNpJwPkKAD8gzMJB07VcwCcPkD/lqcNBPLZYwJPjUj+w
58JBcNpJwPkKAL+G4L5B28smwJPjUr+zrKNB1NgIwJU7sb///5VBRr0DwJU7sb/FCblB/VgP
wLrBmb8aLL5BTH8swCcPkL///5VB7sgCwJU7sT+LaLdBaqcXwJU7sT9CmrhBoBIZwIz6sT/t
C71B0nI1wJU7sT8NbMFBXQ5jwJU7sT+A68VBCtl3wPkKAD/yKsRBghKMwJU7sT8es8VB3WuK
wCcPkD8yq8ZBtmOJwJPjUj+A68VBCtl3wPkKAL/lqcNBPLZYwJPjUr8gzMJB07VcwCcPkL9b
g6NB32EZwO+uyr///5VBhlMUwO+uyr9CmrhBoBIZwIz6sb9vELhBXM8kwBmjxb/tC71B0nI1
wJU7sb8NbMFBXQ5jwJU7sb///5VBZGwTwO+uyj9vELhB99UkwBmjxT9MlbtBji9BwO+uyj85
oL9BZWNrwO+uyj/AK8JBUjOOwO+uyj9Ho8dBIPyUwPkKAD+DG8VBa5CowJU7sT92scZBa5Co
wCcPkD8QscdBa5CowJPjUj9Ho8dBIPyUwPkKAL8yq8ZBtmOJwJPjUr8es8VB3WuKwCcPkL/y
KsRBghKMwJU7sb+RcrdB7h4ywFgp1L99UqNBUaAswOKn2r///5VByKUnwOKn2r9MlbtBji9B
wO+uyr/AK8JBUjOOwO+uyr85oL9BZWNrwO+uyr///5VBBPIUwKMhzD+RcrdB7h4ywJQ01D8v
OrdBdjAowO+uyj/F3rlB+dROwOKn2j84ib1BBPx0wOKn2j+FCcNBa5CowO+uyj/Y1L9B5LOQ
wOKn2j/Q3MFBcRyswHrP0z///8dBkO+uwPkKAD+AFsVB3JStwOEZsT/8UMZBJSauwNTVmD9Y
k8NB3OWswJn6xD+KPMdBaZauwBN4ej/hzcdBJdWuwNNwPj///8dBkO+uwPkKAL8QscdBa5Co
wJPjUr92scZBa5CowCcPkL+DG8VBa5CowJU7sb+pxbZBpnZAwLgR3b/F3rlB+dROwOKn2r//
/5VBreI5wFoC4L///5VB2E84wAWS3784ib1BBPx0wOKn2r+FCcNBa5CowO+uyr+Q28FBcRys
wHrP07/Y1L9B5LOQwOKn2r///5VBO0YlwISl2T///5VBkpgnwPsM2z+pxbZBpnZAwLgR3T/G
drlBaiZqwA4k4D8PBrxBfzyFwA4k4D+zAMBBuk+rwATw3D+RnsBBa5CowOKn2j8+k71B+l6X
wA4k4D/dcb9BouS4wA0x3D9gtsBBouS4wGEM1j9agcFBouS4wIoA0T+cWsdBouS4wHlOJj/v
ecdBouS4wPkKAD/zVcNBouS4wDFzvz8cccRBouS4wB0lsT/uYsVBouS4wG8nnz9uzcVBouS4
wGSvlj+VusJBouS4wHelxj8ag8ZBouS4wBPBgT8Bw8ZBouS4wJoqcT/EM8dBouS4wAcuQz/h
zcdBJdWuwNNwPr/vecdBouS4wPkKAL+cWsdBouS4wHlOJr+KPMdBaZauwBN4er/8UMZBJSau
wNTVmL+AFsVB3JStwB0lsb9Yk8NB3OWswNUFxb83B7ZBQmZPwA4k4L///5VBK4E6wA4k4L/G
drlBaiZqwA4k4L8PBrxBfzyFwA4k4L8ZgMFBouS4wIoA0b9gtsBBouS4wGEM1r9cb79BouS4
wA0x3L+RnsBBa5CowOKn2r/w/L9BbEyrwED73L8+k71B+l6XwA4k4L///5VBreI5wFoC4D//
/5VBK4E6wA4k4D83B7ZBQmZPwA4k4D+JEL5BGnmqwNIY4D+4871BouS4wDgL3z+DBr5Bf3Kq
wA4k4D/EM8dBouS4wAcuQ78Bw8ZBouS4wJoqcb8ag8ZBouS4wBPBgb9uzcVBouS4wGSvlr/u
YsVBouS4wG8nn78cccRBouS4wB0lsb+yVMNBouS4wG1+v79VucJBouS4wLOwxr///5VBouS4
wA4k4L+4871BouS4wDgL378OQ71BouS4wA4k4L+DBr5Bf3KqwA4k4L///5VBouS4wA4k4D8O
Q71BouS4wA4k4D+cAwAAAAAAAAEAAAAFAAAAAAAAAAUAAAAMAAAAAAAAAAwAAAAVAAAAAAAA
ABUAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABEAAAAAAAAAEQAAABdAAAAAAAAAF0AAABc
AAAAAAAAAFwAAAB/AAAAAAAAAH8AAACWAAAAAAAAAJYAAACaAAAAAAAAAJoAAACJAAAAAAAA
AIkAAACIAAAAAAAAAIgAAABjAAAAAAAAAGMAAABiAAAAAAAAAGIAAABIAAAAAAAAAEgAAAA1
AAAAAAAAADUAAAAjAAAAAAAAACMAAAAWAAAAAAAAABYAAAANAAAAAAAAAA0AAAAGAAAAAAAA
AAYAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAABAAAAAQAAAAQAAAAF
AAAAAgAAAAYAAAADAAAAAwAAAAYAAAAHAAAAAwAAAAcAAAAIAAAAAwAAAAgAAAAJAAAAAwAA
AAkAAAAKAAAAAwAAAAoAAAAEAAAABAAAAAoAAAALAAAABAAAAAsAAAAMAAAABAAAAAwAAAAF
AAAABgAAAA0AAAAOAAAABgAAAA4AAAAHAAAABwAAAA4AAAAIAAAACAAAAA8AAAAJAAAACAAA
AA4AAAAQAAAACAAAABAAAAAPAAAACQAAAA8AAAARAAAACQAAABEAAAAKAAAACgAAABEAAAAS
AAAACgAAABIAAAALAAAACwAAABMAAAAMAAAACwAAABIAAAAUAAAACwAAABQAAAATAAAADAAA
ABMAAAAVAAAADQAAABYAAAAOAAAADgAAABYAAAAXAAAADgAAABcAAAAYAAAADgAAABgAAAAZ
AAAADgAAABkAAAAQAAAADwAAABAAAAAaAAAADwAAABoAAAAdAAAADwAAAB0AAAARAAAAEAAA
ABsAAAAcAAAAEAAAABwAAAAaAAAAEAAAABkAAAAbAAAAEQAAAB0AAAAeAAAAEQAAAB4AAAAS
AAAAEgAAAB4AAAAUAAAAEwAAAB8AAAAgAAAAEwAAACAAAAAVAAAAEwAAABQAAAAhAAAAEwAA
ACEAAAAfAAAAFAAAAB4AAAAiAAAAFAAAACIAAAAhAAAAFgAAACMAAAAYAAAAFgAAABgAAAAX
AAAAGAAAACMAAAAkAAAAGAAAACQAAAAlAAAAGAAAACUAAAAmAAAAGAAAACYAAAAZAAAAGQAA
ACYAAAAnAAAAGQAAACcAAAAbAAAAGgAAABwAAAAoAAAAGgAAACgAAAAsAAAAGgAAACwAAAAd
AAAAGwAAACkAAAAqAAAAGwAAACoAAAArAAAAGwAAACsAAAAcAAAAGwAAACcAAAApAAAAHAAA
ACsAAAAoAAAAHQAAACwAAAAtAAAAHQAAAC0AAAAeAAAAHgAAAC0AAAAuAAAAHgAAAC4AAAAi
AAAAHwAAAC8AAAAwAAAAHwAAADAAAAAgAAAAHwAAACEAAAAxAAAAHwAAADEAAAAyAAAAHwAA
ADIAAAAvAAAAIQAAACIAAAAzAAAAIQAAADMAAAAxAAAAIgAAAC4AAAA0AAAAIgAAADQAAAAz
AAAAIwAAADUAAAA2AAAAIwAAADYAAAAkAAAAJAAAADYAAAAlAAAAJQAAADYAAAAmAAAAJgAA
ADYAAAA3AAAAJgAAADcAAAAnAAAAJwAAADgAAAA5AAAAJwAAADkAAAApAAAAJwAAADcAAAA4
AAAAKAAAACsAAAA6AAAAKAAAADoAAAA+AAAAKAAAAD4AAAAsAAAAKQAAADkAAAA7AAAAKQAA
ADsAAAAqAAAAKgAAADsAAAA8AAAAKgAAADwAAAArAAAAKwAAADwAAAA9AAAAKwAAAD0AAAA6
AAAALAAAAD4AAAA/AAAALAAAAD8AAAAtAAAALQAAAD8AAAAuAAAALgAAAD8AAABAAAAALgAA
AEAAAABBAAAALgAAAEEAAAA0AAAALwAAADIAAABCAAAALwAAAEIAAABDAAAALwAAAEMAAAAw
AAAAMAAAAEMAAABEAAAAMQAAADMAAAAyAAAAMgAAADMAAABFAAAAMgAAAEUAAABCAAAAMwAA
ADQAAABFAAAANAAAAEEAAABGAAAANAAAAEYAAABHAAAANAAAAEcAAABFAAAANQAAAEgAAABJ
AAAANQAAAEkAAABKAAAANQAAAEoAAAA2AAAANgAAAEoAAABJAAAANgAAAEkAAAA3AAAANwAA
AEkAAABLAAAANwAAAEsAAABMAAAANwAAAEwAAAA4AAAAOAAAAEwAAAA5AAAAOQAAAE0AAAA7
AAAAOQAAAEwAAABOAAAAOQAAAE4AAABPAAAAOQAAAE8AAABNAAAAOgAAAD0AAABQAAAAOgAA
AFAAAABWAAAAOgAAAFYAAAA+AAAAOwAAAFEAAABSAAAAOwAAAFIAAAA8AAAAOwAAAE0AAABT
AAAAOwAAAFMAAABRAAAAPAAAAFQAAAA9AAAAPAAAAFIAAABUAAAAPQAAAFUAAABQAAAAPQAA
AFQAAABVAAAAPgAAAFYAAABXAAAAPgAAAFcAAAA/AAAAPwAAAFgAAABAAAAAPwAAAFcAAABY
AAAAQAAAAFgAAABZAAAAQAAAAFkAAABBAAAAQQAAAFkAAABGAAAAQgAAAFoAAABDAAAAQgAA
AEUAAABbAAAAQgAAAFsAAABaAAAAQwAAAFoAAABcAAAAQwAAAFwAAABdAAAAQwAAAF0AAABE
AAAARQAAAEcAAABeAAAARQAAAF4AAABbAAAARgAAAFkAAABfAAAARgAAAF8AAABgAAAARgAA
AGAAAABhAAAARgAAAGEAAABeAAAARgAAAF4AAABHAAAASAAAAGIAAABJAAAASQAAAGIAAABj
AAAASQAAAGMAAABkAAAASQAAAGQAAABLAAAASwAAAGUAAABMAAAASwAAAGQAAABlAAAATAAA
AGUAAABmAAAATAAAAGYAAABOAAAATQAAAE8AAABTAAAATgAAAGcAAABoAAAATgAAAGgAAABP
AAAATgAAAGYAAABpAAAATgAAAGkAAABnAAAATwAAAGgAAABnAAAATwAAAGcAAABqAAAATwAA
AGoAAABrAAAATwAAAGsAAABsAAAATwAAAGwAAABTAAAAUAAAAFUAAABtAAAAUAAAAG0AAABu
AAAAUAAAAG4AAAB4AAAAUAAAAHgAAABWAAAAUQAAAFMAAABvAAAAUQAAAG8AAABwAAAAUQAA
AHAAAABxAAAAUQAAAHEAAABSAAAAUgAAAHEAAAByAAAAUgAAAHIAAABUAAAAUwAAAGwAAABz
AAAAUwAAAHMAAABvAAAAVAAAAHIAAAB0AAAAVAAAAHQAAAB1AAAAVAAAAHUAAABVAAAAVQAA
AHUAAAB2AAAAVQAAAHYAAABtAAAAVgAAAHcAAABXAAAAVgAAAHgAAAB5AAAAVgAAAHkAAAB3
AAAAVwAAAHcAAAB6AAAAVwAAAHoAAABYAAAAWAAAAHsAAABZAAAAWAAAAHoAAAB7AAAAWQAA
AHsAAAB8AAAAWQAAAHwAAAB9AAAAWQAAAH0AAABfAAAAWgAAAH4AAAB/AAAAWgAAAH8AAABc
AAAAWgAAAFsAAACAAAAAWgAAAIAAAAB+AAAAWwAAAF4AAACAAAAAXgAAAIEAAACAAAAAXgAA
AGEAAACBAAAAXwAAAH0AAABgAAAAYAAAAIIAAACDAAAAYAAAAIMAAACEAAAAYAAAAIQAAACF
AAAAYAAAAIUAAABhAAAAYAAAAH0AAACCAAAAYQAAAIUAAACGAAAAYQAAAIYAAACHAAAAYQAA
AIcAAACBAAAAYwAAAIgAAABkAAAAZAAAAIgAAACJAAAAZAAAAIkAAACKAAAAZAAAAIoAAABl
AAAAZQAAAIoAAACJAAAAZQAAAIkAAACaAAAAZQAAAJoAAACbAAAAZQAAAJsAAACNAAAAZQAA
AI0AAABpAAAAZQAAAGkAAABmAAAAZwAAAGkAAACLAAAAZwAAAIsAAACMAAAAZwAAAIwAAABq
AAAAaQAAAI0AAACLAAAAagAAAIwAAACbAAAAagAAAJsAAACaAAAAagAAAJoAAACWAAAAagAA
AJYAAACYAAAAagAAAJgAAACXAAAAagAAAJcAAACEAAAAagAAAIQAAACDAAAAagAAAIMAAACC
AAAAagAAAIIAAACVAAAAagAAAJUAAACUAAAAagAAAJQAAACTAAAAagAAAJMAAACSAAAAagAA
AJIAAACRAAAAagAAAJEAAACQAAAAagAAAJAAAACPAAAAagAAAI8AAACOAAAAagAAAI4AAAB5
AAAAagAAAHkAAAB4AAAAagAAAHgAAABuAAAAagAAAG4AAABtAAAAagAAAG0AAAB2AAAAagAA
AHYAAAB1AAAAagAAAHUAAAB0AAAAagAAAHQAAAByAAAAagAAAHIAAABxAAAAagAAAHEAAABw
AAAAagAAAHAAAABvAAAAagAAAG8AAABzAAAAagAAAHMAAABsAAAAagAAAGwAAABrAAAAdwAA
AHkAAACOAAAAdwAAAI4AAACPAAAAdwAAAI8AAAB6AAAAegAAAI8AAACQAAAAegAAAJAAAACR
AAAAegAAAJEAAAB7AAAAewAAAJEAAACSAAAAewAAAJIAAAB8AAAAfAAAAJIAAACTAAAAfAAA
AJMAAACUAAAAfAAAAJQAAAB9AAAAfQAAAJQAAACVAAAAfQAAAJUAAACCAAAAfgAAAIAAAACB
AAAAfgAAAIEAAACHAAAAfgAAAIcAAACZAAAAfgAAAJkAAACYAAAAfgAAAJgAAACWAAAAfgAA
AJYAAAB/AAAAhAAAAIYAAACFAAAAhAAAAJcAAACGAAAAhgAAAJcAAACYAAAAhgAAAJgAAACZ
AAAAhgAAAJkAAACHAAAAiwAAAI0AAACbAAAAiwAAAJsAAACMAAAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPwsBAAAEAAAA//+VweBNrz5/Yui///+VweBNrz5/
Yug///+VwfLKBkDHk8C/7IVXweBNrz5/Yui/7IVXweBNrz5/Yug///+VwfLKBkDHk8A///+V
wQw0JEEWZIe9iuaTwds3KkEAAAAARIRVweBNrz4KKOe/gAJIwXL0rUBp12q/vXdVweBNrz4K
KOc/gAJIwXL0rUBp12o///+VwQw0JEEWZIc9//+VwRD+KUEnwgu7R3GJwUUjKUH2KkA8R3GJ
wUUjKUH2KkC8iftpwfSKIEEFpdm9Sm1WwUAoGUH2KkC+gAJIwdTuEUHG2Ii+//+VwRD+KUEn
wgs7gAJIwdTuEUHG2Ig+Sm1WwUAoGUH2KkA+iftpwfSKIEEFpdk9CkFUweBNrz7GvuS/gAJI
wQg3pEB1CHa/TLRUweBNrz5as+U/gAJIwQ5YpECUwnU/bhqHwemWKEEFBoO8qDF+wYLlJUGm
n0E9bhqHwaiOKEE0WDo8qDF+wYLlJUGmn0G96rpcwQPFG0FJfhS+5w91wXbAI0G1eoS9gAJI
wTb7EUEKfnu+6rpcwR6oG0GbjNQ95w91wRO0I0GVQT09OLJTweBNrz5Cp+O/gAJIwRppmkD4
Zny/O/lRweBNrz4l4N2/iIBSweBNrz5cpt+/saVTweBNrz6cm+M/gAJIwToOm0C/Zns/RuxS
weBNrz5YMuE/tOxRweBNrz6A1N0/UkJRweBNrz5Ngto/SFRQweBNrz5b3tU/gAJIwcIOkUDn
T32/XNpNweBNrz6mn8G/fPBOweBNrz5p88u/UWNQweBNrz6m9dW/GN5QweBNrz7qXti/gAJI
wW2jkECp230/8r1PweBNrz7R0dE/duZOweBNrz5p88s/gAJIwXi0hkAKfnu/2PNMweBNrz65
KLa/fDJNweBNrz5VTLm/gAJIwRpyjEC78nw/1c1NweBNrz4BlME/UOdMweBNrz5uEbY/gAJI
we4GeUCGH3W/8UFMweBNrz44vam/gAJIwTCLhkAKfns/qqNMweBNrz4wVrE/gAJIwV97aUC0
7mq/rMlLweBNrz4Eo5y/gAJIwb4nfUCl2XQ/ajVMweBNrz5Hmqk/gAJIwUtjXECxpVy/dmpL
weBNrz6ANYe/gAJIwT5sT0Acoky/gAJIwUnVekBs2XM/UAhMweBNrz5k06Q/gAJIwfwPakDx
Ymo/gAJIwUNcRUBlKTm/4ERLweBNrz4P/0u/Jb1LweBNrz5udJw/gAJIwTMQZkBkHGc/gAJI
wf1sQUAZZhC/gAJIweA7OUClLUw+YUdLweBNrz5936a+dmpLweBNrz6ANYc/gAJIwZSVTkD9
50w/gAJIwRvPU0AFXlQ/gAJIwXSlWkA1vV0/gAJIwf1sQUAZZhA/ZExLweBNrz5CwYc+gAJI
wWoiRkB2QDg/gAJIwdIySEArcD0/CgIAAAAAAAABAAAABQAAAAAAAAAFAAAADAAAAAAAAAAM
AAAAEwAAAAAAAAATAAAADQAAAAAAAAANAAAABgAAAAAAAAAGAAAAAgAAAAAAAAACAAAABwAA
AAAAAAAHAAAACQAAAAAAAAAJAAAAAwAAAAAAAAADAAAACAAAAAAAAAAIAAAAFwAAAAAAAAAX
AAAAJAAAAAAAAAAkAAAAJwAAAAAAAAAnAAAAJgAAAAAAAAAmAAAAMgAAAAAAAAAyAAAAMQAA
AAAAAAAxAAAAMAAAAAAAAAAwAAAALwAAAAAAAAAvAAAAOAAAAAAAAAA4AAAANwAAAAAAAAA3
AAAAPQAAAAAAAAA9AAAAQQAAAAAAAABBAAAARQAAAAAAAABFAAAASwAAAAAAAABLAAAAUAAA
AAAAAABQAAAAVgAAAAAAAABWAAAAUQAAAAAAAABRAAAATAAAAAAAAABMAAAASAAAAAAAAABI
AAAAQwAAAAAAAABDAAAAPwAAAAAAAAA/AAAAOwAAAAAAAAA7AAAAOgAAAAAAAAA6AAAANQAA
AAAAAAA1AAAANAAAAAAAAAA0AAAALQAAAAAAAAAtAAAALAAAAAAAAAAsAAAAKwAAAAAAAAAr
AAAAKgAAAAAAAAAqAAAAKAAAAAAAAAAoAAAAGQAAAAAAAAAZAAAACgAAAAAAAAAKAAAABAAA
AAAAAAAEAAAAAQAAAAEAAAAEAAAACwAAAAEAAAALAAAABwAAAAEAAAAHAAAABQAAAAIAAAAG
AAAABwAAAAMAAAAJAAAACAAAAAQAAAAKAAAACwAAAAUAAAAHAAAADAAAAAYAAAANAAAABwAA
AAcAAAAOAAAADwAAAAcAAAAPAAAAEAAAAAcAAAAQAAAAEQAAAAcAAAARAAAAEgAAAAcAAAAS
AAAACQAAAAcAAAANAAAAEwAAAAcAAAATAAAADAAAAAcAAAALAAAAFAAAAAcAAAAUAAAAFQAA
AAcAAAAVAAAAFgAAAAcAAAAWAAAADgAAAAgAAAAJAAAAGAAAAAgAAAAYAAAAFwAAAAkAAAAS
AAAAIQAAAAkAAAAhAAAAFAAAAAkAAAAUAAAACwAAAAkAAAALAAAAGgAAAAkAAAAaAAAAKQAA
AAkAAAApAAAAMwAAAAkAAAAzAAAAOQAAAAkAAAA5AAAAPgAAAAkAAAA+AAAAQgAAAAkAAABC
AAAARwAAAAkAAABHAAAASQAAAAkAAABJAAAATQAAAAkAAABNAAAAVAAAAAkAAABUAAAAUwAA
AAkAAABTAAAAUgAAAAkAAABSAAAAWAAAAAkAAABYAAAAVwAAAAkAAABXAAAAVQAAAAkAAABV
AAAATwAAAAkAAABPAAAATgAAAAkAAABOAAAASgAAAAkAAABKAAAARgAAAAkAAABGAAAARAAA
AAkAAABEAAAAQAAAAAkAAABAAAAAPAAAAAkAAAA8AAAANgAAAAkAAAA2AAAALgAAAAkAAAAu
AAAAJQAAAAkAAAAlAAAAGAAAAAoAAAAZAAAAGgAAAAoAAAAaAAAACwAAAA4AAAAbAAAADwAA
AA4AAAAWAAAAHAAAAA4AAAAcAAAAHQAAAA4AAAAdAAAAGwAAAA8AAAAbAAAAHgAAAA8AAAAe
AAAAEAAAABAAAAAWAAAAHwAAABAAAAAfAAAAEQAAABAAAAAeAAAAIAAAABAAAAAgAAAAFgAA
ABEAAAAhAAAAEgAAABEAAAAfAAAAFQAAABEAAAAVAAAAIQAAABQAAAAhAAAAFQAAABUAAAAf
AAAAIgAAABUAAAAiAAAAFgAAABYAAAAiAAAAHwAAABYAAAAgAAAAIwAAABYAAAAjAAAAHAAA
ABcAAAAYAAAAJAAAABgAAAAlAAAAJgAAABgAAAAmAAAAJwAAABgAAAAnAAAAJAAAABkAAAAo
AAAAGgAAABoAAAAoAAAAKgAAABoAAAAqAAAAKwAAABoAAAArAAAALAAAABoAAAAsAAAALQAA
ABoAAAAtAAAAKQAAABsAAAAdAAAAHAAAABsAAAAcAAAAHgAAABwAAAAgAAAAHgAAABwAAAAj
AAAAIAAAACUAAAAuAAAALwAAACUAAAAvAAAAMAAAACUAAAAwAAAAMQAAACUAAAAxAAAAMgAA
ACUAAAAyAAAAJgAAACkAAAAtAAAANAAAACkAAAA0AAAANQAAACkAAAA1AAAAMwAAAC4AAAA2
AAAANwAAAC4AAAA3AAAAOAAAAC4AAAA4AAAALwAAADMAAAA1AAAAOgAAADMAAAA6AAAAOwAA
ADMAAAA7AAAAOQAAADYAAAA8AAAAPQAAADYAAAA9AAAANwAAADkAAAA7AAAAPgAAADsAAAA/
AAAAPgAAADwAAABAAAAAQQAAADwAAABBAAAAPQAAAD4AAAA/AAAAQwAAAD4AAABDAAAAQgAA
AEAAAABEAAAAQQAAAEEAAABEAAAARgAAAEEAAABGAAAARQAAAEIAAABDAAAARwAAAEMAAABI
AAAASQAAAEMAAABJAAAARwAAAEUAAABGAAAASgAAAEUAAABKAAAASwAAAEgAAABMAAAASQAA
AEkAAABMAAAATQAAAEoAAABOAAAASwAAAEsAAABOAAAATwAAAEsAAABPAAAAUAAAAEwAAABR
AAAAUgAAAEwAAABSAAAAUwAAAEwAAABTAAAAVAAAAEwAAABUAAAATQAAAE8AAABVAAAAUQAA
AE8AAABRAAAAVgAAAE8AAABWAAAAUAAAAFEAAABVAAAAVwAAAFEAAABXAAAAWAAAAFEAAABY
AAAAUgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD8pAQAABAAA
AP//x8Bg4yTB+QoAv///x8Bg4yTB+QoAP///x8AQqyTBJggzv1Q4E8A0TCjB+QoAv///x8D2
wCTBY2sRP1Q4E8A0TCjB+QoAP///x8BwOiTBk+NSv6pxs8BuFSXBk+NSvwAAAAB2UijBk+NS
vwAAAADupijBOWM9vwAAAADB6yjB+QoAv///x8CW3CPBk+NSP0DCGcBfjSfBk+NSPwAAAADB
6yjB+QoAP4Y1s8B/FyPBJw+Qv///x8BhOSLBJw+QvwAAAABmUSbBJw+Qv///x8CG2yHBJw+Q
PwAAAAClhyjBab8rPwAAAABABCjBk+NSPwAAAAAwAybBJw+QPxZ8GcBPjCXBJw+QPwAAAAAC
JCPBlTuxvwAAAAAp6iXBj0WUv///x8DcCB/BlTuxv1DbssAb6h/BlTuxv84DGcDrXiLBlTux
P/z6x8ACqx7BlTuxP///x8ArliDBZkSdPwAAAAC70yTBMnqcPwJZssCzyBvB767KvwAAAABY
/B7B767Kv///x8AR3hrB767KvwAAAABEsR7B767KP3RtGMBiOh7B767KP///x8DMBx3BBki7
PwAAAADM1SLBlTuxP///x8CsWhrBCWXMv6fCscAa+BbB4qfavwAAAACeKBrB4qfavwAAAABi
5RzBrKbQPw7DF8DJaRnB4qfaP///x8BwnhjBT/XQP///x8BYgxrB767KP///x8A2BxbB4qfa
v///x8Cs4RXBSOvav///x8AtHxTByeTcv9ZlEsDZRxTBDiTgvwAAAAAI9hjBlRrcvwAAAACJ
3RnB4qfaPwAAAAAJoRfBazPdPwAAAAAk4RTBDiTgP9ZlEsDZRxTBDiTgP///x8AQ7BHB/P/e
P///x8CerxXB4qfaP///x8Ci1RDBDiTgvwAAAAAk4RTBDiTgvwAAAACjvYfADiTgP/z6x8Ci
1RDBDiTgP///x8CepfPADiTgP///x8CENIjADiTgvwAAAACcgYDADiTgvwAAAAAlZHvA/P/e
PwBgILqcgYDADiTgP///x8CENIjADiTgP///x8B3wXrA4qfavwAAAAAlZHvA/P/evwAAAADh
8m3AwAHbP///x8Bpj3rA4qfaP///x8CxNXbADO3WvwAAAAAkT2vA4qfavwAAAAC8pmvAhKXZ
PwAAAACmRlvAGjjMP///x8CBQGfA767KP///x8ALZmfA767KvwAAAAA051fA767KvwAAAAD9
7VjAzbfJPwAAAACkMUvAfMm0P///x8DgulbAlTuxP///x8BvcGPAu6DEvwAAAACMSEfAlTux
vwAAAACH/kjAlTuxPwAAAAABI0fAx8GsPwAAAAATrTzAQcWRP///x8DN+EnAJw+QP///x8Dn
01bAlTuxvwAAAAD1eTrAJw+QvwAAAAAtQjvAyWqMP///x8ARAULAk+NSP///x8CKv1PAHD+p
vwAAAAC2dTLAk+NSv///x8DUEUrAJw+Qv///x8BHHUjAcraGvwAAAAAY1DPAG9pOPwAAAAAc
TzDA+QoAP///x8CMJUDA+QoAP///x8CVDULAk+NSvwAAAAAcTzDA+QoAv///x8CMJUDA+QoA
v0YCAAAAAAAAAQAAAAQAAAAAAAAABAAAAAsAAAAAAAAACwAAABEAAAAAAAAAEQAAABwAAAAA
AAAAHAAAACMAAAAAAAAAIwAAACsAAAAAAAAAKwAAACoAAAAAAAAAKgAAADYAAAAAAAAANgAA
ADUAAAAAAAAANQAAADsAAAAAAAAAOwAAAEAAAAAAAAAAQAAAAEQAAAAAAAAARAAAAEkAAAAA
AAAASQAAAE4AAAAAAAAATgAAAFQAAAAAAAAAVAAAAFgAAAAAAAAAWAAAAF8AAAAAAAAAXwAA
AGIAAAAAAAAAYgAAAGAAAAAAAAAAYAAAAFwAAAAAAAAAXAAAAFsAAAAAAAAAWwAAAFkAAAAA
AAAAWQAAAFUAAAAAAAAAVQAAAE8AAAAAAAAATwAAAEoAAAAAAAAASgAAAEUAAAAAAAAARQAA
AEEAAAAAAAAAQQAAADwAAAAAAAAAPAAAADcAAAAAAAAANwAAAC4AAAAAAAAALgAAAC0AAAAA
AAAALQAAACwAAAAAAAAALAAAACUAAAAAAAAAJQAAACAAAAAAAAAAIAAAABgAAAAAAAAAGAAA
AA8AAAAAAAAADwAAAAYAAAAAAAAABgAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAUAAAAA
AAAABQAAAAEAAAABAAAABQAAAAQAAAACAAAABgAAAAcAAAACAAAABwAAAAMAAAADAAAACAAA
AAkAAAADAAAACQAAAAoAAAADAAAACgAAAA0AAAADAAAADQAAAAUAAAADAAAABwAAAAgAAAAE
AAAABQAAAAwAAAAEAAAADAAAAAsAAAAFAAAADQAAAAwAAAAGAAAADgAAAAcAAAAGAAAADwAA
AA4AAAAHAAAADgAAAAgAAAAIAAAADgAAABAAAAAIAAAAEAAAABcAAAAIAAAAFwAAABYAAAAI
AAAAFgAAAB8AAAAIAAAAHwAAACcAAAAIAAAAJwAAADAAAAAIAAAAMAAAADgAAAAIAAAAOAAA
AD0AAAAIAAAAPQAAAEIAAAAIAAAAQgAAAEYAAAAIAAAARgAAAEsAAAAIAAAASwAAAFAAAAAI
AAAAUAAAAFYAAAAIAAAAVgAAAFoAAAAIAAAAWgAAAGEAAAAIAAAAYQAAAF4AAAAIAAAAXgAA
AF0AAAAIAAAAXQAAAFcAAAAIAAAAVwAAAFMAAAAIAAAAUwAAAFIAAAAIAAAAUgAAAFEAAAAI
AAAAUQAAAE0AAAAIAAAATQAAAEwAAAAIAAAATAAAAEgAAAAIAAAASAAAAEcAAAAIAAAARwAA
AEMAAAAIAAAAQwAAAD4AAAAIAAAAPgAAADkAAAAIAAAAOQAAADMAAAAIAAAAMwAAADIAAAAI
AAAAMgAAADEAAAAIAAAAMQAAACgAAAAIAAAAKAAAACEAAAAIAAAAIQAAACQAAAAIAAAAJAAA
AB0AAAAIAAAAHQAAABQAAAAIAAAAFAAAABMAAAAIAAAAEwAAABIAAAAIAAAAEgAAAA0AAAAI
AAAADQAAAAoAAAAIAAAACgAAAAkAAAALAAAADAAAABEAAAAMAAAADQAAABIAAAAMAAAAEgAA
ABMAAAAMAAAAEwAAABQAAAAMAAAAFAAAABUAAAAMAAAAFQAAABEAAAAOAAAAFgAAABcAAAAO
AAAAFwAAABAAAAAOAAAADwAAABgAAAAOAAAAGAAAABkAAAAOAAAAGQAAABYAAAARAAAAGgAA
ABsAAAARAAAAGwAAABwAAAARAAAAFQAAABoAAAAUAAAAHQAAABUAAAAVAAAAHQAAABoAAAAW
AAAAGQAAAB4AAAAWAAAAHgAAAB8AAAAYAAAAIAAAAB4AAAAYAAAAHgAAABkAAAAaAAAAIQAA
ACIAAAAaAAAAIgAAACMAAAAaAAAAIwAAABsAAAAaAAAAHQAAACQAAAAaAAAAJAAAACEAAAAb
AAAAIwAAABwAAAAeAAAAIAAAACUAAAAeAAAAJQAAACYAAAAeAAAAJgAAAB8AAAAfAAAAJgAA
ACcAAAAhAAAAKAAAACIAAAAiAAAAKAAAACkAAAAiAAAAKQAAACoAAAAiAAAAKgAAACsAAAAi
AAAAKwAAACMAAAAlAAAALAAAACYAAAAmAAAALAAAAC0AAAAmAAAALQAAAC4AAAAmAAAALgAA
AC8AAAAmAAAALwAAADAAAAAmAAAAMAAAACcAAAAoAAAAMQAAACkAAAApAAAAMQAAADIAAAAp
AAAAMgAAADMAAAApAAAAMwAAADQAAAApAAAANAAAADUAAAApAAAANQAAADYAAAApAAAANgAA
ACoAAAAuAAAANwAAAC8AAAAvAAAAOAAAADAAAAAvAAAANwAAADwAAAAvAAAAPAAAAD0AAAAv
AAAAPQAAADgAAAAzAAAAOQAAAD8AAAAzAAAAPwAAAEAAAAAzAAAAQAAAADsAAAAzAAAAOwAA
ADoAAAAzAAAAOgAAADQAAAA0AAAAOgAAADUAAAA1AAAAOgAAADsAAAA5AAAAPgAAAD8AAAA8
AAAAQQAAAEIAAAA8AAAAQgAAAD0AAAA+AAAAQwAAAEQAAAA+AAAARAAAAEAAAAA+AAAAQAAA
AD8AAABBAAAARQAAAEYAAABBAAAARgAAAEIAAABDAAAARwAAAEQAAABEAAAARwAAAEgAAABE
AAAASAAAAEkAAABFAAAASgAAAEsAAABFAAAASwAAAEYAAABIAAAATAAAAEkAAABJAAAATAAA
AE0AAABJAAAATQAAAE4AAABKAAAATwAAAEsAAABLAAAATwAAAFAAAABNAAAAUQAAAE4AAABO
AAAAUQAAAFIAAABOAAAAUgAAAFMAAABOAAAAUwAAAFQAAABPAAAAVQAAAFAAAABQAAAAVQAA
AFYAAABTAAAAVwAAAFQAAABUAAAAVwAAAFgAAABVAAAAWQAAAFYAAABWAAAAWQAAAFsAAABW
AAAAWwAAAFwAAABWAAAAXAAAAFoAAABXAAAAXQAAAFgAAABYAAAAXQAAAF4AAABYAAAAXgAA
AF8AAABaAAAAXAAAAGAAAABaAAAAYAAAAGEAAABeAAAAYQAAAGIAAABeAAAAYgAAAF8AAABg
AAAAYgAAAGEAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/dwEA
AAQAAAAAAAAAHuoowfkKAL/uiCtA9aEpwfkKAL8AAAAAHuoowfkKAD8AAAAArqsowTljPb/u
iCtA9aEpwfkKAD/0k04/5soowZPjUr/89cdAtgEowUspQb/89cdALnQowfkKAL8AAAAA/ogo
wWm/Kz8AAAAA9lQowZPjUr/89cdALnQowfkKAD8cgYBA5soowZPjUj8AAAAALgUowZPjUj88
DE8//8wmwScPkL/89cdA6MElwScPkL/89cdABnAnwR6mXr/89cdAVrwnwZPjUr8CAMhAlsSY
wA4k4L8CAMhAgv+dwA4k4D8AAAAAmFMmwScPkL/89cdAjkoowVUTID/89cdAlg8owdVWRj/8
9cdANlsnwWUcaz/89cdA95gmwceEhD8Wd4BA/8wmwScPkD8AAAAASAcmwScPkD8AAAAAAO8l
wY9FlL+IhE8/2p0jwZU7sb/89cdAwpIiwZU7sb/89cdA3Wkewe+uyr/89cdAeZoZweKn2r/8
9cdAknoYwa9/3L/89cdA6z4Xwevb3b/89cdAbW0UwQ4k4L/89cdA2DZNwA4k4L/89cdA5QA7
wCZF27/89cdA59U4wOKn2r/89cdA9H0nwM5ZzL/89cdAlnwlwO+uyr/89cdAAtkUwJU7sb/8
9cdAbBwIwCcPkL/89cdA0gIBwKbtW7/89cdA8hYAwJPjUr/89cdA5E//vwlySL/89cdA6Kz5
v/kKAL8CAMhAipeTwA4k4D/89cdAbW0UwQ4k4D/89cdA6z4Xwevb3T/89cdAcvcYwVoP3D/8
9cdAqEEbwXpx1j/89cdAViAdwVc20D/89cdA7UAfwUQsxz/89cdAtN0gwcJMvT/89cdAcrUi
wR0lsT/89cdA8TkkwQBFoj/89cdAmHUlwaBplT8KY4BA2p0jwZU7sT8AAAAAItgiwZU7sT8A
AAAAciQjwZU7sb8AAAAAoqAiwZ5vtL8AAAAABf8ewe+uyr8ATVA/9HQfwe+uyr+QPVE/GKIa
weKn2r+63SxANJsVwQ4k4L/ISb9Al59OwA4k4L/GnLhAZTg7wOKn2r8kjrdAtAgowO+uyr+a
p7ZAwI4XwJU7sb8w+LVACuAKwCcPkL/uibVAUPYCwJPjUr9uCb1A5CT9v/kKAL/89cdA6Kz5
v/kKAD/89cdAKAD6v6fEDD/89cdA8GMBwJPjUj/89cdAznoEwM2jcD/89cdAamkJwCcPkD/8
9cdA4TMWwJU7sT/89cdAvMIcwMo8uz/89cdAVeUmwO+uyj/89cdAhkw6wOKn2j/89cdAOnNK
wFJw3z/89cdA2DZNwA4k4D+63SxANJsVwQ4k4D/oK4BAGKIaweKn2j/6SYBA9HQfwe+uyj8A
AAAAtbIewe+uyj8AAAAAsCgaweKn2r8AAAAAcvcYwZUa3L8AAAAA5N8UwQ4k4L8AAAAAqHyA
wA4k4L8AAAAAVVZ7wPz/3r9oVOM/hwBjwHwG3b8AAAAAYUtrwOKn2r+Ljd4/0yZUwC3x078A
AAAAMORXwO+uyr8AAAAAvDJHwJU7sb8AAAAAJnY6wCcPkL8AAAAASF83wPlbgb8AAAAAzGIy
wJPjUr9uCb1A5CT9v/kKAD8AAAAArkUwwPkKAL+mEU5AAZUWwJPjUj9VNE9Au34ewCcPkD9j
91BAkR8rwJU7sT/GRlNAxX07wO+uyj9l+lVAl59OwOKn2j/ISb9Al59OwA4k4D8AAAAA5N8U
wQ4k4D8AAAAACqAXwWsz3T8AAAAA2d8ZweKn2j8AAAAArkUwwPkKAD8AAAAAi8szwBvaTj8A
AAAAZTg7wMlqjD8AAAAAJKE8wEHFkT8AAAAA/BZHwMfBrD8AAAAAu+5IwJU7sT8AAAAAuRlL
wHzJtD8AAAAAz+tYwM23yT8AAAAAjTJbwBo4zD9/ed4/0yZUwC3x0z8AAAAAoZ5rwISl2T8A
AAAAX+VtwMAB2z9oVOM/hwBjwHwG3T8AYCA6VVZ7wPz/3j8AAAAAqHyAwA4k4D/iAgAAAAAA
AAEAAAAEAAAAAAAAAAQAAAACAAAAAAAAAAIAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAZ
AAAAAAAAABkAAAA5AAAAAAAAADkAAABVAAAAAAAAAFUAAABtAAAAAAAAAG0AAABsAAAAAAAA
AGwAAABrAAAAAAAAAGsAAAB8AAAAAAAAAHwAAAB5AAAAAAAAAHkAAAB4AAAAAAAAAHgAAAB2
AAAAAAAAAHYAAAB1AAAAAAAAAHUAAAB0AAAAAAAAAHQAAABzAAAAAAAAAHMAAAByAAAAAAAA
AHIAAABxAAAAAAAAAHEAAABwAAAAAAAAAHAAAABvAAAAAAAAAG8AAABuAAAAAAAAAG4AAABk
AAAAAAAAAGQAAABiAAAAAAAAAGIAAABhAAAAAAAAAGEAAABgAAAAAAAAAGAAAABfAAAAAAAA
AF8AAABeAAAAAAAAAF4AAABcAAAAAAAAAFwAAABaAAAAAAAAAFoAAABZAAAAAAAAAFkAAABY
AAAAAAAAAFgAAABXAAAAAAAAAFcAAABWAAAAAAAAAFYAAAA8AAAAAAAAADwAAAA7AAAAAAAA
ADsAAAA6AAAAAAAAADoAAAAaAAAAAAAAABoAAAATAAAAAAAAABMAAAAJAAAAAAAAAAkAAAAD
AAAAAAAAAAMAAAABAAAAAQAAAAMAAAAFAAAAAQAAAAUAAAAGAAAAAQAAAAYAAAAHAAAAAQAA
AAcAAAAKAAAAAQAAAAoAAAAEAAAAAgAAAAQAAAAIAAAAAwAAAAkAAAAFAAAABAAAAAoAAAAL
AAAABAAAAAsAAAAMAAAABAAAAAwAAAAIAAAABQAAAAkAAAANAAAABQAAAA0AAAAOAAAABQAA
AA4AAAAPAAAABQAAAA8AAAAQAAAABQAAABAAAAAGAAAABgAAABAAAAARAAAABgAAABEAAAAH
AAAABwAAABEAAAASAAAABwAAABIAAAAKAAAACQAAABMAAAANAAAACgAAABIAAAAUAAAACgAA
ABQAAAALAAAACwAAABQAAAAVAAAACwAAABUAAAAWAAAACwAAABYAAAAXAAAACwAAABcAAAAY
AAAACwAAABgAAAAMAAAADAAAABgAAAAZAAAADQAAABMAAAAaAAAADQAAABoAAAAbAAAADQAA
ABsAAAAOAAAADgAAABsAAAAcAAAADgAAABwAAAARAAAADgAAABEAAAAPAAAADwAAABEAAAAQ
AAAAEQAAABwAAAAdAAAAEQAAAB0AAAAeAAAAEQAAAB4AAAAfAAAAEQAAAB8AAAAgAAAAEQAA
ACAAAAAhAAAAEQAAACEAAAA/AAAAEQAAAD8AAABYAAAAEQAAAFgAAABZAAAAEQAAAFkAAABA
AAAAEQAAAEAAAAAiAAAAEQAAACIAAAAjAAAAEQAAACMAAAAkAAAAEQAAACQAAAAlAAAAEQAA
ACUAAAAmAAAAEQAAACYAAAAnAAAAEQAAACcAAAAoAAAAEQAAACgAAAApAAAAEQAAACkAAAAq
AAAAEQAAACoAAAArAAAAEQAAACsAAAAsAAAAEQAAACwAAAAtAAAAEQAAAC0AAAASAAAAEgAA
AC4AAAAvAAAAEgAAAC8AAAAwAAAAEgAAADAAAAAxAAAAEgAAADEAAAAyAAAAEgAAADIAAAAz
AAAAEgAAADMAAAA0AAAAEgAAADQAAAA1AAAAEgAAADUAAAA2AAAAEgAAADYAAAA3AAAAEgAA
ADcAAAAXAAAAEgAAABcAAAAWAAAAEgAAABYAAAAVAAAAEgAAABUAAAAUAAAAEgAAAC0AAABR
AAAAEgAAAFEAAABqAAAAEgAAAGoAAAB8AAAAEgAAAHwAAABrAAAAEgAAAGsAAABSAAAAEgAA
AFIAAAAuAAAAFwAAADcAAAAYAAAAGAAAADcAAAA2AAAAGAAAADYAAAA4AAAAGAAAADgAAAAZ
AAAAGQAAADgAAAA5AAAAGgAAADoAAAAbAAAAGwAAADoAAAA7AAAAGwAAADsAAAA8AAAAGwAA
ADwAAAA9AAAAGwAAAD0AAAAcAAAAHAAAAD0AAAAdAAAAHQAAAD0AAAAeAAAAHgAAAD0AAAA+
AAAAHgAAAD4AAAAfAAAAHwAAAD4AAAA/AAAAHwAAAD8AAAAgAAAAIAAAAD8AAAAhAAAAIgAA
AEAAAAAjAAAAIwAAAEAAAABBAAAAIwAAAEEAAAAkAAAAJAAAAEEAAAAlAAAAJQAAAEEAAABC
AAAAJQAAAEIAAAAmAAAAJgAAAEIAAAAnAAAAJwAAAEIAAABDAAAAJwAAAEMAAABEAAAAJwAA
AEQAAAAoAAAAKAAAAEQAAAApAAAAKQAAAEQAAABFAAAAKQAAAEUAAAAqAAAAKgAAAEUAAAAr
AAAAKwAAAEUAAAAsAAAALAAAAEUAAABGAAAALAAAAEYAAABjAAAALAAAAGMAAABHAAAALAAA
AEcAAAAtAAAALQAAAEcAAABIAAAALQAAAEgAAABJAAAALQAAAEkAAABKAAAALQAAAEoAAABL
AAAALQAAAEsAAABMAAAALQAAAEwAAABNAAAALQAAAE0AAABOAAAALQAAAE4AAABPAAAALQAA
AE8AAABQAAAALQAAAFAAAABRAAAALgAAAFIAAAAvAAAALwAAAFIAAAAwAAAAMAAAAFIAAABT
AAAAMAAAAFMAAAAxAAAAMQAAAFMAAABUAAAAMQAAAFQAAAAyAAAAMgAAAFQAAAAzAAAAMwAA
AFQAAAA4AAAAMwAAADgAAAA0AAAANAAAADgAAAA1AAAANQAAADgAAAA2AAAAOAAAAFQAAABV
AAAAOAAAAFUAAAA5AAAAPAAAAD4AAAA9AAAAPAAAAFYAAAA+AAAAPgAAAFYAAABXAAAAPgAA
AFcAAAA/AAAAPwAAAFcAAABYAAAAQAAAAFkAAABaAAAAQAAAAFoAAABbAAAAQAAAAFsAAABB
AAAAQQAAAFsAAABcAAAAQQAAAFwAAABdAAAAQQAAAF0AAABCAAAAQgAAAF0AAABeAAAAQgAA
AF4AAABDAAAAQwAAAF4AAABfAAAAQwAAAF8AAABEAAAARAAAAF8AAABgAAAARAAAAGAAAABh
AAAARAAAAGEAAABiAAAARAAAAGIAAABFAAAARQAAAGIAAABGAAAARgAAAGIAAABkAAAARgAA
AGQAAABuAAAARgAAAG4AAABjAAAARwAAAGMAAABIAAAASAAAAGMAAABJAAAASQAAAGMAAABl
AAAASQAAAGUAAABKAAAASgAAAGUAAABLAAAASwAAAGUAAABmAAAASwAAAGYAAABMAAAATAAA
AGYAAABnAAAATAAAAGcAAABoAAAATAAAAGgAAABNAAAATQAAAGgAAABOAAAATgAAAGgAAABP
AAAATwAAAGgAAABpAAAATwAAAGkAAABqAAAATwAAAGoAAABQAAAAUAAAAGoAAABRAAAAUgAA
AGsAAABsAAAAUgAAAGwAAABtAAAAUgAAAG0AAABTAAAAUwAAAFUAAABUAAAAUwAAAG0AAABV
AAAAWgAAAFwAAABbAAAAXAAAAF4AAABdAAAAYwAAAG4AAABlAAAAZQAAAG4AAABvAAAAZQAA
AG8AAABwAAAAZQAAAHAAAABmAAAAZgAAAHAAAABxAAAAZgAAAHEAAAByAAAAZgAAAHIAAABn
AAAAZwAAAHIAAABzAAAAZwAAAHMAAAB0AAAAZwAAAHQAAABoAAAAaAAAAHQAAAB1AAAAaAAA
AHUAAAB2AAAAaAAAAHYAAAB3AAAAaAAAAHcAAABpAAAAaQAAAHcAAAB4AAAAaQAAAHgAAAB5
AAAAaQAAAHkAAAB6AAAAaQAAAHoAAABqAAAAagAAAHoAAAB7AAAAagAAAHsAAAB8AAAAdgAA
AHgAAAB3AAAAeQAAAHwAAAB7AAAAeQAAAHsAAAB6AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQ
AAAAAAAAAAAAAAAAAAAAAACAP4YBAAAEAAAA/v9HQWQW3cAOJOC//v9HQcXs28AOJOC/AQVI
QUhZFcEOJOC/AQVIQe1NGcGER9y/AQVIQbymGsHip9q/AQVIQVxuG8GUJ9i/AQVIQQqAH8Hv
rsq/AQVIQYCnI8GVO7G/AQVIQeciJMH6Oqy/AQVIQSbYJsEnD5C/AQVIQV4kJ8GVT4q/AQVI
QerXKMGT41K/AQVIQQYvKcEGmTy/AQVIQTVeKcH5CgC/AQVIQTVeKcH5CgA/AQVIQRkHKcFq
si8/AQVIQZWWKMGT41I/AQVIQTCTJsEnD5A/AQVIQcxpI8GVO7E/AQVIQY20IMFD6ME/AQVI
QVZCH8Hvrso/AQVIQetzGsHip9o/AQVIQWl7GMHJ5Nw/AQVIQUhZFcEOJOA/AQVIQQZNNcAO
JOA/AQVIQU5+I8C3wNs/AQVIQZ/OH8Dip9o/AQVIQep3DMDvrso/AQVIQXCs+79zN7Q/AQVI
QTDR97+VO7E/AQVIQQBM3r8nD5A/AQVIQdxNzr+T41I/AQVIQTRDzL/lNkI/AQVIQbSsyr/5
CgA/AQVIQbSsyr/5CgC/AQVIQWTUzL8kIiu/AQVIQbTp0L+T41K/AQVIQdjn4L8nD5C/AQVI
Qfio6r/VyJy/AQVIQQht+r+VO7G/AQVIQdXFDcDvrsq/AQVIQQYOIcDip9q/AQVIQZCGKsBa
YN2/AQVIQQZNNcAOJOC/AtxcQTa9FMEOJOC/whx3QQKeF8Hip9q/kqF3QW1sHMHvrsq/1xR4
QaCMIMGVO7G/DW94QQS2I8EnD5C/4yhfQdidKMH5CgC/raN4QSiyJcGT41K/4yhfQdidKMH5
CgA/DhtcQbIpKMGT41I//PxbQe4pJsEnD5A/28VbQUj5IsGVO7E/sX9bQXPVHsHvrso/AjJb
QQgHGsHip9o/AtxcQTa9FMEOJOA/bOJlQYYuMsAOJOA/oWVRQY8MHsDip9o/lVFRQV7ECsDv
rso/jEJRQRBN9L+VO7E/hjhRQejk2r8nD5A/gC5RQcTmyr+T41I/PutoQaA1xL/5CgA/Puto
QaA1xL/5CgC/vLx4QcTmyr+T41K/trJ4Qejk2r8nD5C/sKh4QRBN9L+VO7G/JZd4QV7ECsDv
rsq/GYN4QY8MHsDip9q/bOJlQYYuMsAOJOC/3MSGQWyQD8EOJOC///+VQVA5D8E3GNu///+V
QQ2UD8Hip9q///+VQZ50FMHvrsq///+VQfemGMGVO7G///+VQYHiG8EnD5C/dZmIQYBFI8H5
CgC///+VQbe2HcFi/1m///+VQUXiHcGT41K///+VQVgcHsGzX0W/dZmIQYBFI8H5CgA/W4OK
QXgCIsGT41I/Q1uKQVUGIMEnD5A/Hh+KQTTkHMGVO7E/7s6JQUPLGMHvrso/eHOJQRoEFMHi
p9o/3MSGQWyQD8EOJOA/HoiUQeSNOcAOJOA/RsuPQSDtIsDip9o/WOmPQe+kD8Dvrso/5f+P
QTwr/r+VO7E/8ROQQRTD5L8nD5A/eSCQQfDE1L+T41I///+VQQT/1L8NCA0///+VQdyK1L/5
CgA///+VQdyK1L/5CgC///+VQein1L8tdwO///+VQewR3r+T41K///+VQRAQ7r8nD5C///+V
QWCf/r80saW///+VQRy8A8CVO7G///+VQfJZFMDvrsq///+VQQYOIcDyNtW///+VQaewJ8Di
p9q/HoiUQeSNOcAOJOC///+VQWH6CcEOJOC///+VQclSHsH5CgC///+VQclSHsH5CgA///+V
QdMNHsHgMyk///+VQUaAHcGT41I///+VQT95G8EnD5A///+VQRQ6GMGVO7E///+VQRoEFMHv
rso///+VQaYYD8Hip9o///+VQdk3DMHr290///+VQWH6CcEOJOA///+VQbOEOsAOJOA///+V
Qf/kOcBaAuA///+VQSOiJ8D7DNs///+VQeNOJcCEpdk///+VQSDrFMCjIcw///+VQadxE8Dv
rso///+VQdLTAsCVO7E///+VQXAi7L8nD5A///+VQUQH3L+T41I///+VQX1OOMAFkt+///+V
Qf/kOcBaAuC///+VQbOEOsAOJOC/AAMAAAAAAAABAAAAKwAAAAAAAAArAAAARwAAAAAAAABH
AAAAagAAAAAAAABqAAAAgQAAAAAAAACBAAAAawAAAAAAAABrAAAASAAAAAAAAABIAAAALAAA
AAAAAAAsAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAF
AAAABgAAAAAAAAAGAAAABwAAAAAAAAAHAAAACAAAAAAAAAAIAAAACQAAAAAAAAAJAAAACgAA
AAAAAAAKAAAACwAAAAAAAAALAAAADAAAAAAAAAAMAAAADQAAAAAAAAANAAAADgAAAAAAAAAO
AAAADwAAAAAAAAAPAAAAEAAAAAAAAAAQAAAAEQAAAAAAAAARAAAAEgAAAAAAAAASAAAAEwAA
AAAAAAATAAAAFAAAAAAAAAAUAAAAFQAAAAAAAAAVAAAAFgAAAAAAAAAWAAAAFwAAAAAAAAAX
AAAAGAAAAAAAAAAYAAAAAQAAAAEAAAAYAAAAGQAAAAEAAAAZAAAAGgAAAAEAAAAaAAAAGwAA
AAEAAAAbAAAAHAAAAAEAAAAcAAAAHQAAAAEAAAAdAAAAHgAAAAEAAAAeAAAAHwAAAAEAAAAf
AAAAIAAAAAEAAAAgAAAAIQAAAAEAAAAhAAAAIgAAAAEAAAAiAAAAIwAAAAEAAAAjAAAAJAAA
AAEAAAAkAAAAJQAAAAEAAAAlAAAAJgAAAAEAAAAmAAAAJwAAAAEAAAAnAAAAKAAAAAEAAAAo
AAAAKQAAAAEAAAApAAAAKgAAAAEAAAAqAAAAKwAAAAIAAAAsAAAAAwAAAAMAAAAsAAAALQAA
AAMAAAAtAAAABAAAAAQAAAAtAAAABQAAAAUAAAAtAAAALgAAAAUAAAAuAAAABgAAAAYAAAAv
AAAABwAAAAYAAAAuAAAALwAAAAcAAAAvAAAACAAAAAgAAAAvAAAACQAAAAkAAAAvAAAAMAAA
AAkAAAAwAAAACgAAAAoAAAAwAAAACwAAAAsAAAAxAAAADAAAAAsAAAAwAAAAMgAAAAsAAAAy
AAAAMQAAAAwAAAAxAAAADQAAAA0AAAAxAAAAMwAAAA0AAAAzAAAADgAAAA4AAAAzAAAANAAA
AA4AAAA0AAAADwAAAA8AAAA0AAAAEAAAABAAAAA0AAAANQAAABAAAAA1AAAAEQAAABEAAAA1
AAAAEgAAABIAAAA2AAAAEwAAABIAAAA1AAAANgAAABMAAAA2AAAANwAAABMAAAA3AAAAFAAA
ABQAAAA3AAAAFQAAABUAAAA4AAAAFgAAABUAAAA3AAAAOAAAABYAAAA5AAAAFwAAABYAAAA4
AAAAOQAAABcAAAA5AAAAWAAAABcAAABYAAAAdQAAABcAAAB1AAAAdgAAABcAAAB2AAAAWQAA
ABcAAABZAAAAOgAAABcAAAA6AAAAGAAAABgAAAA6AAAAOwAAABgAAAA7AAAAGQAAABkAAAA7
AAAAGgAAABoAAAA7AAAAGwAAABsAAAA7AAAAPAAAABsAAAA8AAAAPQAAABsAAAA9AAAAHAAA
ABwAAAA9AAAAHQAAAB0AAAA9AAAAHgAAAB4AAAA9AAAAPgAAAB4AAAA+AAAAPwAAAB4AAAA/
AAAAHwAAAB8AAAA/AAAAIAAAACAAAAA/AAAAQAAAACAAAABAAAAAIQAAACEAAABAAAAAQQAA
ACEAAABBAAAAIgAAACIAAABBAAAAIwAAACMAAABBAAAAJAAAACQAAABBAAAAQgAAACQAAABC
AAAAQwAAACQAAABDAAAAJQAAACUAAABEAAAAJgAAACUAAABDAAAARAAAACYAAABEAAAAJwAA
ACcAAABEAAAAKAAAACgAAABFAAAARgAAACgAAABGAAAAKQAAACgAAABEAAAARQAAACkAAABG
AAAARwAAACkAAABHAAAAKgAAACoAAABHAAAAKwAAACwAAABIAAAALQAAAC0AAABIAAAASQAA
AC0AAABJAAAASgAAAC0AAABKAAAALgAAAC4AAABKAAAASwAAAC4AAABLAAAATAAAAC4AAABM
AAAALwAAAC8AAABMAAAATQAAAC8AAABNAAAAMAAAADAAAABNAAAAMgAAADEAAAAyAAAATgAA
ADEAAABOAAAAUgAAADEAAABSAAAAMwAAADIAAABNAAAATwAAADIAAABPAAAAUAAAADIAAABQ
AAAAUQAAADIAAABRAAAATgAAADMAAABSAAAANAAAADQAAABSAAAAUwAAADQAAABTAAAANQAA
ADUAAABTAAAAVAAAADUAAABUAAAAVQAAADUAAABVAAAANgAAADYAAABVAAAAVgAAADYAAABW
AAAANwAAADcAAABWAAAAOAAAADgAAABWAAAAVwAAADgAAABXAAAAWAAAADgAAABYAAAAOQAA
ADoAAABZAAAAWgAAADoAAABaAAAAOwAAADsAAABaAAAAWwAAADsAAABbAAAAPAAAADwAAABb
AAAAPQAAAD0AAABbAAAAXAAAAD0AAABcAAAAXQAAAD0AAABdAAAAPgAAAD4AAABeAAAAPwAA
AD4AAABdAAAAXgAAAD8AAABeAAAAQAAAAEAAAABeAAAAXwAAAEAAAABfAAAAYAAAAEAAAABg
AAAAYQAAAEAAAABhAAAAQQAAAEEAAABhAAAAYgAAAEEAAABiAAAAQgAAAEIAAABiAAAAYwAA
AEIAAABjAAAAZAAAAEIAAABkAAAAQwAAAEMAAABkAAAAZQAAAEMAAABlAAAARAAAAEQAAABl
AAAAZgAAAEQAAABmAAAAZwAAAEQAAABnAAAARQAAAEUAAABnAAAAaAAAAEUAAABoAAAARgAA
AEYAAABoAAAAaQAAAEYAAABpAAAAagAAAEYAAABqAAAARwAAAEgAAABrAAAASQAAAEkAAABr
AAAAgQAAAEkAAACBAAAAgAAAAEkAAACAAAAAfwAAAEkAAAB/AAAAaQAAAEkAAABpAAAAaAAA
AEkAAABoAAAAZwAAAEkAAABnAAAAZgAAAEkAAABmAAAAZQAAAEkAAABlAAAAZAAAAEkAAABk
AAAAYwAAAEkAAABjAAAAYgAAAEkAAABiAAAAYQAAAEkAAABhAAAAYAAAAEkAAABgAAAAXwAA
AEkAAABfAAAAfgAAAEkAAAB+AAAAfQAAAEkAAAB9AAAAfAAAAEkAAAB8AAAAewAAAEkAAAB7
AAAAegAAAEkAAAB6AAAAeQAAAEkAAAB5AAAAeAAAAEkAAAB4AAAAdwAAAEkAAAB3AAAAdgAA
AEkAAAB2AAAAdQAAAEkAAAB1AAAAdAAAAEkAAAB0AAAAcwAAAEkAAABzAAAAcgAAAEkAAABy
AAAAcQAAAEkAAABxAAAAcAAAAEkAAABwAAAAbwAAAEkAAABvAAAAbgAAAEkAAABuAAAAbQAA
AEkAAABtAAAAbAAAAEkAAABsAAAAUQAAAEkAAABRAAAAUAAAAEkAAABQAAAATwAAAEkAAABP
AAAATQAAAEkAAABNAAAATAAAAEkAAABMAAAASwAAAEkAAABLAAAASgAAAE4AAABRAAAAbAAA
AE4AAABsAAAAbQAAAE4AAABtAAAAUgAAAFIAAABtAAAAbgAAAFIAAABuAAAAUwAAAFMAAABu
AAAAbwAAAFMAAABvAAAAcAAAAFMAAABwAAAAVAAAAFQAAABwAAAAVQAAAFUAAABwAAAAcQAA
AFUAAABxAAAAcgAAAFUAAAByAAAAVgAAAFYAAAByAAAAVwAAAFcAAAByAAAAcwAAAFcAAABz
AAAAdAAAAFcAAAB0AAAAdQAAAFcAAAB1AAAAWAAAAFkAAAB2AAAAdwAAAFkAAAB3AAAAeAAA
AFkAAAB4AAAAWgAAAFoAAAB4AAAAeQAAAFoAAAB5AAAAegAAAFoAAAB6AAAAWwAAAFsAAAB6
AAAAewAAAFsAAAB7AAAAfAAAAFsAAAB8AAAAXAAAAFwAAAB8AAAAfQAAAFwAAAB9AAAAXQAA
AF0AAAB9AAAAfgAAAF0AAAB+AAAAXgAAAF4AAAB+AAAAXwAAAGkAAAB/AAAAagAAAGoAAACA
AAAAgQAAAGoAAAB/AAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAA
AAAAgD96AQAABAAAAAAAyEBnbijB+QoAvwAAyEBnbijB+QoAPwAAyEDa/SfBSylBvzTWLEHc
NyrB+QoAvwAAyEAZSijBVRMgPzTWLEHcNyrB+QoAP+R7P0GoYSnBk+NSvwAAyECBvCfBk+NS
v/36R0FkWinB+QoAvwAAyEBgDCjB1VZGP7XXIkGoYSnBk+NSP/36R0FkWinB+QoAP/36R0FC
AynBarIvP/36R0G2kijBk+NSP/36R0EyKynBBpk8vwAAyEBDcCfBHqZev9tsP0G9YSfBJw+Q
v/36R0El1CbBJw+Qv/36R0FkICfBlU+Kv/36R0EQ1CjBk+NSvwAASEF+tA7BDiTgvwAAyEB6
WifBZRxrP/36R0FTSCfBgpaCP7vhIkG9YSfBJw+QPwAASEF+tA7BDiTgPwAAyECWvCXBJw+Q
vwAAyEAmQSXB/hqVvwAAyEBWjyLBlTuxv9JdP0HaMCTBlTuxv/36R0GzHiTB+jqsv/36R0FC
oyPBlTuxv/36R0Egfx/B767Kv/36R0EWqRrB4qfav/36R0GNTBnBhEfcv/36R0GdVxXBDiTg
vwAASEEYr63ADiTgvwAAyEDMkibBx4SEP/36R0HMkibBJw+QP/36R0G6gCTBNLGlP/36R0GK
ZSPBlTuxP8TwIkHaMCTBlTuxPwAAyEAdOCTBAEWiPwAAyED6cyXBoGmVPwAASEEYr63ADiTg
P/36R0GdVxXBDiTgP/36R0FYdhjByeTcP/36R0EAbxrB4qfaP/36R0EmFBzB8jbVP/36R0Fn
QR/B767KP/36R0EYsCDBQ+jBPwAAyEAzax7B767Kv8NEP0G4DCDB767KvzYuP0FQOhvB4qfa
vyXoK0HSLRbBDiTgv/36R0EZUzXADiTgv/36R0HXiyrAWmDdv/36R0EfISHA4qfav/36R0Hk
KBXAYMjQv/36R0GA1w3A767Kv/36R0HykgPAZPm6v/36R0HgcPq/lTuxv/36R0HUBuG/Jw+Q
v/36R0GEB9G/k+NSv/36R0Ho8cy/JCIrv/36R0EArcq/+QoAv9MJI0G4DCDB767KPwAAyEDG
PR/BRCzHPwAAyEAI2CDBwky9PwAAyEACsCLBHSWxP/36R0Gh4R/A4qfaP/36R0GWkSPAt8Db
P/36R0EZUzXADiTgP/36R0EArcq/+QoAP/36R0GsYMy/5TZCP/36R0F8a86/k+NSP/36R0HM
at6/Jw+QP/36R0H4XeG/7PaTP/36R0Hk8fe/lTuxP/36R0Fozfu/cze0P/36R0F8iQzA767K
PyXoK0HSLRbBDiTgP+IiI0FQOhvB4qfaPwAAyEAqlRnB4qfavwAAyEBYdhjBr3/cvwAAyEB8
OhfB69vdvwAAyED+ZxTBDiTgv5qqIkElPTnADiTgv61KKkHX8SLA4qfav4kOKkE4qA/A767K
v2vcKUFkTP6/lTuxv1a5KUFc4uS/Jw+Qv0egKUEI49S/k+NSvyqbI0HItdG/+QoAvwAAyECT
QRvBenHWPwAAyEDQIB3BVzbQP8JDA0GxsyzA4qfaP5qqIkElPTnADiTgPyqbI0HItdG/+QoA
P5stAkHMg+i/k+NSP7NVAkEcg/i/Jw+QP1mUAkEN6AjAlTuxP4nkAkGYeBnA767KPwAAyED+
ZxTBDiTgPwAAyEB8OhfB69vdPwAAyEBq9RjBWg/cPwAAyECOQ03ADiTgvwAAyEDdDTvAJkXb
vwAAyEAD5jjA4qfavwAAyEBZfyXA767KvwAAyEBI4BTAlTuxvwAAyEBSlgnAOdWTvwAAyEBD
KwjAJw+QvwAAyEAUHQDAk+NSvwAAyECk3/m/+QoAvwAAyED6ry7AxgvRPwAAyECYXzrA4qfa
PwAAyEB7ikrAUnDfPwAAyECOQ03ADiTgPwAAyECk3/m/+QoAPwAAyEC8Gfq/p8QMPwAAyECe
eQHAk+NSPwAAyEDUiQTAzaNwPwAAyEBHeQnAJw+QPwAAyEBXSxbAlTuxPwAAyEBr0RzAyjy7
PwAAyEDu+CbA767KP+gCAAAAAAAAAQAAAAQAAAAAAAAABAAAAAkAAAAAAAAACQAAABUAAAAA
AAAAFQAAACQAAAAAAAAAJAAAACoAAAAAAAAAKgAAACkAAAAAAAAAKQAAAEQAAAAAAAAARAAA
AEMAAAAAAAAAQwAAAEIAAAAAAAAAQgAAAF4AAAAAAAAAXgAAAF0AAAAAAAAAXQAAAGgAAAAA
AAAAaAAAAGcAAAAAAAAAZwAAAGYAAAAAAAAAZgAAAHUAAAAAAAAAdQAAAHQAAAAAAAAAdAAA
AHMAAAAAAAAAcwAAAHIAAAAAAAAAcgAAAH0AAAAAAAAAfQAAAHwAAAAAAAAAfAAAAHsAAAAA
AAAAewAAAHoAAAAAAAAAegAAAHkAAAAAAAAAeQAAAHgAAAAAAAAAeAAAAHcAAAAAAAAAdwAA
AHYAAAAAAAAAdgAAAHEAAAAAAAAAcQAAAHAAAAAAAAAAcAAAAG8AAAAAAAAAbwAAAG4AAAAA
AAAAbgAAAG0AAAAAAAAAbQAAAGwAAAAAAAAAbAAAAGsAAAAAAAAAawAAAGoAAAAAAAAAagAA
AGkAAAAAAAAAaQAAAFUAAAAAAAAAVQAAAFQAAAAAAAAAVAAAAFMAAAAAAAAAUwAAAFIAAAAA
AAAAUgAAADIAAAAAAAAAMgAAABsAAAAAAAAAGwAAABoAAAAAAAAAGgAAABkAAAAAAAAAGQAA
AA8AAAAAAAAADwAAAAcAAAAAAAAABwAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAUAAAAA
AAAABQAAAAEAAAABAAAABQAAAAQAAAACAAAABgAAAAMAAAACAAAABwAAAAYAAAADAAAABgAA
AAgAAAADAAAACAAAAAsAAAADAAAACwAAAAUAAAAEAAAABQAAAAkAAAAFAAAACgAAAAkAAAAF
AAAACwAAAAwAAAAFAAAADAAAAA0AAAAFAAAADQAAAAoAAAAGAAAADgAAAAgAAAAGAAAABwAA
AA8AAAAGAAAADwAAABAAAAAGAAAAEAAAABEAAAAGAAAAEQAAABIAAAAGAAAAEgAAABMAAAAG
AAAAEwAAAA4AAAAIAAAADgAAABQAAAAIAAAAFAAAABgAAAAIAAAAGAAAAAsAAAAJAAAACgAA
ABUAAAAKAAAADQAAABYAAAAKAAAAFgAAABcAAAAKAAAAFwAAABUAAAALAAAAGAAAAAwAAAAM
AAAAGAAAAA0AAAANAAAAGAAAABYAAAAOAAAAEwAAABQAAAAPAAAAGQAAABAAAAAQAAAAGQAA
ABoAAAAQAAAAGgAAABsAAAAQAAAAGwAAABwAAAAQAAAAHAAAAB0AAAAQAAAAHQAAABEAAAAR
AAAAHQAAABQAAAARAAAAFAAAABIAAAASAAAAFAAAABMAAAAUAAAAHQAAAB4AAAAUAAAAHgAA
AB8AAAAUAAAAHwAAACAAAAAUAAAAIAAAACEAAAAUAAAAIQAAACIAAAAUAAAAIgAAADUAAAAU
AAAANQAAAFUAAAAUAAAAVQAAAGkAAAAUAAAAaQAAAFYAAAAUAAAAVgAAADYAAAAUAAAANgAA
ACMAAAAUAAAAIwAAACsAAAAUAAAAKwAAABgAAAAVAAAAFwAAACQAAAAWAAAAJQAAABcAAAAW
AAAAGAAAACUAAAAXAAAAJQAAACYAAAAXAAAAJgAAACcAAAAXAAAAJwAAACgAAAAXAAAAKAAA
ACkAAAAXAAAAKQAAACoAAAAXAAAAKgAAACQAAAAYAAAAKwAAAEcAAAAYAAAARwAAAGAAAAAY
AAAAYAAAAHUAAAAYAAAAdQAAAGYAAAAYAAAAZgAAAFAAAAAYAAAAUAAAACwAAAAYAAAALAAA
AC0AAAAYAAAALQAAAC4AAAAYAAAALgAAAC8AAAAYAAAALwAAADAAAAAYAAAAMAAAADEAAAAY
AAAAMQAAACcAAAAYAAAAJwAAACYAAAAYAAAAJgAAACUAAAAbAAAAMgAAADMAAAAbAAAAMwAA
ABwAAAAcAAAAMwAAAB8AAAAcAAAAHwAAAB4AAAAcAAAAHgAAAB0AAAAfAAAAMwAAADQAAAAf
AAAANAAAACAAAAAgAAAANAAAACEAAAAhAAAANAAAACIAAAAiAAAANAAAADUAAAAjAAAANgAA
ADcAAAAjAAAANwAAADgAAAAjAAAAOAAAADkAAAAjAAAAOQAAADoAAAAjAAAAOgAAADsAAAAj
AAAAOwAAADwAAAAjAAAAPAAAAD0AAAAjAAAAPQAAAD4AAAAjAAAAPgAAAD8AAAAjAAAAPwAA
AEAAAAAjAAAAQAAAAEgAAAAjAAAASAAAACsAAAAnAAAAMQAAACgAAAAoAAAAMQAAAEEAAAAo
AAAAQQAAAEIAAAAoAAAAQgAAAEMAAAAoAAAAQwAAAEQAAAAoAAAARAAAACkAAAArAAAARQAA
AEYAAAArAAAARgAAAEcAAAArAAAASAAAAEkAAAArAAAASQAAAEoAAAArAAAASgAAAEsAAAAr
AAAASwAAAEwAAAArAAAATAAAAE0AAAArAAAATQAAAE4AAAArAAAATgAAAE8AAAArAAAATwAA
AEUAAAAsAAAAUAAAAC0AAAAtAAAAUAAAAFEAAAAtAAAAUQAAAC4AAAAuAAAAUQAAAC8AAAAv
AAAAQQAAADAAAAAvAAAAUQAAAEEAAAAwAAAAQQAAADEAAAAyAAAAUgAAADQAAAAyAAAANAAA
ADMAAAA0AAAAUgAAAFMAAAA0AAAAUwAAADUAAAA1AAAAUwAAAFQAAAA1AAAAVAAAAFUAAAA2
AAAAVgAAAFcAAAA2AAAAVwAAADcAAAA3AAAAVwAAADgAAAA4AAAAVwAAADkAAAA5AAAAVwAA
AFgAAAA5AAAAWAAAADoAAAA6AAAAWAAAADsAAAA7AAAAWAAAADwAAAA8AAAAWAAAAFkAAAA8
AAAAWQAAAFoAAAA8AAAAWgAAAD0AAAA9AAAAWgAAAFsAAAA9AAAAWwAAAD4AAAA+AAAAWwAA
AD8AAAA/AAAAWwAAAEAAAABAAAAAWwAAAFwAAABAAAAAXAAAAGEAAABAAAAAYQAAAEgAAABB
AAAAUQAAAF0AAABBAAAAXQAAAF4AAABBAAAAXgAAAEIAAABFAAAAXwAAAGAAAABFAAAAYAAA
AEYAAABFAAAATwAAAF8AAABGAAAAYAAAAEcAAABIAAAAYQAAAEkAAABJAAAAYQAAAEoAAABK
AAAAYQAAAGIAAABKAAAAYgAAAEsAAABLAAAAYgAAAGMAAABLAAAAYwAAAEwAAABMAAAAYwAA
AGQAAABMAAAAZAAAAE0AAABNAAAAZAAAAE4AAABOAAAAZAAAAE8AAABPAAAAZAAAAGUAAABP
AAAAZQAAAF8AAABQAAAAZgAAAGcAAABQAAAAZwAAAGgAAABQAAAAaAAAAFEAAABRAAAAaAAA
AF0AAABWAAAAaQAAAGoAAABWAAAAagAAAFcAAABXAAAAagAAAGsAAABXAAAAawAAAGwAAABX
AAAAbAAAAFgAAABYAAAAbAAAAG0AAABYAAAAbQAAAFkAAABZAAAAbQAAAFoAAABaAAAAbQAA
AG4AAABaAAAAbgAAAG8AAABaAAAAbwAAAHAAAABaAAAAcAAAAFsAAABbAAAAcAAAAFwAAABc
AAAAcAAAAHEAAABcAAAAcQAAAHYAAABcAAAAdgAAAGEAAABfAAAAZQAAAHIAAABfAAAAcgAA
AHMAAABfAAAAcwAAAHQAAABfAAAAdAAAAHUAAABfAAAAdQAAAGAAAABhAAAAdgAAAHcAAABh
AAAAdwAAAGIAAABiAAAAdwAAAHgAAABiAAAAeAAAAHkAAABiAAAAeQAAAHoAAABiAAAAegAA
AGMAAABjAAAAegAAAGQAAABkAAAAegAAAHsAAABkAAAAewAAAHwAAABkAAAAfAAAAGUAAABl
AAAAfAAAAH0AAABlAAAAfQAAAHIAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAA
AAAAAAAAAIA/lAIAAAQAAACce2bBTVQQwak6XUBiCoTBJi8QwXwkXUAzFITBhx4SwXCfXED6
Z2bBbTsSwYaqXEAyr03BgtgOwU0PXEApxk/BQu0MwRN0W0DjZ2PBBkgOwQBoXEBtE3fBW7MO
wYaqXEAIXYXBICsOwdNRXEBDUo7BIMwOwXklXEBZaI7BQLMQwW2gW0A+H4TBZv0TwfDjWkBB
WWbBSxoUwR36WkD0pkvBor8QwY0xW0DZcU3BdiYLwA2pD0BYvE/Bt3AMwFPJEED4hFfBsPOj
PhjW6D8X+JTBhWj7wGS2UECqLI/BdrMMwbpHW0AX+JTBzH0Mwa3CWkAX+JTBkDcNwTMFW0AX
+JTBTnEOwZe3WkAX+JTB0SIPwSeAWkAX+JTBTVQQwQ52WUBvfo7B/Y0Swe3kWUDUJ4TBXr8V
wSsIWEAUSGbBRNwVwVgeWEBYsknBwqYSwafEWED7OkvBST8KwDHCDECQpVPB4E2vPpqj4z/R
d1XB4E2vPpka5z9WcVfB4E2vPgxR6D8X+JTB0KCpPpKT6D8X+JTBoHlZPv5C6z8X+JTBUEwL
wbdIWkAX+JTB0AURwb7PWEAX+JTBqCISwSgJV0AX+JTBCtASwfjzVUARko7B9k8UwRL+VkA+
o47BawEWwcPgUkBrMITB03AXwdzqU0BaOWbB2pEXwQkBVEDnBEjBgIEUwYa9VEDnBEjBmVAI
wRWZTEDVLUnBL7sJwC9MCEDnBEjBN1gUwSILVUDa61HB4E2vPuPV3T8X+JTB4E2vPgxR6D8X
+JTBgIEUwarWUUAX+JTB6E8VwT4nT0C+sI7B7lMXwcFqTkCONoTBVsMYwdt0T0DnBEjBPVwW
weT6TkCJL2bBXOQYwQeLT0DnBEjBrKoJwGdxBEB+VFDB4E2vPszd1T8X+JTB4E2vPgxR6L8X
+JTBAtQVwahgTUAX+JTBhYUWwXNNSkDIu47BxnAYwVlDSUB2O4TBcOgZwVxCSkDnBEjBwGwW
wV64TkAtKGbBdgkawYlYSkDnBEjB0MMCwOW2AUAZz03B4E2vPt+YwT/4dU7B4E2vPkq/xz/a
5k7B4E2vPq/nyz/Mvk/B4E2vPpPL0T9sh1fB4E2vPgxR6L/4hFfBsPOjPhjW6L8X+JTBoHlZ
Pv5C678X+JTBHPkWwUA5SEAX+JTBuY0XwVjNREBfxI7BdmgZwaJ1Q0BfQITBANwawbt/REDn
BEjBrOwXwR2pR0DQIGbB5fgaweiVREDnBEjBkQkYwfoYR0DnBEjBgHDmv07W8z/45UzB4E2v
Pp0Ttj8WhFXB4E2vPsYw579YvE/Bt3AMwFPJEMApxk/BQu0MwRN0W8AX+JTBhWj7wGS2UMAX
+JTBrOwXwYlrQkBIyY7BOyIawQo5PUAX+JTBQmAYwRq9PkDTQoTBxJUbwQ04PkDoG2bBqrIb
wTpOPkDnBEjBiioZwV3ePkDnBEjBcKYYwe8cQ0DnBEjBYJrbvx1L7j9JNUzB4E2vPm6aqT/W
sVPB4E2vPpqj47/ZcU3BdiYLwA2pD8Ayr03BgtgOwU0PXMDjZ2PBBkgOwQBoXMCce2bBTVQQ
wak6XcAIXYXBICsOwdNRXMCqLI/BdrMMwbpHW8AX+JTBUEwLwbdIWsAX+JTBkaoYwfEuPEAX
+JTBxREZwYYINkDCX47BQeQawbSnMkDuP4PBylccwc2xM0BLO3DBGaIcwT3pM0C69lnBLcMb
wQROM0DnBEjBuHAZwdsjPEDnBEjBLj8ZweAhPkDnBEjBeLTCv7a/3T8dCUzB4E2vPqLApD8W
f1LB4E2vPo+n37/7OkvBST8KwDHCDMD0pkvBor8QwY0xW8D6Z2bBbTsSwYaqXMBtE3fBW7MO
wYaqXMBiCoTBJi8QwXwkXcAzFITBhx4SwXCfXMBDUo7BIMwOwXklXMAX+JTBzH0Mwa3CWsAX
+JTB81cZwYWSMUAX+JTBkC4bwWKR3z+/EYTBdHAewbH5xD/LbGPBdHAewbH5xD/nBEjBnLIc
wRtTgT/nBEjBGh4awagiMkDnBEjBuBEawYqQM0DnBEjBissZwV/wN0DnBEjBLO+xv87vzj8K
vUvB4E2vPqxZnD8e+FHB4E2vPuPV3b/VLUnBL7sJwC9MCMBYsknBwqYSwafEWMBBWWbBSxoU
wR36WsBZaI7BQLMQwW2gW8A+H4TBZv0TwfDjWsAX+JTB8uQNwdrYWsAX+JTBkDcNwTMFW8AX
+JTB/3wbwTI+wz+/EYTB/UIfwSFRA7/LbGPB/UIfwSFRA7/nBEjBgs8cwdsjPD/nBEjBKr6n
v3Jgwj+baUvB4E2vPtMghz/q3VDB4E2vPt5g2L/nBEjBmVAIwRWZTMA3Y1DB4E2vPvjz1b/n
BEjBrKoJwGdxBMDnBEjBN1gUwSILVcDnBEjBgIEUwYa9VMAUSGbBRNwVwVgeWMDUJ4TBXr8V
wSsIWMBvfo7B/Y0Swe3kWcAX+JTB0AURwb7PWMAX+JTBVNQPwe3kWcAX+JTB0SIPwSeAWsAX
+JTBaEscwQhHAr/CX47BQeQawbSnMsC/EYTBYcscwePiI8BLO3DBGaIcwT3pM8DLbGPBYcsc
wePiI8DnBEjB8nwcwZzokr/nBEjBgs8cwTV7X7/nBEjBpACgvybxqz8oTEvB4E2vPoZ5hz6q
8E7B4E2vPq/ny7/q2E3B4E2vPt+Ywb/nBEjBW3EAwOK3AMDnBEjBPVwWweT6TsBaOWbB2pEX
wQkBVMBrMITB03AXwdzqU8A+o47BawEWwcPgUsARko7B9k8UwRL+VsAX+JTBCtASwfjzVcAX
+JTB/x0cwdRLKr/TQoTBxJUbwQ04PsDuP4PBylccwc2xM8AX+JTB7NcZwWwkJcAX+JTB81cZ
wYWSMcAX+JTBxREZwYYINsBIyY7BOyIawQo5PcDoG2bBqrIbwTpOPsC69lnBLcMbwQROM8Dn
BEjBGh4awagiMsDnBEjB2gCcv39DnD5AR0vB4E2vPshPpr7nBEjBEAGYv+U4ar8+8kzB4E2v
Pskptr/nBEjBVuv5v8X4/b/nBEjBCNgXwRMjSMAtKGbBdgkawYlYSsCJL2bBXOQYwQeLT8CO
NoTBVsMYwdt0T8C+sI7B7lMXwcFqTsAX+JTBgIEUwarWUcAX+JTBTHkTwbxZVMBfQITBANwa
wbt/RMDQIGbB5fgaweiVRMAX+JTBkaoYwfEuPMBfxI7BdmgZwaJ1Q8DnBEjBiioZwV3ePsDn
BEjBLj8ZweAhPsDnBEjBissZwV/wN8DnBEjBuBEawYqQM8DMREvB4E2vPq/nS7/nBEjBpACg
vybxq7+OQUzB4E2vPm6aqb/nBEjBtA7Ov3OL5b/nBEjBkQkYwfoYR8B2O4TBcOgZwVxCSsAX
+JTBHPkWwUA5SMAX+JTBAtQVwahgTcDIu47BxnAYwVlDScDnBEjBcKYYwe8cQ8AX+JTBrOwX
wYlrQsAX+JTBUGAXwYfiRcCbaUvB4E2vPtMgh7/nBEjBWKWov1LPwr9QyUvB4E2vPjKcnL/n
BEjB7s21v1Op0r8cBQAAAAAAAAEAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAA
AAQAAAAFAAAAAAAAAAUAAAAGAAAAAAAAAAYAAAAHAAAAAAAAAAcAAAABAAAAAQAAAAcAAAAI
AAAAAQAAAAgAAAAJAAAAAQAAAAkAAAACAAAAAgAAAAkAAAAKAAAAAgAAAAoAAAALAAAAAgAA
AAsAAAAMAAAAAgAAAAwAAAADAAAAAwAAAA0AAAAEAAAAAwAAAAwAAAANAAAABAAAAA0AAAAO
AAAABAAAAA4AAAAPAAAABAAAAA8AAAAFAAAABQAAAA8AAAAQAAAABQAAABAAAAARAAAABQAA
ABEAAAAGAAAABgAAABEAAAAIAAAABgAAAAgAAAAHAAAACAAAABEAAAASAAAACAAAABIAAAAJ
AAAACQAAABIAAAATAAAACQAAABMAAAAUAAAACQAAABQAAAAVAAAACQAAABUAAAAKAAAACgAA
ABUAAAAWAAAACgAAABYAAAAXAAAACgAAABcAAAAYAAAACgAAABgAAAALAAAACwAAABkAAAAM
AAAACwAAABgAAAAZAAAADAAAABkAAAAaAAAADAAAABoAAAAbAAAADAAAABsAAAANAAAADQAA
ABsAAAAcAAAADQAAABwAAAAOAAAADgAAABwAAAAdAAAADgAAAB0AAAAeAAAADgAAAB4AAAAP
AAAADwAAAB4AAAAfAAAADwAAAB8AAAAQAAAAEAAAAB8AAAAvAAAAEAAAAC8AAAAgAAAAEAAA
ACAAAAAhAAAAEAAAACEAAAARAAAAEQAAACIAAAASAAAAEQAAACEAAAAgAAAAEQAAACAAAAAv
AAAAEQAAAC8AAAA4AAAAEQAAADgAAABGAAAAEQAAAEYAAABTAAAAEQAAAFMAAABkAAAAEQAA
AGQAAAB3AAAAEQAAAHcAAACJAAAAEQAAAIkAAACIAAAAEQAAAIgAAACbAAAAEQAAAJsAAACa
AAAAEQAAAJoAAACZAAAAEQAAAJkAAACtAAAAEQAAAK0AAADDAAAAEQAAAMMAAADCAAAAEQAA
AMIAAADTAAAAEQAAANMAAADSAAAAEQAAANIAAADXAAAAEQAAANcAAADWAAAAEQAAANYAAADG
AAAAEQAAAMYAAACzAAAAEQAAALMAAACyAAAAEQAAALIAAACxAAAAEQAAALEAAACuAAAAEQAA
AK4AAACcAAAAEQAAAJwAAACKAAAAEQAAAIoAAAB5AAAAEQAAAHkAAAB4AAAAEQAAAHgAAABm
AAAAEQAAAGYAAABlAAAAEQAAAGUAAABWAAAAEQAAAFYAAABUAAAAEQAAAFQAAABIAAAAEQAA
AEgAAABHAAAAEQAAAEcAAAA6AAAAEQAAADoAAAA5AAAAEQAAADkAAAAxAAAAEQAAADEAAAAw
AAAAEQAAADAAAAAlAAAAEQAAACUAAAAkAAAAEQAAACQAAAAjAAAAEQAAACMAAAAXAAAAEQAA
ABcAAAAWAAAAEQAAABYAAAAVAAAAEQAAABUAAAAUAAAAEQAAABQAAAATAAAAEQAAABMAAAAi
AAAAEgAAACIAAAATAAAAFwAAACMAAAAYAAAAGAAAACMAAAAkAAAAGAAAACQAAAAlAAAAGAAA
ACUAAAAmAAAAGAAAACYAAAAZAAAAGQAAACcAAAAoAAAAGQAAACgAAAApAAAAGQAAACkAAAAa
AAAAGQAAACYAAAAnAAAAGgAAACkAAAAqAAAAGgAAACoAAAAbAAAAGwAAACsAAAAsAAAAGwAA
ACwAAAAcAAAAGwAAACoAAAAtAAAAGwAAAC0AAAArAAAAHAAAACwAAAAuAAAAHAAAAC4AAAAd
AAAAHQAAAC4AAAA3AAAAHQAAADcAAABDAAAAHQAAAEMAAABCAAAAHQAAAEIAAABBAAAAHQAA
AEEAAABAAAAAHQAAAEAAAABPAAAAHQAAAE8AAABcAAAAHQAAAFwAAABuAAAAHQAAAG4AAACB
AAAAHQAAAIEAAACPAAAAHQAAAI8AAACkAAAAHQAAAKQAAAC5AAAAHQAAALkAAADMAAAAHQAA
AMwAAADYAAAAHQAAANgAAADaAAAAHQAAANoAAADOAAAAHQAAAM4AAAC7AAAAHQAAALsAAACm
AAAAHQAAAKYAAAClAAAAHQAAAKUAAACSAAAAHQAAAJIAAACQAAAAHQAAAJAAAACCAAAAHQAA
AIIAAABvAAAAHQAAAG8AAABdAAAAHQAAAF0AAABQAAAAHQAAAFAAAABEAAAAHQAAAEQAAAA4
AAAAHQAAADgAAAAvAAAAHQAAAC8AAAAfAAAAHQAAAB8AAAAeAAAAJQAAADAAAAAnAAAAJQAA
ACcAAAAmAAAAJwAAADAAAAAxAAAAJwAAADEAAAAyAAAAJwAAADIAAAAoAAAAKAAAADIAAAAz
AAAAKAAAADMAAAApAAAAKQAAADQAAAAqAAAAKQAAADMAAAA1AAAAKQAAADUAAAA0AAAAKgAA
ADQAAAA9AAAAKgAAAD0AAABLAAAAKgAAAEsAAABNAAAAKgAAAE0AAABaAAAAKgAAAFoAAABZ
AAAAKgAAAFkAAABsAAAAKgAAAGwAAABrAAAAKgAAAGsAAAB/AAAAKgAAAH8AAAB+AAAAKgAA
AH4AAAB9AAAAKgAAAH0AAAB8AAAAKgAAAHwAAACNAAAAKgAAAI0AAACiAAAAKgAAAKIAAACh
AAAAKgAAAKEAAAC3AAAAKgAAALcAAADLAAAAKgAAAMsAAADKAAAAKgAAAMoAAADJAAAAKgAA
AMkAAADIAAAAKgAAAMgAAADVAAAAKgAAANUAAADQAAAAKgAAANAAAAC9AAAAKgAAAL0AAACo
AAAAKgAAAKgAAACVAAAAKgAAAJUAAACUAAAAKgAAAJQAAACRAAAAKgAAAJEAAACTAAAAKgAA
AJMAAACnAAAAKgAAAKcAAAC8AAAAKgAAALwAAADPAAAAKgAAAM8AAADbAAAAKgAAANsAAADZ
AAAAKgAAANkAAADNAAAAKgAAAM0AAAC6AAAAKgAAALoAAAC4AAAAKgAAALgAAACjAAAAKgAA
AKMAAACOAAAAKgAAAI4AAACAAAAAKgAAAIAAAABtAAAAKgAAAG0AAABbAAAAKgAAAFsAAABO
AAAAKgAAAE4AAAA/AAAAKgAAAD8AAAA2AAAAKgAAADYAAAArAAAAKgAAACsAAAAtAAAAKwAA
ADYAAAAsAAAALAAAADYAAAA3AAAALAAAADcAAAAuAAAAMQAAADkAAAAyAAAAMgAAADkAAAA6
AAAAMgAAADoAAAA7AAAAMgAAADsAAAA8AAAAMgAAADwAAAAzAAAAMwAAADwAAAA1AAAANAAA
ADUAAAA9AAAANQAAADwAAAA+AAAANQAAAD4AAAA9AAAANgAAAD8AAABAAAAANgAAAEAAAABB
AAAANgAAAEEAAABCAAAANgAAAEIAAABDAAAANgAAAEMAAAA3AAAAOAAAAEQAAABFAAAAOAAA
AEUAAABGAAAAOgAAAEcAAAA7AAAAOwAAAEcAAABIAAAAOwAAAEgAAABJAAAAOwAAAEkAAAA8
AAAAPAAAAEoAAAA+AAAAPAAAAEkAAABKAAAAPQAAAD4AAABLAAAAPgAAAEoAAABMAAAAPgAA
AEwAAABNAAAAPgAAAE0AAABLAAAAPwAAAE4AAABPAAAAPwAAAE8AAABAAAAARAAAAFAAAABR
AAAARAAAAFEAAABFAAAARQAAAFEAAABSAAAARQAAAFIAAABTAAAARQAAAFMAAABGAAAASAAA
AFQAAABJAAAASQAAAFUAAABKAAAASQAAAFQAAABWAAAASQAAAFYAAABVAAAASgAAAFUAAABX
AAAASgAAAFcAAABMAAAATAAAAFcAAABYAAAATAAAAFgAAABZAAAATAAAAFkAAABaAAAATAAA
AFoAAABNAAAATgAAAFsAAABPAAAATwAAAFsAAABcAAAAUAAAAF0AAABeAAAAUAAAAF4AAABR
AAAAUQAAAF4AAABfAAAAUQAAAF8AAABSAAAAUgAAAGAAAABTAAAAUgAAAF8AAABhAAAAUgAA
AGEAAABgAAAAUwAAAGAAAABiAAAAUwAAAGIAAABjAAAAUwAAAGMAAABkAAAAVQAAAFYAAABl
AAAAVQAAAGUAAABmAAAAVQAAAGYAAABnAAAAVQAAAGcAAABXAAAAVwAAAGcAAABoAAAAVwAA
AGgAAABpAAAAVwAAAGkAAABYAAAAWAAAAGoAAABrAAAAWAAAAGsAAABsAAAAWAAAAGwAAABZ
AAAAWAAAAGkAAABqAAAAWwAAAG0AAABcAAAAXAAAAG0AAABuAAAAXQAAAG8AAABwAAAAXQAA
AHAAAABeAAAAXgAAAHAAAABxAAAAXgAAAHEAAABfAAAAXwAAAHEAAAByAAAAXwAAAHIAAABh
AAAAYAAAAGEAAABzAAAAYAAAAHMAAABiAAAAYQAAAHQAAABzAAAAYQAAAHIAAAB1AAAAYQAA
AHUAAAB0AAAAYgAAAHMAAAB0AAAAYgAAAHQAAAB2AAAAYgAAAHYAAABjAAAAYwAAAHcAAABk
AAAAYwAAAHYAAAB3AAAAZgAAAHgAAABnAAAAZwAAAHkAAAB6AAAAZwAAAHoAAABoAAAAZwAA
AHgAAAB5AAAAaAAAAHoAAABpAAAAaQAAAHoAAAB7AAAAaQAAAHsAAABqAAAAagAAAHsAAAB8
AAAAagAAAHwAAAB9AAAAagAAAH0AAAB+AAAAagAAAH4AAAB/AAAAagAAAH8AAABrAAAAbQAA
AIAAAACBAAAAbQAAAIEAAABuAAAAbwAAAIIAAABwAAAAcAAAAIMAAACEAAAAcAAAAIQAAABx
AAAAcAAAAIIAAACDAAAAcQAAAIQAAACFAAAAcQAAAIUAAAByAAAAcgAAAIUAAAB1AAAAdAAA
AHUAAAB2AAAAdQAAAIYAAAB2AAAAdQAAAIUAAACHAAAAdQAAAIcAAACGAAAAdgAAAIYAAACI
AAAAdgAAAIgAAACJAAAAdgAAAIkAAAB3AAAAeQAAAIoAAAB6AAAAegAAAIsAAACMAAAAegAA
AIwAAAB7AAAAegAAAIoAAACLAAAAewAAAIwAAACNAAAAewAAAI0AAAB8AAAAgAAAAI4AAACB
AAAAgQAAAI4AAACPAAAAggAAAJAAAACDAAAAgwAAAJEAAACEAAAAgwAAAJAAAACSAAAAgwAA
AJIAAACTAAAAgwAAAJMAAACRAAAAhAAAAJEAAACUAAAAhAAAAJQAAACVAAAAhAAAAJUAAACW
AAAAhAAAAJYAAACFAAAAhQAAAJYAAACXAAAAhQAAAJcAAACHAAAAhgAAAIcAAACYAAAAhgAA
AJgAAACZAAAAhgAAAJkAAACaAAAAhgAAAJoAAACbAAAAhgAAAJsAAACIAAAAhwAAAJcAAACY
AAAAigAAAJwAAACLAAAAiwAAAJwAAACdAAAAiwAAAJ0AAACeAAAAiwAAAJ4AAACfAAAAiwAA
AJ8AAACMAAAAjAAAAJ8AAACgAAAAjAAAAKAAAAChAAAAjAAAAKEAAACiAAAAjAAAAKIAAACN
AAAAjgAAAKMAAACPAAAAjwAAAKMAAACkAAAAkgAAAKUAAACTAAAAkwAAAKUAAACmAAAAkwAA
AKYAAACnAAAAlQAAAKgAAACpAAAAlQAAAKkAAACWAAAAlgAAAKkAAACXAAAAlwAAAKkAAACq
AAAAlwAAAKoAAACrAAAAlwAAAKsAAACsAAAAlwAAAKwAAACYAAAAmAAAAKwAAACtAAAAmAAA
AK0AAACZAAAAnAAAAK4AAACdAAAAnQAAAK8AAACwAAAAnQAAALAAAACeAAAAnQAAAK4AAACx
AAAAnQAAALEAAACyAAAAnQAAALIAAACzAAAAnQAAALMAAAC0AAAAnQAAALQAAACvAAAAngAA
ALAAAACfAAAAnwAAALUAAAC2AAAAnwAAALYAAACgAAAAnwAAALAAAACvAAAAnwAAAK8AAAC1
AAAAoAAAALYAAAChAAAAoQAAALYAAAC3AAAAowAAALgAAACkAAAApAAAALgAAAC6AAAApAAA
ALoAAAC5AAAApgAAALsAAACnAAAApwAAALsAAAC8AAAAqAAAAL0AAAC+AAAAqAAAAL4AAAC/
AAAAqAAAAL8AAACpAAAAqQAAAMAAAACqAAAAqQAAAL8AAADAAAAAqgAAAMAAAADBAAAAqgAA
AMEAAACrAAAAqwAAAMIAAADDAAAAqwAAAMMAAACtAAAAqwAAAK0AAACsAAAAqwAAAMEAAADC
AAAArwAAALQAAADEAAAArwAAAMQAAADFAAAArwAAAMUAAAC1AAAAswAAAMYAAAC0AAAAtAAA
AMYAAADHAAAAtAAAAMcAAADEAAAAtQAAAMUAAADIAAAAtQAAAMgAAADJAAAAtQAAAMkAAAC2
AAAAtgAAAMkAAADKAAAAtgAAAMoAAADLAAAAtgAAAMsAAAC3AAAAuQAAALoAAADMAAAAugAA
AM0AAADMAAAAuwAAAM4AAAC8AAAAvAAAAM4AAADPAAAAvQAAANAAAAC+AAAAvgAAAMUAAADE
AAAAvgAAAMQAAADRAAAAvgAAANEAAAC/AAAAvgAAANAAAADFAAAAvwAAANEAAADAAAAAwAAA
ANEAAADBAAAAwQAAANIAAADTAAAAwQAAANMAAADCAAAAwQAAANEAAADUAAAAwQAAANQAAADS
AAAAxAAAAMcAAADRAAAAxQAAANAAAADVAAAAxQAAANUAAADIAAAAxgAAANYAAADHAAAAxwAA
ANYAAADXAAAAxwAAANcAAADUAAAAxwAAANQAAADRAAAAzAAAAM0AAADYAAAAzQAAANkAAADY
AAAAzgAAANoAAADPAAAAzwAAANoAAADbAAAA0gAAANQAAADXAAAA2AAAANkAAADbAAAA2AAA
ANsAAADaAAAA</SharedString>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
	</SharedStrings>
</roblox>